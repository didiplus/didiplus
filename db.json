{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/comment.js","path":"js/comment.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/getHashCode.js","path":"js/getHashCode.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1}],"Cache":[{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1582902911333},{"_id":"themes/Butterfly/README.md","hash":"42e0f638fae9acf70683a86d366d4c038d74d9ac","modified":1582902911333},{"_id":"themes/Butterfly/README_CN.md","hash":"d2fb081a13748d9740b22b987fb63af673da64ff","modified":1582902911333},{"_id":"themes/Butterfly/_config.yml","hash":"c4ebc86ad48c2e53de757cc3670bd1cd68e6f700","modified":1583916587000},{"_id":"themes/Butterfly/package.json","hash":"8ea3f0abaa2b34d9c01ca4d58de073e682eecf54","modified":1582902911337},{"_id":"source/404/index.md","hash":"27ee7a32098a3a768c80e778698c1730a4f2206e","modified":1582946763000},{"_id":"source/_data/link.yml","hash":"8abc5bd4508581cd240417a4ed83473c9cc16446","modified":1582941966000},{"_id":"source/_posts/Docker实战-基于centos7镜像创建ssh容器.md","hash":"be69f7482cd60f58297ff9286417a545c1a3e8c0","modified":1583114588469},{"_id":"source/_posts/MySQL-INNER-JOIN：内连接查询.md","hash":"ab37c14b2118ad2b68c181b168db799049de4011","modified":1585639261000},{"_id":"source/_posts/MySQL-LEFT-RIGHT-JOIN-外连接查询.md","hash":"90b2b474289b66c8ecec0a362cbe098f6128c3cd","modified":1585642316000},{"_id":"source/_posts/MySQL-LIMIT：限制查询结果的记录条数.md","hash":"da5260eb9c9e7eca33138cb4fe6a423b46ed61e4","modified":1584601467250},{"_id":"source/_posts/MySQL-ORDER-BY-对查询结果进行排序.md","hash":"04a4a7cc7ae65914ccfa18572e08b27f6a8ea695","modified":1584934665907},{"_id":"source/_posts/MySQL-WHERE-条件查询.md","hash":"f72b645aa4d6ee93180906b841c249ecd67ec6cd","modified":1585034338013},{"_id":"source/_posts/MySQL主键.md","hash":"8a8aec397f12c9c531f739bc7af8f9da61c15687","modified":1583723838580},{"_id":"source/_posts/MySQL修改数据库-ALTER-DATABASE用法简介.md","hash":"86b4ed6d99de3961965d8d2f1d6abfe527871210","modified":1583028077538},{"_id":"source/_posts/MySQL修改数据表-ALTER-TABLE语句.md","hash":"4ba5f1123eed3d4282c40e047015122b447302b7","modified":1583571451000},{"_id":"source/_posts/MySQL创建数据库-CREATE-DATABASE语句.md","hash":"c0446e8fee8e5c31cbfe990ea559e41fa304d746","modified":1582983427000},{"_id":"source/_posts/MySQL创建数据表-CREATE-TABLE语句.md","hash":"0e7781c41333bb723552e605950bc5fda97eaf17","modified":1583286178036},{"_id":"source/_posts/MySQL删除数据表.md","hash":"858fb47425ac6e48228076b7d55a03209567b7ba","modified":1583576870711},{"_id":"source/_posts/MySQL去重和设置别名.md","hash":"66f8c252494c482bf2e8deee6f0414c0b3ea360c","modified":1584452230656},{"_id":"source/_posts/MySQL唯一约束-UNIQUE-KEY.md","hash":"a9e113e5061dc9b5937020adf8bde2b7d0d28742","modified":1583985552971},{"_id":"source/_posts/MySQL外键约束-FOREIGN-KEY.md","hash":"eb7eeba327b79b197ed478e8c2e1ec60cab4d54b","modified":1583825490210},{"_id":"source/_posts/MySQL子查询详解.md","hash":"e9177b579fcf3c7dd919d2d08d30c2bc8a5d0b58","modified":1585638587100},{"_id":"source/_posts/MySQL存储引擎精讲.md","hash":"ca4b7ae8edbad5ee8efce28a86144dfa4d58abd0","modified":1583817684000},{"_id":"source/_posts/MySQL常用运算符详解.md","hash":"81d3fdb670b3b3304ddc0913576005621944ec90","modified":1585186024285},{"_id":"source/_posts/MySQL数据类型简介.md","hash":"339eb67a1e720205a21f79e8dc3feaab4f8ef174","modified":1583219116527},{"_id":"source/_posts/MySQL查看或显示数据库-SHOW-DATABASES语句.md","hash":"a01870267e4b174998f036ffec144db5b6924b15","modified":1582979986780},{"_id":"source/_posts/MySQL检查约束-CHECK.md","hash":"981b6a3fc90e65bf536850f154152447e1cdfdef","modified":1584067438363},{"_id":"source/_posts/MySQL非空约束-NOT-NuLL.md","hash":"cbff72303f7540331ba17cf420ba44797aa575d6","modified":1584277594897},{"_id":"source/_posts/MySQL默认值-DEFAULT.md","hash":"9469f213c3c0e7120b73d7c53c0464c0782b2774","modified":1584168831458},{"_id":"source/_posts/Mysql-SELECT-数据表查询语句.md","hash":"36b4236a93ade7bee8aa796865c8115152719ced","modified":1584330007430},{"_id":"source/_posts/Mysql分组查询-group-by.md","hash":"ebffbe819a0ccec5b1f14773cc947073745d301b","modified":1586242583000},{"_id":"source/_posts/OSI模型与TCP-IP模型.md","hash":"7bd72d27a76d7cd94429692ccb84aeb85feaf13e","modified":1583415822660},{"_id":"source/_posts/TCP的三次握手与四次挥手详解.md","hash":"ba5c6a7bab9531b31af938fe7fe70858285473eb","modified":1583160185000},{"_id":"source/_posts/centos7安装后如何配置成国内的镜像源.md","hash":"922c2fee3c1a739e950260776c5b428cb88b8db2","modified":1586089926100},{"_id":"source/_posts/python练习-输入一个时间-输出该时间经过5分30秒后的时间.md","hash":"10aa497db7013ddca4def0309e06cd3f97ec15e0","modified":1584936083562},{"_id":"source/_posts/数据结构与算法-树和二叉树.md","hash":"b3b24380ae528ec8152ac67936e245aa81817e9a","modified":1583415697697},{"_id":"source/_posts/数据结构与算法-线性结构.md","hash":"0c8c26ce74018e10548563f407fabf92d6bb16b7","modified":1583328334352},{"_id":"source/_posts/案例分享-华为防火墙配置点到点IPSEC-VPN.md","hash":"b23d00942577a4aa100db8288a6e32e494b044bb","modified":1585370645187},{"_id":"source/_posts/网络通信基础.md","hash":"50ab33ce63ba1662fcb7702818bfdb2183a5b7d8","modified":1583682108221},{"_id":"source/_posts/计算机系统知识.md","hash":"8d89bd40779c102b0f14d678c5b2a2e3986bc0da","modified":1583159865505},{"_id":"source/categories/index.md","hash":"0c5fa08ce46773107dae7c167b57b45cec0d307a","modified":1582946318000},{"_id":"source/link/index.md","hash":"692fe36d67149d65fca587388bb23f5e585d401c","modified":1582946243000},{"_id":"source/tags/index.md","hash":"c4516560bb59df511b13934bdd50e6e9c91e45e7","modified":1582941119000},{"_id":"themes/Butterfly/languages/default.yml","hash":"ad6ac020ca7ba7b365f79c0358819f9a157f056e","modified":1582902911334},{"_id":"themes/Butterfly/languages/en.yml","hash":"b2b37b01e46456a4e8bc3bf1bddb0ee0b436f3e8","modified":1582902911334},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"b82574439d6f26607531c485ba4b479f57e9c5e2","modified":1582902911334},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"d1ff35c627f5d2c389058a26037101429e771487","modified":1582902911334},{"_id":"themes/Butterfly/layout/archive.pug","hash":"4d6209e8c781c9e283e1ac8c6f741c1ff68e0658","modified":1582902911334},{"_id":"themes/Butterfly/layout/category.pug","hash":"faf9aac87070c097e8e04eabcf341c6d04b568db","modified":1582902911334},{"_id":"themes/Butterfly/layout/flink.pug","hash":"6da8b1a80d0b39c2806af43dca232fdb0c390d94","modified":1582902911334},{"_id":"themes/Butterfly/layout/index.pug","hash":"e002f2969f8dd528c63bbd5c38859de2303f6946","modified":1582902911337},{"_id":"themes/Butterfly/layout/page.pug","hash":"1a55c2cc41d9bedf4a69400714455e8d62a58fff","modified":1582902911337},{"_id":"themes/Butterfly/layout/post.pug","hash":"36107d04ff2becc3a15f2fbc9aa462ee267af476","modified":1582902911337},{"_id":"themes/Butterfly/layout/tag.pug","hash":"b3b446581961a838a47f17d9d3e3c81d0baff18e","modified":1582902911337},{"_id":"themes/Butterfly/scripts/gallery-tag.js","hash":"b9e7fe3e36336bec0e9dad7243456ac98ba63984","modified":1582902911337},{"_id":"themes/Butterfly/scripts/hide_post.js","hash":"15046d3b80cd0d981dbd4caccd53972f184e98e3","modified":1582902911337},{"_id":"themes/Butterfly/scripts/highlight.js","hash":"06ec7e41456e4870bdfa5f49da2aa75478377ee5","modified":1582902911337},{"_id":"themes/Butterfly/scripts/list_archives.js","hash":"c47505eb2a3fc150e2cdb17c19bf9268b9fd0315","modified":1582902911337},{"_id":"themes/Butterfly/scripts/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1582902911337},{"_id":"themes/Butterfly/scripts/photo.js","hash":"a4218bbf7d0510159f6250caa0e52f223d976c35","modified":1582902911337},{"_id":"themes/Butterfly/scripts/post-lazyload.js","hash":"f1b61cb25880e41db6a7ed58fbabc7affc2577ed","modified":1582902911337},{"_id":"themes/Butterfly/scripts/random_cover.js","hash":"81d1d2ebc4b5022d701182a98383969715f7ca53","modified":1582902911337},{"_id":"themes/Butterfly/scripts/related_post.js","hash":"552e163db1b77e23edafea5719f90d4d7fb5b312","modified":1582902911337},{"_id":"themes/Butterfly/scripts/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1582902911338},{"_id":"themes/Butterfly/scripts/url_check.js","hash":"f3b533517dc5fc6d49dd34103f1ad91dcd6d0e87","modified":1582902911338},{"_id":"themes/Butterfly/img/wechat.jpg","hash":"dd0257cd3ba386ee562092d123937f5e3a7a0de7","modified":1582980215000},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"126a7d7520002f47add8bf5d20b95a3d3e97b99a","modified":1582902911334},{"_id":"themes/Butterfly/layout/includes/config.pug","hash":"b87a0681c6675d2b48188de0c3ddc45bfaef6a00","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"2c099f1321bf5c8c8d6b4815a2f9e4f7e36dcd79","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"a0431d26d1ba88e21bf60287056fee772194fd9e","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/header.pug","hash":"3c1ea11fb1cde7f3beda8aeddf04b076c0827a9f","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/index-js.pug","hash":"889d10fd65c61257cc2fc652f5e4c21bb5585a53","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"0d91b54e916e3cd6fdc33cb42936d17e2a6a7bb4","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/menu_item.pug","hash":"92527e432748c978aca4127db93421d263b7a4b8","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar.pug","hash":"37a77ae955d5c3851b1eeb507fedf78781795d51","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/nav.pug","hash":"ca0394edad88a8b7436670c04271df4cdafe1fd0","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/page_tag.pug","hash":"77806405a67ce97801f5b74adaa4c62f96b05572","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"9962414e7d40c8758b0db121cfc8c1f38c5726ce","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"e185d6147f44305e3103d8ca78189b52bb6e17d5","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/reward.pug","hash":"f0594d919091ad1f9b88389cba3cee5eabca23f7","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"eacab5f86935969fbbb93955371db56f04a83843","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b076fa6fd08dbcfd743a4f5982f89ad84791573a","modified":1582902911336},{"_id":"themes/Butterfly/source/css/index.styl","hash":"d97cf99572b5285ebc7152fe72678bf92f01ac67","modified":1582902911340},{"_id":"themes/Butterfly/source/css/var.styl","hash":"d0600350afae26a7617059b138c41bb716542a11","modified":1582902911340},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"a9dff120169c4bc46d12116de792011a948938d9","modified":1582902911340},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582902911341},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1582902911343},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1582902911343},{"_id":"themes/Butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1582902911343},{"_id":"themes/Butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1582902911344},{"_id":"themes/Butterfly/source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1582902911344},{"_id":"themes/Butterfly/source/js/comment.js","hash":"f1bf92d8eb25f613a7aaee0cefa133de2d756de5","modified":1583915774000},{"_id":"themes/Butterfly/source/js/getHashCode.js","hash":"023cdaba92a89ba59e67eaa76dd74c9e41b98587","modified":1583914902000},{"_id":"themes/Butterfly/source/js/main.js","hash":"d2f8926f343791c05d48a3d64e01ec896a6d97e2","modified":1582902911344},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"cc26adb3c22983ae23e0b314e0fe3b73dd61432d","modified":1582902911344},{"_id":"themes/Butterfly/source/js/utils.js","hash":"693e23855afde9c4ccc55244bac1a37bbe78972c","modified":1582902911344},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1582902911343},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1582902911343},{"_id":"themes/Butterfly/img/alipay.jpg","hash":"3b6f9d1100ce38bf5aadfd78ed07c14db6dac4b8","modified":1582980224000},{"_id":"themes/Butterfly/layout/includes/comments/changyan.pug","hash":"9cff2809a9fc6e20d362544af73191d677fd5dc7","modified":1583915835000},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"37357152952f1d8f7f9eac390baaae29647e8b69","modified":1582902911334},{"_id":"themes/Butterfly/layout/includes/comments/disqusjs.pug","hash":"bf03abb46095a521742dbd8959102c9dfd3839b9","modified":1582902911334},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"a1d31fc54686736d1416cf8b23888f93d9edd3f3","modified":1582902911334},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"c88fc329bd73b7d5445450f7bb14d12dc7bd54df","modified":1583914419000},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1582902911334},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"c9bd1dbde21e179678e056236fe93700b2c64bc6","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"141aaad9a9f59fb1e2afd59fc52d4e04e6ee2bfc","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"eaef93932742a1f3d27746943cba0edc6f5aff8f","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/darkmode.pug","hash":"6e45c4dd45ed8037948639e30947886aff186f8b","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/dns_prefetch.pug","hash":"54f091a1736e6186707a5ead25bf98fcd55e9661","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1582902911335},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"3b2ae03259fe632441fd86a163ad65838d6c202e","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"a521e0b4760bc77c293a115603d84e4863544982","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"bc3d9694f3f3f3d4d95e8ccadbf6e27a61093c6d","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"8ab8fc87104dfe1de8107ec984b35c821813e310","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"47892d5cec13b047bd38d1101574d47836bf67e9","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"32d5e234dda73e613f907bd26e255b9213d1d74d","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"4abbd02c7dcb2c0a42062d6c18d87faa60988914","modified":1582902911336},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"749329a39e44bafbf0ea3a3f07cbe558899cefe7","modified":1582902911337},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"7d4201dfe3a096c2470c2f1f4ded7b02e3250a40","modified":1582902911337},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"dbfbc1d1f063a9121a8b67ed57db26fccd50b087","modified":1582902911337},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"284f10318cd7e048fcf6fad70c38c562520244b8","modified":1582902911337},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"e912c7925ca8e57f0cd7b0ea0cc43656177122ef","modified":1582902911337},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"1f550ae2b824a00f71b09e13bce07f0ba05f4d35","modified":1582902911337},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"ca66630f0f20fcd99ce88dd6807cc22212b3e10a","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"2ef6b0953d2681cf2c004ffe0650549e123e8ca7","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"efceb8105830544cef5e4afad3243326b3118fc1","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"d80a6c8b3173aab6d986cf98cf901841c524239d","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"43665a1e053e838673b683780650822dd7a9a749","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"f578d48c380d4b005f409d10cd671d0bf86f46c2","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"75c46f41be2d29c1de8e76d0fe2b0e14ae63ab8e","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"4131ce6cd96344caff006ffd4c084df2dbb868f3","modified":1582902911338},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"43ec56fdf168a191100b2d8c0f44bfd2af66e8b1","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"b691ed975e3408a63be9dbe378b0a686f7286788","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"0137e10a1d2cef31f5099c8bc2b68f9a4ce5708f","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"a786e16dcf7c3661e5715004e8c4898854ca4ae5","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"42fb06d38683f124b231964211bd0713d4b94420","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"4f8b75b02c9db40c3ecbdbf67712bd155f034fbe","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/readmode.styl","hash":"d2609c084c68f14c0cb1f966767f12227faed2c6","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"cfd36d53386c99c465f4add125524a6d3b4f6cfb","modified":1582902911339},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"e7edcb1824b4a7b5f3079f96496465be7cb8758f","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"4feb9cc8bea6a9521fbb4cdeaaa71d31cb112e4c","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"e1f1f104155681a0d630688e40b3ecd4461852a5","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_layout/z-darkmode.styl","hash":"5f2231f3392444ae8b32bb58a60eb53db8de9670","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"610822c1ab60f93e7ae50a2c2e616841a57e80a7","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"a086ae149c740345d2a345c30cd5becf2edf857c","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"02b9b63d9c4e7e7948f745948e32f965b1bc287b","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1582902911340},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1582902911340},{"_id":"public/404/index.html","hash":"46b9491ab9f1e88662b47a011842aa7d997f3474","modified":1586312006913},{"_id":"public/categories/index.html","hash":"70f4d6bd6577c2ab250b67dc3eadd4bf65fb5b1c","modified":1586312006913},{"_id":"public/link/index.html","hash":"e65e96996283ad344fda0e6572c59f6939ad0a88","modified":1586312006913},{"_id":"public/tags/index.html","hash":"ca10cbddff61e52499a8c01687090cf4bed86059","modified":1586312006913},{"_id":"public/post/7add2402.html","hash":"263e0460745d6891708aa39e697c3aef8c45ed03","modified":1586312006913},{"_id":"public/post/1660888c.html","hash":"bd28e5836d936ee2c950498580788b2a5f8a54da","modified":1586312006913},{"_id":"public/post/2b8375ce.html","hash":"241df6c38d1de8bb68e95e9692623beebb207c0a","modified":1586312006913},{"_id":"public/post/2d2af903.html","hash":"75d5a3b54bd0eecff938ead750f94747593ffdfb","modified":1586312006913},{"_id":"public/post/6ecc6510.html","hash":"cf3887b0aa0fff9e992851b2551ea9ce1e73615d","modified":1586312006913},{"_id":"public/post/f1eed45f.html","hash":"f93f7ccf1b9808d9f5f1ef1d7168d6c57639afcd","modified":1586312006913},{"_id":"public/post/5b424e8f.html","hash":"fce3bb32a8ca4cc7444dfe79a644458ecd744914","modified":1586312006913},{"_id":"public/post/dfb807ee.html","hash":"d75aee6f21fe6de6976ee6c3654efa8459563a68","modified":1586312006913},{"_id":"public/post/f56acc9.html","hash":"64c56baee20c1800552726ad6a92c2eff4ef9a92","modified":1586312006913},{"_id":"public/post/fb3bb1f6.html","hash":"516d1d1de9bd073c7750ed8390fdd61453917287","modified":1586312006913},{"_id":"public/post/a9695717.html","hash":"0101666fa9e155b281e2c2afc75821d5c0dc62f0","modified":1586312006913},{"_id":"public/post/259e736e.html","hash":"b027550658852b7f7add9cd7cee3609ccec09a67","modified":1586312006913},{"_id":"public/post/8da7dc77.html","hash":"851c29aa12addf5fb9df9c10070321f31077ed67","modified":1586312006913},{"_id":"public/post/7857d14.html","hash":"77abd19e63e0ace02179a5df7532a360fa10c62e","modified":1586312006913},{"_id":"public/post/bfc9a30b.html","hash":"c630289527308e2492a9c4bcb39ab5aa5c399a2a","modified":1586312006913},{"_id":"public/post/e2afda08.html","hash":"4543a167370b18714a675571edf51af7d0eae6c9","modified":1586312006913},{"_id":"public/post/76fe01d5.html","hash":"da81f9846c635540ae9df450e3fbe2d17cb5cec8","modified":1586312006913},{"_id":"public/post/b32f27.html","hash":"ff1c83657537b45c8e7c86ac2428f3ac9803fe7f","modified":1586312006913},{"_id":"public/post/fea984c4.html","hash":"8f9888ff192b58f5dfb65d168a8fcd2e95fd3de1","modified":1586312006913},{"_id":"public/post/5888fee2.html","hash":"be14d0a7c41ac04441259e8dfc459cbcac1690b7","modified":1586312006913},{"_id":"public/post/b967e26d.html","hash":"2384cb3c5f4e6166c9da56405000b16f81728a1e","modified":1586312006913},{"_id":"public/post/e3461340.html","hash":"35bb216e47a86cadd5a43b41f10b982478b2528f","modified":1586312006913},{"_id":"public/post/96494195.html","hash":"3f17ad35d83d6a3309611333355761c744457d55","modified":1586312006913},{"_id":"public/post/9363cf89.html","hash":"9d2893db70c97d1a2cacef4c79568e1a8a0ad336","modified":1586312006913},{"_id":"public/post/dd39da98.html","hash":"e381f8bb4d6ce4f80b69cdf1d686fda9d984eead","modified":1586312006913},{"_id":"public/post/ba34c15b.html","hash":"aa2f31eda46adf120f5bd7d69d97a298b2b40c19","modified":1586312006913},{"_id":"public/post/de5b8b9b.html","hash":"3309692b8bf9c87c4fd45cc2a3adbcef82bb8394","modified":1586312006913},{"_id":"public/post/985d18d8.html","hash":"a550af26e6d075a0ccaa7f055f5c0ddf4f193eb6","modified":1586312006913},{"_id":"public/post/2c9e1e4.html","hash":"e5c2ac203bfda02ce0a9ae4a1b1d9b36d5e1ccc1","modified":1586312006913},{"_id":"public/post/77f24681.html","hash":"1eedf2e73e9bda46696ea7c4eeb276c9580812d9","modified":1586312006913},{"_id":"public/post/3adad3a1.html","hash":"30e52f051957764012c0956d03027022a104975a","modified":1586312006913},{"_id":"public/post/b1cf4eaf.html","hash":"4742cf3e071b693f11376fdba577a98945b12d3a","modified":1586312006913},{"_id":"public/post/60b68f5d.html","hash":"71341e42ba329906f4740f19edeafacf8430e52f","modified":1586312006913},{"_id":"public/post/3d972e7d.html","hash":"0be315b370c76dfa8670cddf1cb3bc25663db9b4","modified":1586312006913},{"_id":"public/archives/index.html","hash":"eec4ae6793c484234c6325195e714f7528c64ec5","modified":1586312006913},{"_id":"public/archives/page/2/index.html","hash":"58c3ed52e2655ec7560666687739dc49e94f4539","modified":1586312006913},{"_id":"public/archives/page/3/index.html","hash":"c7f15eb4138e922958e619fee4aed1a71e2a2ac1","modified":1586312006913},{"_id":"public/archives/page/4/index.html","hash":"e3381a92ec3695bfd0fba5b89aa21be85567fb15","modified":1586312006913},{"_id":"public/archives/2020/index.html","hash":"4a34cb2738d66cba459815cfe78e438ddc1146d2","modified":1586312006913},{"_id":"public/archives/2020/page/2/index.html","hash":"49ec39adad246f1b77c698b9e2ae7c47ccaf362f","modified":1586312006913},{"_id":"public/archives/2020/page/3/index.html","hash":"12e6f78537b75aedcfebb502dd90094f9c2df80c","modified":1586312006913},{"_id":"public/archives/2020/page/4/index.html","hash":"85a062e19402d92e5ff25a50390c4e6c24f6bdef","modified":1586312006913},{"_id":"public/archives/2020/02/index.html","hash":"bbb2403cc042ee374b1044b25d94debe6925d345","modified":1586312006913},{"_id":"public/archives/2020/03/index.html","hash":"c51064cd63a9e85777baaaaa33ac481c98319fd2","modified":1586312006913},{"_id":"public/archives/2020/03/page/2/index.html","hash":"5d4e87e6e41570f2ab49bc9b9255befe9753cb56","modified":1586312006913},{"_id":"public/archives/2020/03/page/3/index.html","hash":"eb2ee338bcdc9bfc1d729c27568295404775d0ad","modified":1586312006913},{"_id":"public/archives/2020/04/index.html","hash":"52bba66b2b9616a9543ef13c6d8467bd858dc9e7","modified":1586312006913},{"_id":"public/categories/Docker/index.html","hash":"7af74ee4ecf766406453e00f9db233b3ada79827","modified":1586312006913},{"_id":"public/categories/Mysql/index.html","hash":"7756d94698b250c0a1cf7a418dbe0a9cf14e2fb4","modified":1586312006913},{"_id":"public/categories/Mysql/page/2/index.html","hash":"41b769b67e507ab19c96b064fa87f11d08bb494a","modified":1586312006913},{"_id":"public/categories/Mysql/page/3/index.html","hash":"8a43ff33ab429425f11c0d5966620bd7f5295894","modified":1586312006913},{"_id":"public/categories/数通/index.html","hash":"f58ae19109b359d6caa02a6d292ff63e6dac646a","modified":1586312006913},{"_id":"public/categories/linux/index.html","hash":"6ac35eed77747dc3d281b7b8d4efc564ff9a35d5","modified":1586312006913},{"_id":"public/categories/python/index.html","hash":"69344033dbab3ca8f0adc4806473c0df969ccae5","modified":1586312006913},{"_id":"public/categories/数据库系统工程师/index.html","hash":"175f4cb5564faeca9c8d18cdf512fd40caf6a1f2","modified":1586312006913},{"_id":"public/index.html","hash":"729807f899369384b77097da28d3c9ced90367a6","modified":1586312006913},{"_id":"public/page/2/index.html","hash":"03268da8aed991837747c66cb8ad58a1b107ff57","modified":1586312006913},{"_id":"public/page/3/index.html","hash":"24ad03bd8bd59d59204f508a9f822ea01da86fce","modified":1586312006913},{"_id":"public/page/4/index.html","hash":"c718233d77039936e99fd427401d4932550a938d","modified":1586312006913},{"_id":"public/tags/Docker/index.html","hash":"98cf7efb9d82efcf3417f2d7e2dbac588484908b","modified":1586312006913},{"_id":"public/tags/Mysql/index.html","hash":"2b038d4a0bb9777a2b6fae185322ea3190794c7d","modified":1586312006913},{"_id":"public/tags/Mysql/page/2/index.html","hash":"892b3bee6a00d9d6cebb436378697518954add29","modified":1586312006913},{"_id":"public/tags/Mysql/page/3/index.html","hash":"251c65dfa215464fd8b981d47cea92f158d6c66f","modified":1586312006913},{"_id":"public/tags/MySQL/index.html","hash":"a7664d8c6b0fe43600f2127da5a3fc4a5382d983","modified":1586312006913},{"_id":"public/tags/数通/index.html","hash":"3a9b063a5507aae7801582660e83258a062ddd7b","modified":1586312006913},{"_id":"public/tags/centos7/index.html","hash":"47d0018c6bd587052148fa9bdb4688c208a294e1","modified":1586312006913},{"_id":"public/tags/python/index.html","hash":"c0b810931da60e6c8f3a0f613daba2b487dfaf1f","modified":1586312006913},{"_id":"public/tags/数据库系统工程师/index.html","hash":"3d8e54e2ec94e5ecb013793e9f89fe0c6173ed4e","modified":1586312006913},{"_id":"public/tags/IPSec-VPN/index.html","hash":"4d8951e480a82107e680601d90638c6417bdd322","modified":1586312006913},{"_id":"public/img/404.jpg","hash":"a9dff120169c4bc46d12116de792011a948938d9","modified":1586312006913},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586312006913},{"_id":"public/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1586312006913},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1586312006913},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1586312006913},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1586312006913},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1586312006913},{"_id":"public/img/avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1586312006913},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1586312006913},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586312006913},{"_id":"public/js/comment.js","hash":"74325649f6efa8f846b5b2fb5e6324427b8d6285","modified":1586312006913},{"_id":"public/js/getHashCode.js","hash":"f5a562e855cf91ff9442fedc63babb4ecae322bc","modified":1586312006913},{"_id":"public/js/utils.js","hash":"693e23855afde9c4ccc55244bac1a37bbe78972c","modified":1586312006913},{"_id":"public/css/index.css","hash":"af8e536a0f00080b07cd8979447ce647f3037582","modified":1586312006913},{"_id":"public/js/main.js","hash":"d2f8926f343791c05d48a3d64e01ec896a6d97e2","modified":1586312006913},{"_id":"public/js/tw_cn.js","hash":"cc26adb3c22983ae23e0b314e0fe3b73dd61432d","modified":1586312006913}],"Category":[{"name":"Docker","_id":"ck8qp7mtt0003tvm02z8w9veu"},{"name":"Mysql","_id":"ck8qp7mtz0008tvm051gs2je6"},{"name":"数通","_id":"ck8qp7ql3002itvm0bb4234ed"},{"name":"linux","_id":"ck8qp7qld002ttvm02aynfsgg"},{"name":"python","_id":"ck8qp7qlg0030tvm03syd4gzm"},{"name":"数据库系统工程师","_id":"ck8qp7qli0036tvm05sns5ey4"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \tsrc=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>\n","source":"404/index.md","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \tsrc=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>\n","date":"2020-02-29T03:26:05.597Z","updated":"2020-02-29T03:26:03.000Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"ck8qp7mtg0000tvm02scx1tob","content":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    <meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/default.png","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    <meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n    <body>\n        <script type=\"text/javascript\"     src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n"},{"title":"分类","date":"2020-02-29T01:46:40.000Z","type":"categories","top_img":"http://tvax3.sinaimg.cn/large/9fc55f55gy1gcd3ly2b73j21hc0xaabj.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-02-29 09:46:40\ntype: \"categories\"\ntop_img: http://tvax3.sinaimg.cn/large/9fc55f55gy1gcd3ly2b73j21hc0xaabj.jpg\n---\n","updated":"2020-02-29T03:18:38.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8qp7qkv002ctvm08dha94fp","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/default.png","excerpt":"","more":""},{"title":"友情链接","date":"2020-02-29T01:39:50.000Z","type":"link","top_img":"http://tvax3.sinaimg.cn/large/9fc55f55gy1gcd3mztgvmj21hc0zfmzt.jpg","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-02-29 09:39:50\ntype: \"link\"\ntop_img: http://tvax3.sinaimg.cn/large/9fc55f55gy1gcd3mztgvmj21hc0zfmzt.jpg\n---\n","updated":"2020-02-29T03:17:23.000Z","path":"link/index.html","comments":1,"layout":"page","_id":"ck8qp7qkz002etvm0e70p04md","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/default.png","excerpt":"","more":""},{"title":"标签","date":"2020-02-29T01:46:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-02-29 09:46:17\ntype: \"tags\"\n---\n","updated":"2020-02-29T01:51:59.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck8qp7ql2002htvm0hxho6ddq","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/default.png","excerpt":"","more":""}],"Post":[{"title":"Docker实战:基于centos7镜像创建ssh容器","keywords":"Docker Dockerfile创建ssh容器","description":"Dockerfile创建ssh容器","cover":"https://tva1.sinaimg.cn/large/9fc55f55ly1gcet3611zgj209c07zt96.jpg","abbrlink":"77f24681","date":"2020-03-01T12:51:12.000Z","top_img":null,"copyright":null,"_content":"\n有些时候需要多台机器去测试脚本，利用传统的虚拟机技术，不仅开销大，而且一台物理机虚拟出的机器是有限的。采用Docker技术不仅开销小，而且虚拟出的主机比利用虚拟机虚拟的更多。\n\n今天通过两种为容器添加SSH服务并保存为镜像的方式。\n\n### docker commit\n\n```commit```命令，支持用户提交自己对容器的修改，从而生成一个新的镜像。\n\n#### 1、启动基础镜像\n\n``` shell\n[root@izt4nh30l604g7q40vzsglz /]# docker run -it centos:7\n```\n\n> -i   以交互模式运行容器，通常与 -t 同时使用；\n>\n> -t  为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n#### 2、容器中安装openssh-server net-tools\n\n```shell\n[root@462b591af4a6 /]# yum install -y openssh-server net-tools\n```\n\n#### 3、修改root用户密码\n\n```shell\n[root@462b591af4a6 /]# echo '123123456' | passwd --stdin root\n```\n\n#### 4、生成密钥\n\n```\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key\n```\n\n#### 7、编写启动脚本\n\n```shell\n[root@462b591af4a6 /]# vi /run.sh\n[root@462b591af4a6 /]# chmod +x /run.sh \n```\n\n其中 run.sh的内容为\n\n```shell\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n#### 8、退出容器，保存镜像\n\n```shell\n[root@462b591af4a6 /]# exit\n[root@462b591af4a6 /]# docker ps -al \nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n46d6949f23b3        centos              \"/bin/bash\"         11 minutes ago      Exited (0) 47 seconds ago                       practical_kilby\n\n[root@462b591af4a6 /]#docker commit -m 'openssh-server'  46d6949f23b3  sshd:centos7\nsha256:fa665548b8186c9b656a145ff9beaae1847d183dd405eba25888066e85ca10fc\n```\n\n#### 9、启动容器\n\n```shell\n[root@izt4nh30l604g7q40vzsglz ~]#  docker run -d --name ssh -p 10022:22 sshd:centos /run.sh\n334c4330a56bfe5d9e87c35747ef604da60c5aa84fdae427ca30bbdab2592d37\n[root@izt4nh30l604g7q40vzsglz ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES\n334c4330a56b        sshd:centos7         \"/run.sh\"           55 seconds ago      Up 54 seconds       0.0.0.0:10022->22/tcp   ssh\n```\n\n#### 10、远程连接测试\n\n```shell\n[root@izt4nh30l604g7q40vzsglz ~]# ssh root@192.168.0.3 -p 10022\nThe authenticity of host '[192.168.0.3]:10022 ([192.168.0.3]:10022)' can't be established.\nRSA key fingerprint is e1:95:09:40:48:8e:13:94:ca:73:15:e7:7b:37:2d:6c.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[192.168.0.3]:10022' (RSA) to the list of known hosts.\nroot@192.168.0.3's password: \n[root@334c4330a56b ~]# logout\nConnection to 192.168.0.3 closed.\n```\n\n\n\n### Dockerfile\n\n使用`docker commit` 手动构建一个新的镜像，虽然步骤清晰，但是镜像分发起来比较不方便。Dockerfile 就是最优替代方案。\n\n#### 1、创建Dockerfile文件。\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# cat Dockerfile \nFROM centos:7\nMAINTAINER 972479352@qq.com\nENV ROOTPASSWORD  123456\nRUN yum install -y openssh-server net-tools\\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key \\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key \\\n    && echo $ROOTPASSWORD | passwd --stdin root \nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n#### 2、构建镜像文件\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# docker build -t sshd:dockerfile .\n[root@izt4nh30l604g7q40vzsglz home]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nsshd                dockerfile          c619f06bde24        3 minutes ago       313MB\nsshd                centos7             2f4be89a1626        5 hours ago         313MB\ncentos              7                   5e35e350aded        3 months ago        203MB\nmysql               5.7.17              9546ca122d3a        2 years ago         407MB\n[root@izt4nh30l604g7q40vzsglz home]# \n```\n\n#### 3、启动容器\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# docker run  -d  -e ROOTPASSWORD='09876543' -p 10023:22 sshd:dockerfile\n```\n\n> -e 为环境变量赋值\n>\n> -d 后台运行容器，并返回容器ID；\n>\n> -p 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n\n\n#### Dockerfile遇到的问题\n\n【Q1】没有解决在启动容器时通过环境变量赋值的方式，动态设置root密码\n\n\n\n","source":"_posts/Docker实战-基于centos7镜像创建ssh容器.md","raw":"---\ntitle: 'Docker实战:基于centos7镜像创建ssh容器'\ntags:\n  - Docker\ncategories: Docker\nkeywords: Docker Dockerfile创建ssh容器\ndescription: Dockerfile创建ssh容器\ncover: 'https://tva1.sinaimg.cn/large/9fc55f55ly1gcet3611zgj209c07zt96.jpg'\nabbrlink: 77f24681\ndate: 2020-03-01 20:51:12\ntop_img:\ncopyright:\n---\n\n有些时候需要多台机器去测试脚本，利用传统的虚拟机技术，不仅开销大，而且一台物理机虚拟出的机器是有限的。采用Docker技术不仅开销小，而且虚拟出的主机比利用虚拟机虚拟的更多。\n\n今天通过两种为容器添加SSH服务并保存为镜像的方式。\n\n### docker commit\n\n```commit```命令，支持用户提交自己对容器的修改，从而生成一个新的镜像。\n\n#### 1、启动基础镜像\n\n``` shell\n[root@izt4nh30l604g7q40vzsglz /]# docker run -it centos:7\n```\n\n> -i   以交互模式运行容器，通常与 -t 同时使用；\n>\n> -t  为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n#### 2、容器中安装openssh-server net-tools\n\n```shell\n[root@462b591af4a6 /]# yum install -y openssh-server net-tools\n```\n\n#### 3、修改root用户密码\n\n```shell\n[root@462b591af4a6 /]# echo '123123456' | passwd --stdin root\n```\n\n#### 4、生成密钥\n\n```\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key\n[root@462b591af4a6 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key\n```\n\n#### 7、编写启动脚本\n\n```shell\n[root@462b591af4a6 /]# vi /run.sh\n[root@462b591af4a6 /]# chmod +x /run.sh \n```\n\n其中 run.sh的内容为\n\n```shell\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n#### 8、退出容器，保存镜像\n\n```shell\n[root@462b591af4a6 /]# exit\n[root@462b591af4a6 /]# docker ps -al \nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n46d6949f23b3        centos              \"/bin/bash\"         11 minutes ago      Exited (0) 47 seconds ago                       practical_kilby\n\n[root@462b591af4a6 /]#docker commit -m 'openssh-server'  46d6949f23b3  sshd:centos7\nsha256:fa665548b8186c9b656a145ff9beaae1847d183dd405eba25888066e85ca10fc\n```\n\n#### 9、启动容器\n\n```shell\n[root@izt4nh30l604g7q40vzsglz ~]#  docker run -d --name ssh -p 10022:22 sshd:centos /run.sh\n334c4330a56bfe5d9e87c35747ef604da60c5aa84fdae427ca30bbdab2592d37\n[root@izt4nh30l604g7q40vzsglz ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES\n334c4330a56b        sshd:centos7         \"/run.sh\"           55 seconds ago      Up 54 seconds       0.0.0.0:10022->22/tcp   ssh\n```\n\n#### 10、远程连接测试\n\n```shell\n[root@izt4nh30l604g7q40vzsglz ~]# ssh root@192.168.0.3 -p 10022\nThe authenticity of host '[192.168.0.3]:10022 ([192.168.0.3]:10022)' can't be established.\nRSA key fingerprint is e1:95:09:40:48:8e:13:94:ca:73:15:e7:7b:37:2d:6c.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[192.168.0.3]:10022' (RSA) to the list of known hosts.\nroot@192.168.0.3's password: \n[root@334c4330a56b ~]# logout\nConnection to 192.168.0.3 closed.\n```\n\n\n\n### Dockerfile\n\n使用`docker commit` 手动构建一个新的镜像，虽然步骤清晰，但是镜像分发起来比较不方便。Dockerfile 就是最优替代方案。\n\n#### 1、创建Dockerfile文件。\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# cat Dockerfile \nFROM centos:7\nMAINTAINER 972479352@qq.com\nENV ROOTPASSWORD  123456\nRUN yum install -y openssh-server net-tools\\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key \\\n    && ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key \\\n    && echo $ROOTPASSWORD | passwd --stdin root \nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n#### 2、构建镜像文件\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# docker build -t sshd:dockerfile .\n[root@izt4nh30l604g7q40vzsglz home]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nsshd                dockerfile          c619f06bde24        3 minutes ago       313MB\nsshd                centos7             2f4be89a1626        5 hours ago         313MB\ncentos              7                   5e35e350aded        3 months ago        203MB\nmysql               5.7.17              9546ca122d3a        2 years ago         407MB\n[root@izt4nh30l604g7q40vzsglz home]# \n```\n\n#### 3、启动容器\n\n```shell\n[root@izt4nh30l604g7q40vzsglz home]# docker run  -d  -e ROOTPASSWORD='09876543' -p 10023:22 sshd:dockerfile\n```\n\n> -e 为环境变量赋值\n>\n> -d 后台运行容器，并返回容器ID；\n>\n> -p 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n\n\n#### Dockerfile遇到的问题\n\n【Q1】没有解决在启动容器时通过环境变量赋值的方式，动态设置root密码\n\n\n\n","slug":"Docker实战-基于centos7镜像创建ssh容器","published":1,"updated":"2020-03-02T02:03:08.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mto0001tvm0conj0mww","content":"<p>有些时候需要多台机器去测试脚本，利用传统的虚拟机技术，不仅开销大，而且一台物理机虚拟出的机器是有限的。采用Docker技术不仅开销小，而且虚拟出的主机比利用虚拟机虚拟的更多。</p>\n<p>今天通过两种为容器添加SSH服务并保存为镜像的方式。</p>\n<h3 id=\"docker-commit\"><a href=\"#docker-commit\" class=\"headerlink\" title=\"docker commit\"></a>docker commit</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 1、启动基础镜像</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; shell</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz &#x2F;]# docker run -it centos:7</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>-i   以交互模式运行容器，通常与 -t 同时使用；</p>\n<p>-t  为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>\n</blockquote>\n<h4 id=\"2、容器中安装openssh-server-net-tools\"><a href=\"#2、容器中安装openssh-server-net-tools\" class=\"headerlink\" title=\"2、容器中安装openssh-server net-tools\"></a>2、容器中安装openssh-server net-tools</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# yum install -y openssh-server net-tools</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3、修改root用户密码\"><a href=\"#3、修改root用户密码\" class=\"headerlink\" title=\"3、修改root用户密码\"></a>3、修改root用户密码</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# echo '123123456' | passwd --stdin root</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4、生成密钥\"><a href=\"#4、生成密钥\" class=\"headerlink\" title=\"4、生成密钥\"></a>4、生成密钥</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"7、编写启动脚本\"><a href=\"#7、编写启动脚本\" class=\"headerlink\" title=\"7、编写启动脚本\"></a>7、编写启动脚本</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# vi /run.sh</span><br><span class=\"line\">[root@462b591af4a6 /]# chmod +x /run.sh</span><br></pre></td></tr></table></figure></div>\n\n<p>其中 run.sh的内容为</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/usr/sbin/sshd -D</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"8、退出容器，保存镜像\"><a href=\"#8、退出容器，保存镜像\" class=\"headerlink\" title=\"8、退出容器，保存镜像\"></a>8、退出容器，保存镜像</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# exit</span><br><span class=\"line\">[root@462b591af4a6 /]# docker ps -al </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">46d6949f23b3        centos              \"/bin/bash\"         11 minutes ago      Exited (0) 47 seconds ago                       practical_kilby</span><br><span class=\"line\"></span><br><span class=\"line\">[root@462b591af4a6 /]#docker commit -m 'openssh-server'  46d6949f23b3  sshd:centos7</span><br><span class=\"line\">sha256:fa665548b8186c9b656a145ff9beaae1847d183dd405eba25888066e85ca10fc</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"9、启动容器\"><a href=\"#9、启动容器\" class=\"headerlink\" title=\"9、启动容器\"></a>9、启动容器</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]#  docker run -d --name ssh -p 10022:22 sshd:centos /run.sh</span><br><span class=\"line\">334c4330a56bfe5d9e87c35747ef604da60c5aa84fdae427ca30bbdab2592d37</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES</span><br><span class=\"line\">334c4330a56b        sshd:centos7         \"/run.sh\"           55 seconds ago      Up 54 seconds       0.0.0.0:10022-&gt;22/tcp   ssh</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"10、远程连接测试\"><a href=\"#10、远程连接测试\" class=\"headerlink\" title=\"10、远程连接测试\"></a>10、远程连接测试</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]# ssh root@192.168.0.3 -p 10022</span><br><span class=\"line\">The authenticity of host '[192.168.0.3]:10022 ([192.168.0.3]:10022)' can't be established.</span><br><span class=\"line\">RSA key fingerprint is e1:95:09:40:48:8e:13:94:ca:73:15:e7:7b:37:2d:6c.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added '[192.168.0.3]:10022' (RSA) to the list of known hosts.</span><br><span class=\"line\">root@192.168.0.3's password: </span><br><span class=\"line\">[root@334c4330a56b ~]# logout</span><br><span class=\"line\">Connection to 192.168.0.3 closed.</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>使用<code>docker commit</code> 手动构建一个新的镜像，虽然步骤清晰，但是镜像分发起来比较不方便。Dockerfile 就是最优替代方案。</p>\n<h4 id=\"1、创建Dockerfile文件。\"><a href=\"#1、创建Dockerfile文件。\" class=\"headerlink\" title=\"1、创建Dockerfile文件。\"></a>1、创建Dockerfile文件。</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# cat Dockerfile </span><br><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER 972479352@qq.com</span><br><span class=\"line\">ENV ROOTPASSWORD  123456</span><br><span class=\"line\">RUN yum install -y openssh-server net-tools\\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key \\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key \\</span><br><span class=\"line\">    &amp;&amp; echo $ROOTPASSWORD | passwd --stdin root </span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [\"/usr/sbin/sshd\",\"-D\"]</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2、构建镜像文件\"><a href=\"#2、构建镜像文件\" class=\"headerlink\" title=\"2、构建镜像文件\"></a>2、构建镜像文件</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker build -t sshd:dockerfile .</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">sshd                dockerfile          c619f06bde24        3 minutes ago       313MB</span><br><span class=\"line\">sshd                centos7             2f4be89a1626        5 hours ago         313MB</span><br><span class=\"line\">centos              7                   5e35e350aded        3 months ago        203MB</span><br><span class=\"line\">mysql               5.7.17              9546ca122d3a        2 years ago         407MB</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]#</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3、启动容器\"><a href=\"#3、启动容器\" class=\"headerlink\" title=\"3、启动容器\"></a>3、启动容器</h4><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker run  -d  -e ROOTPASSWORD='09876543' -p 10023:22 sshd:dockerfile</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>-e 为环境变量赋值</p>\n<p>-d 后台运行容器，并返回容器ID；</p>\n<p>-p 指定端口映射，格式为：主机(宿主)端口:容器端口</p>\n</blockquote>\n<h4 id=\"Dockerfile遇到的问题\"><a href=\"#Dockerfile遇到的问题\" class=\"headerlink\" title=\"Dockerfile遇到的问题\"></a>Dockerfile遇到的问题</h4><p>【Q1】没有解决在启动容器时通过环境变量赋值的方式，动态设置root密码</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>有些时候需要多台机器去测试脚本，利用传统的虚拟机技术，不仅开销大，而且一台物理机虚拟出的机器是有限的。采用Docker技术不仅开销小，而且虚拟出的主机比利用虚拟机虚拟的更多。</p>\n<p>今天通过两种为容器添加SSH服务并保存为镜像的方式。</p>\n<h3 id=\"docker-commit\"><a href=\"#docker-commit\" class=\"headerlink\" title=\"docker commit\"></a>docker commit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 1、启动基础镜像</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; shell</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz &#x2F;]# docker run -it centos:7</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-i   以交互模式运行容器，通常与 -t 同时使用；</p>\n<p>-t  为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>\n</blockquote>\n<h4 id=\"2、容器中安装openssh-server-net-tools\"><a href=\"#2、容器中安装openssh-server-net-tools\" class=\"headerlink\" title=\"2、容器中安装openssh-server net-tools\"></a>2、容器中安装openssh-server net-tools</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# yum install -y openssh-server net-tools</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、修改root用户密码\"><a href=\"#3、修改root用户密码\" class=\"headerlink\" title=\"3、修改root用户密码\"></a>3、修改root用户密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# echo '123123456' | passwd --stdin root</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、生成密钥\"><a href=\"#4、生成密钥\" class=\"headerlink\" title=\"4、生成密钥\"></a>4、生成密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class=\"line\">[root@462b591af4a6 &#x2F;]# ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7、编写启动脚本\"><a href=\"#7、编写启动脚本\" class=\"headerlink\" title=\"7、编写启动脚本\"></a>7、编写启动脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# vi /run.sh</span><br><span class=\"line\">[root@462b591af4a6 /]# chmod +x /run.sh</span><br></pre></td></tr></table></figure>\n\n<p>其中 run.sh的内容为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8、退出容器，保存镜像\"><a href=\"#8、退出容器，保存镜像\" class=\"headerlink\" title=\"8、退出容器，保存镜像\"></a>8、退出容器，保存镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@462b591af4a6 /]# exit</span><br><span class=\"line\">[root@462b591af4a6 /]# docker ps -al </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">46d6949f23b3        centos              \"/bin/bash\"         11 minutes ago      Exited (0) 47 seconds ago                       practical_kilby</span><br><span class=\"line\"></span><br><span class=\"line\">[root@462b591af4a6 /]#docker commit -m 'openssh-server'  46d6949f23b3  sshd:centos7</span><br><span class=\"line\">sha256:fa665548b8186c9b656a145ff9beaae1847d183dd405eba25888066e85ca10fc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9、启动容器\"><a href=\"#9、启动容器\" class=\"headerlink\" title=\"9、启动容器\"></a>9、启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]#  docker run -d --name ssh -p 10022:22 sshd:centos /run.sh</span><br><span class=\"line\">334c4330a56bfe5d9e87c35747ef604da60c5aa84fdae427ca30bbdab2592d37</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES</span><br><span class=\"line\">334c4330a56b        sshd:centos7         \"/run.sh\"           55 seconds ago      Up 54 seconds       0.0.0.0:10022-&gt;22/tcp   ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10、远程连接测试\"><a href=\"#10、远程连接测试\" class=\"headerlink\" title=\"10、远程连接测试\"></a>10、远程连接测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz ~]# ssh root@192.168.0.3 -p 10022</span><br><span class=\"line\">The authenticity of host '[192.168.0.3]:10022 ([192.168.0.3]:10022)' can't be established.</span><br><span class=\"line\">RSA key fingerprint is e1:95:09:40:48:8e:13:94:ca:73:15:e7:7b:37:2d:6c.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added '[192.168.0.3]:10022' (RSA) to the list of known hosts.</span><br><span class=\"line\">root@192.168.0.3's password: </span><br><span class=\"line\">[root@334c4330a56b ~]# logout</span><br><span class=\"line\">Connection to 192.168.0.3 closed.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>使用<code>docker commit</code> 手动构建一个新的镜像，虽然步骤清晰，但是镜像分发起来比较不方便。Dockerfile 就是最优替代方案。</p>\n<h4 id=\"1、创建Dockerfile文件。\"><a href=\"#1、创建Dockerfile文件。\" class=\"headerlink\" title=\"1、创建Dockerfile文件。\"></a>1、创建Dockerfile文件。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# cat Dockerfile </span><br><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER 972479352@qq.com</span><br><span class=\"line\">ENV ROOTPASSWORD  123456</span><br><span class=\"line\">RUN yum install -y openssh-server net-tools\\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key \\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key \\</span><br><span class=\"line\">    &amp;&amp; ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key \\</span><br><span class=\"line\">    &amp;&amp; echo $ROOTPASSWORD | passwd --stdin root </span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [\"/usr/sbin/sshd\",\"-D\"]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、构建镜像文件\"><a href=\"#2、构建镜像文件\" class=\"headerlink\" title=\"2、构建镜像文件\"></a>2、构建镜像文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker build -t sshd:dockerfile .</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">sshd                dockerfile          c619f06bde24        3 minutes ago       313MB</span><br><span class=\"line\">sshd                centos7             2f4be89a1626        5 hours ago         313MB</span><br><span class=\"line\">centos              7                   5e35e350aded        3 months ago        203MB</span><br><span class=\"line\">mysql               5.7.17              9546ca122d3a        2 years ago         407MB</span><br><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]#</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、启动容器\"><a href=\"#3、启动容器\" class=\"headerlink\" title=\"3、启动容器\"></a>3、启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izt4nh30l604g7q40vzsglz home]# docker run  -d  -e ROOTPASSWORD='09876543' -p 10023:22 sshd:dockerfile</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-e 为环境变量赋值</p>\n<p>-d 后台运行容器，并返回容器ID；</p>\n<p>-p 指定端口映射，格式为：主机(宿主)端口:容器端口</p>\n</blockquote>\n<h4 id=\"Dockerfile遇到的问题\"><a href=\"#Dockerfile遇到的问题\" class=\"headerlink\" title=\"Dockerfile遇到的问题\"></a>Dockerfile遇到的问题</h4><p>【Q1】没有解决在启动容器时通过环境变量赋值的方式，动态设置root密码</p>\n"},{"title":"MySQL INNER JOIN：内连接查询","keywords":"MySQL INNER JOIN","description":"MySQL INNER JOIN内连接查询","cover":"https://tvax2.sinaimg.cn/large/9fc55f55gy1gd9qhtbvf1j20sf0g27wh.jpg","abbrlink":"6ecc6510","date":"2020-03-28T07:53:54.000Z","top_img":null,"copyright":null,"_content":"\n内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。\n\n在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。\n\n语法格式如下:\n\n```mysql\nSELECT <列名1，列名2 …>\nFROM <表名1> INNER JOIN <表名2> [ ON子句]\n```\n\n语法说明如下。 \n\n-  `<列名1，列名2…>`：需要检索的列名。\n-  `<表名1><表名2>`：进行内连接的两张表的表名\n\n内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。\n\n 创建两个张表tcount_tbl和runoob_tbl。如下：\n\n【实例1】创建两张tcount_tbl和runoob_tbl表，并插入测试数据。\n\n```mysql\nmysql> create table tcount_tb1(\n    -> runoob_author varchar(50),\n    -> runoob_count int(10)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> insert into tcount_tb1 values('菜鸟教程',10),('RUNOOB.COM',20),('Google',10)\n\nmysql> create table runoob_tbl(\n    -> runoob_id int(10),\n    -> runoob_title varchar(50),\n    -> runoob_author varchar(50),\n    -> submission_date varchar(50)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> insert into runoob_tbl values(1,'学习 PHP','菜鸟教程','2017-04-12'),\n(2,'学习 MYSQL','菜鸟教程','2017-04-12'),\n(3,'学习 JAVA','RUNOOB.COM','2017-04-12'),\n(4,'学习 PYTHON','RUNOOB.COM','2017-04-12')\n```\n\n【实例2】使用MySQL的**INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)**来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：\n\n```mysql\nmysql> select a.runoob_id, a.runoob_title,b.runoob_count\n    -> from runoob_tbl as a inner join tcount_tb1 as b\n    -> on a.runoob_author = b.runoob_author;\n+-----------+--------------+--------------+\n| runoob_id | runoob_title | runoob_count |\n+-----------+--------------+--------------+\n|         1 | 学习 PHP     |           10 |\n|         2 | 学习 MYSQL   |           10 |\n|         3 | 学习 JAVA    |           20 |\n|         4 | 学习 PYTHON  |           20 |\n+-----------+--------------+--------------+\n```\n\n以上 SQL 语句等价于：\n\n```mysql\nmysql> select a.runoob_id,a.runoob_title,b.runoob_count\n    -> from runoob_tbl as a, tcount_tb1 as b\n    -> where a.runoob_author = b.runoob_author;\n+-----------+--------------+--------------+\n| runoob_id | runoob_title | runoob_count |\n+-----------+--------------+--------------+\n|         1 | 学习 PHP     |           10 |\n|         2 | 学习 MYSQL   |           10 |\n|         3 | 学习 JAVA    |           20 |\n|         4 | 学习 PYTHON  |           20 |\n+-----------+--------------+--------------+\n4 rows in set\n\n```\n\n![](https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif)\n\n","source":"_posts/MySQL-INNER-JOIN：内连接查询.md","raw":"---\ntitle: MySQL INNER JOIN：内连接查询\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: MySQL INNER JOIN\ndescription: MySQL INNER JOIN内连接查询\ncover: 'https://tvax2.sinaimg.cn/large/9fc55f55gy1gd9qhtbvf1j20sf0g27wh.jpg'\nabbrlink: 6ecc6510\ndate: 2020-03-28 15:53:54\ntop_img:\ncopyright:\n---\n\n内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。\n\n在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。\n\n语法格式如下:\n\n```mysql\nSELECT <列名1，列名2 …>\nFROM <表名1> INNER JOIN <表名2> [ ON子句]\n```\n\n语法说明如下。 \n\n-  `<列名1，列名2…>`：需要检索的列名。\n-  `<表名1><表名2>`：进行内连接的两张表的表名\n\n内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。\n\n 创建两个张表tcount_tbl和runoob_tbl。如下：\n\n【实例1】创建两张tcount_tbl和runoob_tbl表，并插入测试数据。\n\n```mysql\nmysql> create table tcount_tb1(\n    -> runoob_author varchar(50),\n    -> runoob_count int(10)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> insert into tcount_tb1 values('菜鸟教程',10),('RUNOOB.COM',20),('Google',10)\n\nmysql> create table runoob_tbl(\n    -> runoob_id int(10),\n    -> runoob_title varchar(50),\n    -> runoob_author varchar(50),\n    -> submission_date varchar(50)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> insert into runoob_tbl values(1,'学习 PHP','菜鸟教程','2017-04-12'),\n(2,'学习 MYSQL','菜鸟教程','2017-04-12'),\n(3,'学习 JAVA','RUNOOB.COM','2017-04-12'),\n(4,'学习 PYTHON','RUNOOB.COM','2017-04-12')\n```\n\n【实例2】使用MySQL的**INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)**来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：\n\n```mysql\nmysql> select a.runoob_id, a.runoob_title,b.runoob_count\n    -> from runoob_tbl as a inner join tcount_tb1 as b\n    -> on a.runoob_author = b.runoob_author;\n+-----------+--------------+--------------+\n| runoob_id | runoob_title | runoob_count |\n+-----------+--------------+--------------+\n|         1 | 学习 PHP     |           10 |\n|         2 | 学习 MYSQL   |           10 |\n|         3 | 学习 JAVA    |           20 |\n|         4 | 学习 PYTHON  |           20 |\n+-----------+--------------+--------------+\n```\n\n以上 SQL 语句等价于：\n\n```mysql\nmysql> select a.runoob_id,a.runoob_title,b.runoob_count\n    -> from runoob_tbl as a, tcount_tb1 as b\n    -> where a.runoob_author = b.runoob_author;\n+-----------+--------------+--------------+\n| runoob_id | runoob_title | runoob_count |\n+-----------+--------------+--------------+\n|         1 | 学习 PHP     |           10 |\n|         2 | 学习 MYSQL   |           10 |\n|         3 | 学习 JAVA    |           20 |\n|         4 | 学习 PYTHON  |           20 |\n+-----------+--------------+--------------+\n4 rows in set\n\n```\n\n![](https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif)\n\n","slug":"MySQL-INNER-JOIN：内连接查询","published":1,"updated":"2020-03-31T07:21:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mtr0002tvm0b5ijghsn","content":"<p>内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p>\n<p>在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。</p>\n<p>语法格式如下:</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt;列名1，列名2 …&gt;</span><br><span class=\"line\">FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</span><br></pre></td></tr></table></figure></div>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;列名1，列名2…&gt;</code>：需要检索的列名。</li>\n<li><code>&lt;表名1&gt;&lt;表名2&gt;</code>：进行内连接的两张表的表名</li>\n</ul>\n<p>内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。</p>\n<p> 创建两个张表tcount_tbl和runoob_tbl。如下：</p>\n<p>【实例1】创建两张tcount_tbl和runoob_tbl表，并插入测试数据。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tcount_tb1(</span><br><span class=\"line\">    -&gt; runoob_author varchar(50),</span><br><span class=\"line\">    -&gt; runoob_count int(10)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tcount_tb1 values(&#39;菜鸟教程&#39;,10),(&#39;RUNOOB.COM&#39;,20),(&#39;Google&#39;,10)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create table runoob_tbl(</span><br><span class=\"line\">    -&gt; runoob_id int(10),</span><br><span class=\"line\">    -&gt; runoob_title varchar(50),</span><br><span class=\"line\">    -&gt; runoob_author varchar(50),</span><br><span class=\"line\">    -&gt; submission_date varchar(50)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into runoob_tbl values(1,&#39;学习 PHP&#39;,&#39;菜鸟教程&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(2,&#39;学习 MYSQL&#39;,&#39;菜鸟教程&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(3,&#39;学习 JAVA&#39;,&#39;RUNOOB.COM&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(4,&#39;学习 PYTHON&#39;,&#39;RUNOOB.COM&#39;,&#39;2017-04-12&#39;)</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】使用MySQL的<strong>INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)</strong>来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select a.runoob_id, a.runoob_title,b.runoob_count</span><br><span class=\"line\">    -&gt; from runoob_tbl as a inner join tcount_tb1 as b</span><br><span class=\"line\">    -&gt; on a.runoob_author &#x3D; b.runoob_author;</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_count |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">|         1 | 学习 PHP     |           10 |</span><br><span class=\"line\">|         2 | 学习 MYSQL   |           10 |</span><br><span class=\"line\">|         3 | 学习 JAVA    |           20 |</span><br><span class=\"line\">|         4 | 学习 PYTHON  |           20 |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br></pre></td></tr></table></figure></div>\n\n<p>以上 SQL 语句等价于：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select a.runoob_id,a.runoob_title,b.runoob_count</span><br><span class=\"line\">    -&gt; from runoob_tbl as a, tcount_tb1 as b</span><br><span class=\"line\">    -&gt; where a.runoob_author &#x3D; b.runoob_author;</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_count |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">|         1 | 学习 PHP     |           10 |</span><br><span class=\"line\">|         2 | 学习 MYSQL   |           10 |</span><br><span class=\"line\">|         3 | 学习 JAVA    |           20 |</span><br><span class=\"line\">|         4 | 学习 PYTHON  |           20 |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif\" data-fancybox=\"group\" data-caption class=\"fancybox\"><img alt title data-src=\"https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif\" class=\"lazyload\"></a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p>\n<p>在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。</p>\n<p>语法格式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt;列名1，列名2 …&gt;</span><br><span class=\"line\">FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</span><br></pre></td></tr></table></figure>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;列名1，列名2…&gt;</code>：需要检索的列名。</li>\n<li><code>&lt;表名1&gt;&lt;表名2&gt;</code>：进行内连接的两张表的表名</li>\n</ul>\n<p>内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。</p>\n<p> 创建两个张表tcount_tbl和runoob_tbl。如下：</p>\n<p>【实例1】创建两张tcount_tbl和runoob_tbl表，并插入测试数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tcount_tb1(</span><br><span class=\"line\">    -&gt; runoob_author varchar(50),</span><br><span class=\"line\">    -&gt; runoob_count int(10)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tcount_tb1 values(&#39;菜鸟教程&#39;,10),(&#39;RUNOOB.COM&#39;,20),(&#39;Google&#39;,10)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create table runoob_tbl(</span><br><span class=\"line\">    -&gt; runoob_id int(10),</span><br><span class=\"line\">    -&gt; runoob_title varchar(50),</span><br><span class=\"line\">    -&gt; runoob_author varchar(50),</span><br><span class=\"line\">    -&gt; submission_date varchar(50)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into runoob_tbl values(1,&#39;学习 PHP&#39;,&#39;菜鸟教程&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(2,&#39;学习 MYSQL&#39;,&#39;菜鸟教程&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(3,&#39;学习 JAVA&#39;,&#39;RUNOOB.COM&#39;,&#39;2017-04-12&#39;),</span><br><span class=\"line\">(4,&#39;学习 PYTHON&#39;,&#39;RUNOOB.COM&#39;,&#39;2017-04-12&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】使用MySQL的<strong>INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)</strong>来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select a.runoob_id, a.runoob_title,b.runoob_count</span><br><span class=\"line\">    -&gt; from runoob_tbl as a inner join tcount_tb1 as b</span><br><span class=\"line\">    -&gt; on a.runoob_author &#x3D; b.runoob_author;</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_count |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">|         1 | 学习 PHP     |           10 |</span><br><span class=\"line\">|         2 | 学习 MYSQL   |           10 |</span><br><span class=\"line\">|         3 | 学习 JAVA    |           20 |</span><br><span class=\"line\">|         4 | 学习 PYTHON  |           20 |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br></pre></td></tr></table></figure>\n\n<p>以上 SQL 语句等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select a.runoob_id,a.runoob_title,b.runoob_count</span><br><span class=\"line\">    -&gt; from runoob_tbl as a, tcount_tb1 as b</span><br><span class=\"line\">    -&gt; where a.runoob_author &#x3D; b.runoob_author;</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_count |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">|         1 | 学习 PHP     |           10 |</span><br><span class=\"line\">|         2 | 学习 MYSQL   |           10 |</span><br><span class=\"line\">|         3 | 学习 JAVA    |           20 |</span><br><span class=\"line\">|         4 | 学习 PYTHON  |           20 |</span><br><span class=\"line\">+-----------+--------------+--------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif\" alt=\"\"></p>\n"},{"title":"MySQL LEFT/RIGHT JOIN:外连接查询","keywords":"left join、right join  外连接查询","description":"left join、right join  外连接查询","abbrlink":"2d2af903","date":"2020-03-30T03:52:51.000Z","cover":"https://tvax4.sinaimg.cn/large/9fc55f55gy1gdd636rs0kj20sf0iye5i.jpg","top_img":null,"copyright":null,"_content":"\nMySQL中[内连接](https://huafeng28.gitee.io/blog/post/6ecc6510.html)是在交叉连接的结果上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。\n\n外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。\n\n左外连接又称为左连接，在 `FROM` 子句中使用关键字` LEFT OUTER JOIN` 或者 `LEFT JOIN`，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。\n\n【实例1】先在数据`test`中创建两个表` tb_students_info`和`tb_departments`,并插入测试数据。输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> create table tb_departments(\n    -> dept_id int(11) not null primary key auto_increment,\n    -> dept_name varchar(100)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> create table tb_students_info(\n    -> id int(11) not null primary key auto_increment,\n    -> name varchar(100),\n    -> sex varchar(10),\n    -> dept_id int(11),\n    -> foreign key(dept_id) references tb_departments(dept_id)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> insert into tb_departments (dept_name) values ('Computer'),('Chinese'),('Math'),('Economy'),('History');\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> insert into tb_students_info (name,sex,dept_id) values\n    -> ('Dany','male',1),('Jane','male',2),\n    -> ('Jim','male',4),('Henry','female',3),\n    -> ('John','female',3),('Susan','female',Null);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n```\n\n【实例2】在` tb_students_info` 表和 `tb_departments` 表中查询所有学生，包括没有学院的学生，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name,dept_name \n    -> from tb_students_info as s\n    -> left outer join tb_departments as d\n    -> on s.dept_id = d.dept_id;\n+-------+-----------+\n| name  | dept_name |\n+-------+-----------+\n| Dany  | Computer  |\n| Jane  | Chinese   |\n| Jim   | Economy   |\n| Henry | Math      |\n| John  | Math      |\n| Susan | NULL      |\n+-------+-----------+\n6 rows in set\n```\n\n结果显示了 6 条记录，name 为 Susan的学生目前没有学院，因为对应的 tb_departments \n表中并没有该学生的学院信息，所以该条记录只取出了 tb_students_info 表中相应的值，而从 tb_departments \n表中取出的值为 NULL。\n\n\n\n右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为NULL。\n\n【实例3】在 tb_students_info 表和 tb_departments 表中查询所有学院，包括没有学生的学院，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name,dept_name \n    -> from tb_students_info s\n    -> right outer join tb_departments d\n    -> on s.dept_id = d.dept_id;\n+-------+-----------+\n| name  | dept_name |\n+-------+-----------+\n| Dany  | Computer  |\n| Jane  | Chinese   |\n| Henry | Math      |\n| John  | Math      |\n| Jim   | Economy   |\n| NULL  | History   |\n+-------+-----------+\n6 rows in set\n\n```\n\n可以看到，结果只显示了6 条记录，名称为 History 的学院目前没有学生，对应的 tb_students_info 表中并没有该学院的信息，所以该条记录只取出了 tb_departments 表中相应的值，而从 tb_students_info 表中取出的值为NULL。\n\n\n\n","source":"_posts/MySQL-LEFT-RIGHT-JOIN-外连接查询.md","raw":"---\ntitle: 'MySQL LEFT/RIGHT JOIN:外连接查询'\ntags:\n  - MySQL\ncategories: Mysql\nkeywords: left join、right join  外连接查询\ndescription: left join、right join  外连接查询\nabbrlink: 2d2af903\ndate: 2020-03-30 11:52:51\ncover: https://tvax4.sinaimg.cn/large/9fc55f55gy1gdd636rs0kj20sf0iye5i.jpg\ntop_img:\ncopyright:\n---\n\nMySQL中[内连接](https://huafeng28.gitee.io/blog/post/6ecc6510.html)是在交叉连接的结果上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。\n\n外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。\n\n左外连接又称为左连接，在 `FROM` 子句中使用关键字` LEFT OUTER JOIN` 或者 `LEFT JOIN`，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。\n\n【实例1】先在数据`test`中创建两个表` tb_students_info`和`tb_departments`,并插入测试数据。输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> create table tb_departments(\n    -> dept_id int(11) not null primary key auto_increment,\n    -> dept_name varchar(100)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> create table tb_students_info(\n    -> id int(11) not null primary key auto_increment,\n    -> name varchar(100),\n    -> sex varchar(10),\n    -> dept_id int(11),\n    -> foreign key(dept_id) references tb_departments(dept_id)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> insert into tb_departments (dept_name) values ('Computer'),('Chinese'),('Math'),('Economy'),('History');\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> insert into tb_students_info (name,sex,dept_id) values\n    -> ('Dany','male',1),('Jane','male',2),\n    -> ('Jim','male',4),('Henry','female',3),\n    -> ('John','female',3),('Susan','female',Null);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n```\n\n【实例2】在` tb_students_info` 表和 `tb_departments` 表中查询所有学生，包括没有学院的学生，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name,dept_name \n    -> from tb_students_info as s\n    -> left outer join tb_departments as d\n    -> on s.dept_id = d.dept_id;\n+-------+-----------+\n| name  | dept_name |\n+-------+-----------+\n| Dany  | Computer  |\n| Jane  | Chinese   |\n| Jim   | Economy   |\n| Henry | Math      |\n| John  | Math      |\n| Susan | NULL      |\n+-------+-----------+\n6 rows in set\n```\n\n结果显示了 6 条记录，name 为 Susan的学生目前没有学院，因为对应的 tb_departments \n表中并没有该学生的学院信息，所以该条记录只取出了 tb_students_info 表中相应的值，而从 tb_departments \n表中取出的值为 NULL。\n\n\n\n右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为NULL。\n\n【实例3】在 tb_students_info 表和 tb_departments 表中查询所有学院，包括没有学生的学院，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name,dept_name \n    -> from tb_students_info s\n    -> right outer join tb_departments d\n    -> on s.dept_id = d.dept_id;\n+-------+-----------+\n| name  | dept_name |\n+-------+-----------+\n| Dany  | Computer  |\n| Jane  | Chinese   |\n| Henry | Math      |\n| John  | Math      |\n| Jim   | Economy   |\n| NULL  | History   |\n+-------+-----------+\n6 rows in set\n\n```\n\n可以看到，结果只显示了6 条记录，名称为 History 的学院目前没有学生，对应的 tb_students_info 表中并没有该学院的信息，所以该条记录只取出了 tb_departments 表中相应的值，而从 tb_students_info 表中取出的值为NULL。\n\n\n\n","slug":"MySQL-LEFT-RIGHT-JOIN-外连接查询","published":1,"updated":"2020-03-31T08:11:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mtw0005tvm06eo12z56","content":"<p>MySQL中<a href=\"https://huafeng28.gitee.io/blog/post/6ecc6510.html\" target=\"_blank\" rel=\"noopener\">内连接</a>是在交叉连接的结果上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。</p>\n<p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。</p>\n<p>左外连接又称为左连接，在 <code>FROM</code> 子句中使用关键字<code>LEFT OUTER JOIN</code> 或者 <code>LEFT JOIN</code>，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p>\n<p>【实例1】先在数据<code>test</code>中创建两个表<code>tb_students_info</code>和<code>tb_departments</code>,并插入测试数据。输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tb_departments(</span><br><span class=\"line\">    -&gt; dept_id int(11) not null primary key auto_increment,</span><br><span class=\"line\">    -&gt; dept_name varchar(100)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create table tb_students_info(</span><br><span class=\"line\">    -&gt; id int(11) not null primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100),</span><br><span class=\"line\">    -&gt; sex varchar(10),</span><br><span class=\"line\">    -&gt; dept_id int(11),</span><br><span class=\"line\">    -&gt; foreign key(dept_id) references tb_departments(dept_id)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tb_departments (dept_name) values (&#39;Computer&#39;),(&#39;Chinese&#39;),(&#39;Math&#39;),(&#39;Economy&#39;),(&#39;History&#39;);</span><br><span class=\"line\">Query OK, 5 rows affected</span><br><span class=\"line\">Records: 5  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tb_students_info (name,sex,dept_id) values</span><br><span class=\"line\">    -&gt; (&#39;Dany&#39;,&#39;male&#39;,1),(&#39;Jane&#39;,&#39;male&#39;,2),</span><br><span class=\"line\">    -&gt; (&#39;Jim&#39;,&#39;male&#39;,4),(&#39;Henry&#39;,&#39;female&#39;,3),</span><br><span class=\"line\">    -&gt; (&#39;John&#39;,&#39;female&#39;,3),(&#39;Susan&#39;,&#39;female&#39;,Null);</span><br><span class=\"line\">Query OK, 6 rows affected</span><br><span class=\"line\">Records: 6  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】在<code>tb_students_info</code> 表和 <code>tb_departments</code> 表中查询所有学生，包括没有学院的学生，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,dept_name </span><br><span class=\"line\">    -&gt; from tb_students_info as s</span><br><span class=\"line\">    -&gt; left outer join tb_departments as d</span><br><span class=\"line\">    -&gt; on s.dept_id &#x3D; d.dept_id;</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| name  | dept_name |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| Dany  | Computer  |</span><br><span class=\"line\">| Jane  | Chinese   |</span><br><span class=\"line\">| Jim   | Economy   |</span><br><span class=\"line\">| Henry | Math      |</span><br><span class=\"line\">| John  | Math      |</span><br><span class=\"line\">| Susan | NULL      |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">6 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>结果显示了 6 条记录，name 为 Susan的学生目前没有学院，因为对应的 tb_departments<br>表中并没有该学生的学院信息，所以该条记录只取出了 tb_students_info 表中相应的值，而从 tb_departments<br>表中取出的值为 NULL。</p>\n<p>右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为NULL。</p>\n<p>【实例3】在 tb_students_info 表和 tb_departments 表中查询所有学院，包括没有学生的学院，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,dept_name </span><br><span class=\"line\">    -&gt; from tb_students_info s</span><br><span class=\"line\">    -&gt; right outer join tb_departments d</span><br><span class=\"line\">    -&gt; on s.dept_id &#x3D; d.dept_id;</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| name  | dept_name |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| Dany  | Computer  |</span><br><span class=\"line\">| Jane  | Chinese   |</span><br><span class=\"line\">| Henry | Math      |</span><br><span class=\"line\">| John  | Math      |</span><br><span class=\"line\">| Jim   | Economy   |</span><br><span class=\"line\">| NULL  | History   |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">6 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到，结果只显示了6 条记录，名称为 History 的学院目前没有学生，对应的 tb_students_info 表中并没有该学院的信息，所以该条记录只取出了 tb_departments 表中相应的值，而从 tb_students_info 表中取出的值为NULL。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL中<a href=\"https://huafeng28.gitee.io/blog/post/6ecc6510.html\" target=\"_blank\" rel=\"noopener\">内连接</a>是在交叉连接的结果上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。</p>\n<p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。</p>\n<p>左外连接又称为左连接，在 <code>FROM</code> 子句中使用关键字<code>LEFT OUTER JOIN</code> 或者 <code>LEFT JOIN</code>，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p>\n<p>【实例1】先在数据<code>test</code>中创建两个表<code>tb_students_info</code>和<code>tb_departments</code>,并插入测试数据。输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tb_departments(</span><br><span class=\"line\">    -&gt; dept_id int(11) not null primary key auto_increment,</span><br><span class=\"line\">    -&gt; dept_name varchar(100)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create table tb_students_info(</span><br><span class=\"line\">    -&gt; id int(11) not null primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100),</span><br><span class=\"line\">    -&gt; sex varchar(10),</span><br><span class=\"line\">    -&gt; dept_id int(11),</span><br><span class=\"line\">    -&gt; foreign key(dept_id) references tb_departments(dept_id)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tb_departments (dept_name) values (&#39;Computer&#39;),(&#39;Chinese&#39;),(&#39;Math&#39;),(&#39;Economy&#39;),(&#39;History&#39;);</span><br><span class=\"line\">Query OK, 5 rows affected</span><br><span class=\"line\">Records: 5  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into tb_students_info (name,sex,dept_id) values</span><br><span class=\"line\">    -&gt; (&#39;Dany&#39;,&#39;male&#39;,1),(&#39;Jane&#39;,&#39;male&#39;,2),</span><br><span class=\"line\">    -&gt; (&#39;Jim&#39;,&#39;male&#39;,4),(&#39;Henry&#39;,&#39;female&#39;,3),</span><br><span class=\"line\">    -&gt; (&#39;John&#39;,&#39;female&#39;,3),(&#39;Susan&#39;,&#39;female&#39;,Null);</span><br><span class=\"line\">Query OK, 6 rows affected</span><br><span class=\"line\">Records: 6  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】在<code>tb_students_info</code> 表和 <code>tb_departments</code> 表中查询所有学生，包括没有学院的学生，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,dept_name </span><br><span class=\"line\">    -&gt; from tb_students_info as s</span><br><span class=\"line\">    -&gt; left outer join tb_departments as d</span><br><span class=\"line\">    -&gt; on s.dept_id &#x3D; d.dept_id;</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| name  | dept_name |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| Dany  | Computer  |</span><br><span class=\"line\">| Jane  | Chinese   |</span><br><span class=\"line\">| Jim   | Economy   |</span><br><span class=\"line\">| Henry | Math      |</span><br><span class=\"line\">| John  | Math      |</span><br><span class=\"line\">| Susan | NULL      |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">6 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>结果显示了 6 条记录，name 为 Susan的学生目前没有学院，因为对应的 tb_departments<br>表中并没有该学生的学院信息，所以该条记录只取出了 tb_students_info 表中相应的值，而从 tb_departments<br>表中取出的值为 NULL。</p>\n<p>右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为NULL。</p>\n<p>【实例3】在 tb_students_info 表和 tb_departments 表中查询所有学院，包括没有学生的学院，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name,dept_name </span><br><span class=\"line\">    -&gt; from tb_students_info s</span><br><span class=\"line\">    -&gt; right outer join tb_departments d</span><br><span class=\"line\">    -&gt; on s.dept_id &#x3D; d.dept_id;</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| name  | dept_name |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">| Dany  | Computer  |</span><br><span class=\"line\">| Jane  | Chinese   |</span><br><span class=\"line\">| Henry | Math      |</span><br><span class=\"line\">| John  | Math      |</span><br><span class=\"line\">| Jim   | Economy   |</span><br><span class=\"line\">| NULL  | History   |</span><br><span class=\"line\">+-------+-----------+</span><br><span class=\"line\">6 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，结果只显示了6 条记录，名称为 History 的学院目前没有学生，对应的 tb_students_info 表中并没有该学院的信息，所以该条记录只取出了 tb_departments 表中相应的值，而从 tb_students_info 表中取出的值为NULL。</p>\n"},{"title":"MySQL LIMIT：限制查询结果的记录条数","keywords":"Mysql limit 限制查询结果的记录条数","description":"Mysql limit 限制查询结果的记录条数","cover":"https://tva2.sinaimg.cn/large/9fc55f55gy1gcz8zkfuatj20sf0iy1kx.jpg","abbrlink":"a9695717","date":"2020-03-19T06:45:49.000Z","top_img":null,"copyright":null,"_content":"\n在使用 MySQL  SELECT 语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到 MySQL LIMT 子句。\n\n基本语法如下：\n\n```mysql\n<LIMIT> [<位置偏移量>,] <行数>\n```\n\n> LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。\n\n> 第一个参数“位置偏移量”指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0,第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。\n\n【实例1】显示`oauth_roles`表查询结果的前4行，输入的SQL语句和执行结果如下\n\n```mysql\nmysql> select * from oauth_roles limit 4;\n+----+-------+\n| id | roles |\n+----+-------+\n|  1 | users |\n|  2 | admin |\n|  3 | test1 |\n|  4 | test2 |\n+----+-------+\n4 rows in set\n```\n\n由结果可以看到，该语句没有指定返回记录的“位置偏移量”参数，显示结果从第一行开始，“行数”参数为 4，因此返回的结果为表中的前 4 行记录。\n\n若指定返回记录的开始位置，则返回结果为从“位置偏移量”参数开始的指定行数，“行数”参数指定返回的记录条数。\n\n【实例2】在`oauth_roles`表中，使用LIMIT子句返回从第 4 条记录开始的行数为 5 的记录，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select * from oauth_roles limit 3,5;\n+----+-------+\n| id | roles |\n+----+-------+\n|  4 | test2 |\n|  5 | test3 |\n|  6 | test4 |\n|  7 | test5 |\n|  8 | test6 |\n+----+-------+\n```\n\n由结果可以看到，该语句指示 MySQL 返回从第 4 条记录行开始的之后的 5 条记录，第一个数字“3”表示从第 4 行开始（位置偏移量从 0 开始，第 4 行的位置偏移量为 3），第二个数字 5 表示返回的行数。\n\n","source":"_posts/MySQL-LIMIT：限制查询结果的记录条数.md","raw":"---\ntitle: MySQL LIMIT：限制查询结果的记录条数\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql limit 限制查询结果的记录条数\ndescription: Mysql limit 限制查询结果的记录条数\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55gy1gcz8zkfuatj20sf0iy1kx.jpg'\nabbrlink: a9695717\ndate: 2020-03-19 14:45:49\ntop_img:\ncopyright:\n---\n\n在使用 MySQL  SELECT 语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到 MySQL LIMT 子句。\n\n基本语法如下：\n\n```mysql\n<LIMIT> [<位置偏移量>,] <行数>\n```\n\n> LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。\n\n> 第一个参数“位置偏移量”指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0,第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。\n\n【实例1】显示`oauth_roles`表查询结果的前4行，输入的SQL语句和执行结果如下\n\n```mysql\nmysql> select * from oauth_roles limit 4;\n+----+-------+\n| id | roles |\n+----+-------+\n|  1 | users |\n|  2 | admin |\n|  3 | test1 |\n|  4 | test2 |\n+----+-------+\n4 rows in set\n```\n\n由结果可以看到，该语句没有指定返回记录的“位置偏移量”参数，显示结果从第一行开始，“行数”参数为 4，因此返回的结果为表中的前 4 行记录。\n\n若指定返回记录的开始位置，则返回结果为从“位置偏移量”参数开始的指定行数，“行数”参数指定返回的记录条数。\n\n【实例2】在`oauth_roles`表中，使用LIMIT子句返回从第 4 条记录开始的行数为 5 的记录，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select * from oauth_roles limit 3,5;\n+----+-------+\n| id | roles |\n+----+-------+\n|  4 | test2 |\n|  5 | test3 |\n|  6 | test4 |\n|  7 | test5 |\n|  8 | test6 |\n+----+-------+\n```\n\n由结果可以看到，该语句指示 MySQL 返回从第 4 条记录行开始的之后的 5 条记录，第一个数字“3”表示从第 4 行开始（位置偏移量从 0 开始，第 4 行的位置偏移量为 3），第二个数字 5 表示返回的行数。\n\n","slug":"MySQL-LIMIT：限制查询结果的记录条数","published":1,"updated":"2020-03-19T07:04:27.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mtx0006tvm079j391q9","content":"<p>在使用 MySQL  SELECT 语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到 MySQL LIMT 子句。</p>\n<p>基本语法如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LIMIT&gt; [&lt;位置偏移量&gt;,] &lt;行数&gt;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p>\n</blockquote>\n<blockquote>\n<p>第一个参数“位置偏移量”指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0,第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。</p>\n</blockquote>\n<p>【实例1】显示<code>oauth_roles</code>表查询结果的前4行，输入的SQL语句和执行结果如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from oauth_roles limit 4;</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">| id | roles |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">|  1 | users |</span><br><span class=\"line\">|  2 | admin |</span><br><span class=\"line\">|  3 | test1 |</span><br><span class=\"line\">|  4 | test2 |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>由结果可以看到，该语句没有指定返回记录的“位置偏移量”参数，显示结果从第一行开始，“行数”参数为 4，因此返回的结果为表中的前 4 行记录。</p>\n<p>若指定返回记录的开始位置，则返回结果为从“位置偏移量”参数开始的指定行数，“行数”参数指定返回的记录条数。</p>\n<p>【实例2】在<code>oauth_roles</code>表中，使用LIMIT子句返回从第 4 条记录开始的行数为 5 的记录，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from oauth_roles limit 3,5;</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">| id | roles |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">|  4 | test2 |</span><br><span class=\"line\">|  5 | test3 |</span><br><span class=\"line\">|  6 | test4 |</span><br><span class=\"line\">|  7 | test5 |</span><br><span class=\"line\">|  8 | test6 |</span><br><span class=\"line\">+----+-------+</span><br></pre></td></tr></table></figure></div>\n\n<p>由结果可以看到，该语句指示 MySQL 返回从第 4 条记录行开始的之后的 5 条记录，第一个数字“3”表示从第 4 行开始（位置偏移量从 0 开始，第 4 行的位置偏移量为 3），第二个数字 5 表示返回的行数。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在使用 MySQL  SELECT 语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到 MySQL LIMT 子句。</p>\n<p>基本语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LIMIT&gt; [&lt;位置偏移量&gt;,] &lt;行数&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p>\n</blockquote>\n<blockquote>\n<p>第一个参数“位置偏移量”指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0,第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。</p>\n</blockquote>\n<p>【实例1】显示<code>oauth_roles</code>表查询结果的前4行，输入的SQL语句和执行结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from oauth_roles limit 4;</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">| id | roles |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">|  1 | users |</span><br><span class=\"line\">|  2 | admin |</span><br><span class=\"line\">|  3 | test1 |</span><br><span class=\"line\">|  4 | test2 |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>由结果可以看到，该语句没有指定返回记录的“位置偏移量”参数，显示结果从第一行开始，“行数”参数为 4，因此返回的结果为表中的前 4 行记录。</p>\n<p>若指定返回记录的开始位置，则返回结果为从“位置偏移量”参数开始的指定行数，“行数”参数指定返回的记录条数。</p>\n<p>【实例2】在<code>oauth_roles</code>表中，使用LIMIT子句返回从第 4 条记录开始的行数为 5 的记录，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from oauth_roles limit 3,5;</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">| id | roles |</span><br><span class=\"line\">+----+-------+</span><br><span class=\"line\">|  4 | test2 |</span><br><span class=\"line\">|  5 | test3 |</span><br><span class=\"line\">|  6 | test4 |</span><br><span class=\"line\">|  7 | test5 |</span><br><span class=\"line\">|  8 | test6 |</span><br><span class=\"line\">+----+-------+</span><br></pre></td></tr></table></figure>\n\n<p>由结果可以看到，该语句指示 MySQL 返回从第 4 条记录行开始的之后的 5 条记录，第一个数字“3”表示从第 4 行开始（位置偏移量从 0 开始，第 4 行的位置偏移量为 3），第二个数字 5 表示返回的行数。</p>\n"},{"title":"MySQL ORDER BY:对查询结果进行排序","keywords":"Mysql ORDER BY 查询结果进行排序","description":"Mysql ORDER BY 查询结果进行排序","cover":"https://tva2.sinaimg.cn/large/9fc55f55gy1gd3piwmlp9j20sg0e8nnl.jpg","abbrlink":"fb3bb1f6","date":"2020-03-23T02:52:20.000Z","top_img":null,"copyright":null,"_content":"\n在 MySQL SELECT 语句中，ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。\n\n其语法格式为:\n\n```mysql\nORDER BY {<列名> | <表达式> | <位置>} [ASC|DESC]\n```\n\n> 语法说明：\n>\n> 1 列名\n>\n> 指定用于排序的列。可以指定多个列，列名之间用逗号分隔。\n>\n> 2 表达式\n>\n> 指定用于排序的表达式。\n>\n> 3 位置\n>\n> 指定用于排序的列在 SELECT 语句结果集中的位置，通常是一个正整数。\n>\n> 4 ASC|DESC\n>\n> 关键字 `ASC` 表示按升序分组，关键字 `DESC` 表示按降序分组，其中 `ASC` 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。\n\n使用 ORDER BY 子句应该注意以下几个方面：\n\n- ORDER BY 子句中可以包含子查询。\n- 当排序的值中存在空值时，ORDER BY 子句会将该空值作为最小值来对待。\n- 当在 ORDER BY 子句中指定多个列进行排序时，MySQL 会按照列的顺序从左到右依次进行排序。\n- 查询的数据并没有以一种特定的顺序显示，如果没有对它们进行排序，则将根据插入到数据表中的顺序显示。使用 ORDER BY 子句对指定的列数据进行排序。\n\n【实例1】查询`vtl_usage`表中的`vtl_Used_Space`字段值，并对其进行排序，输入的SQL语句和执行结果如下所示。\n\n```\nmysql> select * from vtl_usage  order by vtl_Used_Space limit 1,10;\n+-----+--------------+---------------------+----------------+---------------------+\n| id  | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |\n+-----+--------------+---------------------+----------------+---------------------+\n| 342 | 10.91.74.22 | 366.04              | 143.96         | 2019-06-24 00:00:00 |\n| 348 | 10.91.74.22 | 365.99              | 144.01         | 2019-06-26 00:00:00 |\n| 360 | 10.91.74.22 | 365.98              | 144.02         | 2019-06-30 00:00:00 |\n| 354 | 10.91.74.22 | 365.86              | 144.14         | 2019-06-28 00:00:00 |\n| 363 | 10.91.74.22 | 365.84              | 144.16         | 2019-07-08 00:00:00 |\n| 381 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-07 00:00:00 |\n| 384 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-08 00:00:00 |\n| 366 | 10.91.74.22 | 365.75              | 144.25         | 2019-07-02 00:00:00 |\n| 351 | 10.91.74.22 | 365.69              | 144.31         | 2019-06-27 00:00:00 |\n| 369 | 10.91.74.22 | 365.68              | 144.32         | 2019-07-03 00:00:00 |\n+-----+--------------+---------------------+----------------+---------------------+\n10 rows in set\n```\n\n【实例2】查询vtl_usage`表中的`vtl_Used_Space`和`vtl_Available_Space`字段值,先按 vtl_Available_Space排序，再按 `vtl_Used_Space`排序，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select * from vtl_usage  order by vtl_Available_Space,vtl_Used_Space limit 1,10\n;\n+------+--------------+---------------------+----------------+---------------------+\n| id   | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |\n+------+--------------+---------------------+----------------+---------------------+\n|  886 | 10.91.74.85 | 100.20              | 229.80         | 2019-12-23 00:00:00 |\n|  736 | 10.91.74.85 | 100.52              | 229.49         | 2019-11-03 00:00:00 |\n| 1111 | 10.91.74.85 | 100.54              | 229.47         | 2020-03-07 00:00:00 |\n|  919 | 10.91.74.85 | 101.50              | 228.50         | 2020-01-03 00:00:00 |\n| 1084 | 10.91.74.85 | 102.06              | 227.95         | 2020-02-27 00:00:00 |\n|  880 | 10.91.74.85 | 102.28              | 227.72         | 2019-12-21 00:00:00 |\n|  883 | 10.91.74.85 | 103.14              | 226.87         | 2019-12-22 00:00:00 |\n| 1081 | 10.91.74.85 | 103.84              | 226.17         | 2020-02-26 00:00:00 |\n| 1078 | 10.91.74.85 | 104.67              | 225.33         | 2020-02-25 00:00:00 |\n|  574 | 10.91.74.85 | 104.80              | 225.20         | 2019-09-10 00:00:00 |\n+------+--------------+---------------------+----------------+---------------------+\n10 rows in set\n```\n\n","source":"_posts/MySQL-ORDER-BY-对查询结果进行排序.md","raw":"---\ntitle: 'MySQL ORDER BY:对查询结果进行排序'\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql ORDER BY 查询结果进行排序\ndescription: Mysql ORDER BY 查询结果进行排序\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55gy1gd3piwmlp9j20sg0e8nnl.jpg'\nabbrlink: fb3bb1f6\ndate: 2020-03-23 10:52:20\ntop_img:\ncopyright:\n---\n\n在 MySQL SELECT 语句中，ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。\n\n其语法格式为:\n\n```mysql\nORDER BY {<列名> | <表达式> | <位置>} [ASC|DESC]\n```\n\n> 语法说明：\n>\n> 1 列名\n>\n> 指定用于排序的列。可以指定多个列，列名之间用逗号分隔。\n>\n> 2 表达式\n>\n> 指定用于排序的表达式。\n>\n> 3 位置\n>\n> 指定用于排序的列在 SELECT 语句结果集中的位置，通常是一个正整数。\n>\n> 4 ASC|DESC\n>\n> 关键字 `ASC` 表示按升序分组，关键字 `DESC` 表示按降序分组，其中 `ASC` 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。\n\n使用 ORDER BY 子句应该注意以下几个方面：\n\n- ORDER BY 子句中可以包含子查询。\n- 当排序的值中存在空值时，ORDER BY 子句会将该空值作为最小值来对待。\n- 当在 ORDER BY 子句中指定多个列进行排序时，MySQL 会按照列的顺序从左到右依次进行排序。\n- 查询的数据并没有以一种特定的顺序显示，如果没有对它们进行排序，则将根据插入到数据表中的顺序显示。使用 ORDER BY 子句对指定的列数据进行排序。\n\n【实例1】查询`vtl_usage`表中的`vtl_Used_Space`字段值，并对其进行排序，输入的SQL语句和执行结果如下所示。\n\n```\nmysql> select * from vtl_usage  order by vtl_Used_Space limit 1,10;\n+-----+--------------+---------------------+----------------+---------------------+\n| id  | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |\n+-----+--------------+---------------------+----------------+---------------------+\n| 342 | 10.91.74.22 | 366.04              | 143.96         | 2019-06-24 00:00:00 |\n| 348 | 10.91.74.22 | 365.99              | 144.01         | 2019-06-26 00:00:00 |\n| 360 | 10.91.74.22 | 365.98              | 144.02         | 2019-06-30 00:00:00 |\n| 354 | 10.91.74.22 | 365.86              | 144.14         | 2019-06-28 00:00:00 |\n| 363 | 10.91.74.22 | 365.84              | 144.16         | 2019-07-08 00:00:00 |\n| 381 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-07 00:00:00 |\n| 384 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-08 00:00:00 |\n| 366 | 10.91.74.22 | 365.75              | 144.25         | 2019-07-02 00:00:00 |\n| 351 | 10.91.74.22 | 365.69              | 144.31         | 2019-06-27 00:00:00 |\n| 369 | 10.91.74.22 | 365.68              | 144.32         | 2019-07-03 00:00:00 |\n+-----+--------------+---------------------+----------------+---------------------+\n10 rows in set\n```\n\n【实例2】查询vtl_usage`表中的`vtl_Used_Space`和`vtl_Available_Space`字段值,先按 vtl_Available_Space排序，再按 `vtl_Used_Space`排序，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select * from vtl_usage  order by vtl_Available_Space,vtl_Used_Space limit 1,10\n;\n+------+--------------+---------------------+----------------+---------------------+\n| id   | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |\n+------+--------------+---------------------+----------------+---------------------+\n|  886 | 10.91.74.85 | 100.20              | 229.80         | 2019-12-23 00:00:00 |\n|  736 | 10.91.74.85 | 100.52              | 229.49         | 2019-11-03 00:00:00 |\n| 1111 | 10.91.74.85 | 100.54              | 229.47         | 2020-03-07 00:00:00 |\n|  919 | 10.91.74.85 | 101.50              | 228.50         | 2020-01-03 00:00:00 |\n| 1084 | 10.91.74.85 | 102.06              | 227.95         | 2020-02-27 00:00:00 |\n|  880 | 10.91.74.85 | 102.28              | 227.72         | 2019-12-21 00:00:00 |\n|  883 | 10.91.74.85 | 103.14              | 226.87         | 2019-12-22 00:00:00 |\n| 1081 | 10.91.74.85 | 103.84              | 226.17         | 2020-02-26 00:00:00 |\n| 1078 | 10.91.74.85 | 104.67              | 225.33         | 2020-02-25 00:00:00 |\n|  574 | 10.91.74.85 | 104.80              | 225.20         | 2019-09-10 00:00:00 |\n+------+--------------+---------------------+----------------+---------------------+\n10 rows in set\n```\n\n","slug":"MySQL-ORDER-BY-对查询结果进行排序","published":1,"updated":"2020-03-23T03:37:45.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mtz0007tvm02tjd8b1t","content":"<p>在 MySQL SELECT 语句中，ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。</p>\n<p>其语法格式为:</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ORDER BY &#123;&lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt;&#125; [ASC|DESC]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>语法说明：</p>\n<p>1 列名</p>\n<p>指定用于排序的列。可以指定多个列，列名之间用逗号分隔。</p>\n<p>2 表达式</p>\n<p>指定用于排序的表达式。</p>\n<p>3 位置</p>\n<p>指定用于排序的列在 SELECT 语句结果集中的位置，通常是一个正整数。</p>\n<p>4 ASC|DESC</p>\n<p>关键字 <code>ASC</code> 表示按升序分组，关键字 <code>DESC</code> 表示按降序分组，其中 <code>ASC</code> 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。</p>\n</blockquote>\n<p>使用 ORDER BY 子句应该注意以下几个方面：</p>\n<ul>\n<li>ORDER BY 子句中可以包含子查询。</li>\n<li>当排序的值中存在空值时，ORDER BY 子句会将该空值作为最小值来对待。</li>\n<li>当在 ORDER BY 子句中指定多个列进行排序时，MySQL 会按照列的顺序从左到右依次进行排序。</li>\n<li>查询的数据并没有以一种特定的顺序显示，如果没有对它们进行排序，则将根据插入到数据表中的顺序显示。使用 ORDER BY 子句对指定的列数据进行排序。</li>\n</ul>\n<p>【实例1】查询<code>vtl_usage</code>表中的<code>vtl_Used_Space</code>字段值，并对其进行排序，输入的SQL语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from vtl_usage  order by vtl_Used_Space limit 1,10;</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| id  | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| 342 | 10.91.74.22 | 366.04              | 143.96         | 2019-06-24 00:00:00 |</span><br><span class=\"line\">| 348 | 10.91.74.22 | 365.99              | 144.01         | 2019-06-26 00:00:00 |</span><br><span class=\"line\">| 360 | 10.91.74.22 | 365.98              | 144.02         | 2019-06-30 00:00:00 |</span><br><span class=\"line\">| 354 | 10.91.74.22 | 365.86              | 144.14         | 2019-06-28 00:00:00 |</span><br><span class=\"line\">| 363 | 10.91.74.22 | 365.84              | 144.16         | 2019-07-08 00:00:00 |</span><br><span class=\"line\">| 381 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-07 00:00:00 |</span><br><span class=\"line\">| 384 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-08 00:00:00 |</span><br><span class=\"line\">| 366 | 10.91.74.22 | 365.75              | 144.25         | 2019-07-02 00:00:00 |</span><br><span class=\"line\">| 351 | 10.91.74.22 | 365.69              | 144.31         | 2019-06-27 00:00:00 |</span><br><span class=\"line\">| 369 | 10.91.74.22 | 365.68              | 144.32         | 2019-07-03 00:00:00 |</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】查询vtl_usage<code>表中的</code>vtl_Used_Space<code>和</code>vtl_Available_Space<code>字段值,先按 vtl_Available_Space排序，再按</code>vtl_Used_Space`排序，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from vtl_usage  order by vtl_Available_Space,vtl_Used_Space limit 1,10</span><br><span class=\"line\">;</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| id   | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">|  886 | 10.91.74.85 | 100.20              | 229.80         | 2019-12-23 00:00:00 |</span><br><span class=\"line\">|  736 | 10.91.74.85 | 100.52              | 229.49         | 2019-11-03 00:00:00 |</span><br><span class=\"line\">| 1111 | 10.91.74.85 | 100.54              | 229.47         | 2020-03-07 00:00:00 |</span><br><span class=\"line\">|  919 | 10.91.74.85 | 101.50              | 228.50         | 2020-01-03 00:00:00 |</span><br><span class=\"line\">| 1084 | 10.91.74.85 | 102.06              | 227.95         | 2020-02-27 00:00:00 |</span><br><span class=\"line\">|  880 | 10.91.74.85 | 102.28              | 227.72         | 2019-12-21 00:00:00 |</span><br><span class=\"line\">|  883 | 10.91.74.85 | 103.14              | 226.87         | 2019-12-22 00:00:00 |</span><br><span class=\"line\">| 1081 | 10.91.74.85 | 103.84              | 226.17         | 2020-02-26 00:00:00 |</span><br><span class=\"line\">| 1078 | 10.91.74.85 | 104.67              | 225.33         | 2020-02-25 00:00:00 |</span><br><span class=\"line\">|  574 | 10.91.74.85 | 104.80              | 225.20         | 2019-09-10 00:00:00 |</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在 MySQL SELECT 语句中，ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。</p>\n<p>其语法格式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ORDER BY &#123;&lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt;&#125; [ASC|DESC]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>语法说明：</p>\n<p>1 列名</p>\n<p>指定用于排序的列。可以指定多个列，列名之间用逗号分隔。</p>\n<p>2 表达式</p>\n<p>指定用于排序的表达式。</p>\n<p>3 位置</p>\n<p>指定用于排序的列在 SELECT 语句结果集中的位置，通常是一个正整数。</p>\n<p>4 ASC|DESC</p>\n<p>关键字 <code>ASC</code> 表示按升序分组，关键字 <code>DESC</code> 表示按降序分组，其中 <code>ASC</code> 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。</p>\n</blockquote>\n<p>使用 ORDER BY 子句应该注意以下几个方面：</p>\n<ul>\n<li>ORDER BY 子句中可以包含子查询。</li>\n<li>当排序的值中存在空值时，ORDER BY 子句会将该空值作为最小值来对待。</li>\n<li>当在 ORDER BY 子句中指定多个列进行排序时，MySQL 会按照列的顺序从左到右依次进行排序。</li>\n<li>查询的数据并没有以一种特定的顺序显示，如果没有对它们进行排序，则将根据插入到数据表中的顺序显示。使用 ORDER BY 子句对指定的列数据进行排序。</li>\n</ul>\n<p>【实例1】查询<code>vtl_usage</code>表中的<code>vtl_Used_Space</code>字段值，并对其进行排序，输入的SQL语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from vtl_usage  order by vtl_Used_Space limit 1,10;</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| id  | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| 342 | 10.91.74.22 | 366.04              | 143.96         | 2019-06-24 00:00:00 |</span><br><span class=\"line\">| 348 | 10.91.74.22 | 365.99              | 144.01         | 2019-06-26 00:00:00 |</span><br><span class=\"line\">| 360 | 10.91.74.22 | 365.98              | 144.02         | 2019-06-30 00:00:00 |</span><br><span class=\"line\">| 354 | 10.91.74.22 | 365.86              | 144.14         | 2019-06-28 00:00:00 |</span><br><span class=\"line\">| 363 | 10.91.74.22 | 365.84              | 144.16         | 2019-07-08 00:00:00 |</span><br><span class=\"line\">| 381 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-07 00:00:00 |</span><br><span class=\"line\">| 384 | 10.91.74.22 | 365.78              | 144.22         | 2019-07-08 00:00:00 |</span><br><span class=\"line\">| 366 | 10.91.74.22 | 365.75              | 144.25         | 2019-07-02 00:00:00 |</span><br><span class=\"line\">| 351 | 10.91.74.22 | 365.69              | 144.31         | 2019-06-27 00:00:00 |</span><br><span class=\"line\">| 369 | 10.91.74.22 | 365.68              | 144.32         | 2019-07-03 00:00:00 |</span><br><span class=\"line\">+-----+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】查询vtl_usage<code>表中的</code>vtl_Used_Space<code>和</code>vtl_Available_Space<code>字段值,先按 vtl_Available_Space排序，再按</code>vtl_Used_Space`排序，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from vtl_usage  order by vtl_Available_Space,vtl_Used_Space limit 1,10</span><br><span class=\"line\">;</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">| id   | vtl_ip       | vtl_Available_Space | vtl_Used_Space | add_time            |</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">|  886 | 10.91.74.85 | 100.20              | 229.80         | 2019-12-23 00:00:00 |</span><br><span class=\"line\">|  736 | 10.91.74.85 | 100.52              | 229.49         | 2019-11-03 00:00:00 |</span><br><span class=\"line\">| 1111 | 10.91.74.85 | 100.54              | 229.47         | 2020-03-07 00:00:00 |</span><br><span class=\"line\">|  919 | 10.91.74.85 | 101.50              | 228.50         | 2020-01-03 00:00:00 |</span><br><span class=\"line\">| 1084 | 10.91.74.85 | 102.06              | 227.95         | 2020-02-27 00:00:00 |</span><br><span class=\"line\">|  880 | 10.91.74.85 | 102.28              | 227.72         | 2019-12-21 00:00:00 |</span><br><span class=\"line\">|  883 | 10.91.74.85 | 103.14              | 226.87         | 2019-12-22 00:00:00 |</span><br><span class=\"line\">| 1081 | 10.91.74.85 | 103.84              | 226.17         | 2020-02-26 00:00:00 |</span><br><span class=\"line\">| 1078 | 10.91.74.85 | 104.67              | 225.33         | 2020-02-25 00:00:00 |</span><br><span class=\"line\">|  574 | 10.91.74.85 | 104.80              | 225.20         | 2019-09-10 00:00:00 |</span><br><span class=\"line\">+------+--------------+---------------------+----------------+---------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL WHERE:条件查询","keywords":"Mysql 条件查询  where查询","description":"Mysql 条件查询  where查询","cover":"https://tva3.sinaimg.cn/large/9fc55f55gy1gd512uzi5hj20sf0iydyg.jpg","abbrlink":"dfb807ee","date":"2020-03-24T06:33:55.000Z","top_img":null,"copyright":null,"_content":"\n在使用MySQL SELECT语句时，可以使用WHERE子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。\n\n基本语法格式如下：\n\n```mysql\nWHERE <查询条件> {<判定运算1>，<判定运算2>，…}\n```\n\n其中，判定运算其结果取值为 TRUE、FALSE 和 UNKNOWN。\n\n>判定运算的语法分类如下： \n>\n>-  <表达式1>`{=|<|<=|>|>=|<=>|<>|！=}`<表达式2>\n>-  <表达式1>`[NOT]LIKE`<表达式2>\n>-  <表达式1>`[NOT][REGEXP|RLIKE]`<表达式2>\n>-  <表达式1>`[NOT]BETWEEN`<表达式2>`AND`<表达式3>\n>-  <表达式1>`IS[NOT]NULL`\n\n# 单一条件查询语句\n\n【实例1】在表`job`中查找`dept_id`为2的数据，输入的 SQL 语句和行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id = '2';\n+----------+\n| name     |\n+----------+\n| 产品经理 |\n| 全栈开发 |\n| 软件测试 |\n+----------+\n3 rows in set\n\nmysql> \n```\n\n该语句采用了简单的相等过滤，查询一个指定列 dept_id的具体值 2。\n\n【实例2】查询`dept_id`大于2的所有数据，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id>2;\n+----------+\n| name     |\n+----------+\n| 人事专员 |\n+----------+\n1 row in set\n\nmysql> \n```\n\n# 多条件的查询语句\n\n使用 SELECT 查询时，可以增加查询的限制条件，这样可以使查询的结果更加精确。MySQL 在 WHERE 子句中使用 AND 操作符限定只有满足所有查询条件的记录才会被返回。\n\n可以使用 AND 连接两个甚至多个查询条件，多个条件表达式之间用 AND 分开。\n\n【实例3】在`job`表中查找`dept_id`为2的，并且`name`以`产品`开头的所有数据，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id =2 and name like '产品%';\n+----------+\n| name     |\n+----------+\n| 产品经理 |\n+----------+\n1 row in set\n\nmysql> \n```\n\n# 使用LIKE的模糊查询\n\n字符串匹配的语法格式如下：\n\n```mysql\n<表达式1> [NOT] LIKE <表达式2>\n```\n\n字符串匹配是一种模式匹配，使用运算符 LIKE 设置过滤条件，过滤条件使用通配符进行匹配运算，而不是判断是否相等进行比较。\n\n> 相互间进行匹配运算的对象可以是 CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。\n\n## 百分号(%)\n\n百分号是 MySQL 中常用的一种通配符，在过滤条件中，百分号可以表示任何字符串，并且该字符串可以出现任意次。\n\n使用百分号通配符要注意以下几点：\n\n- MySQL 默认是不区分大小写的，若要区分大小写，则需要更换字符集的校对规则。\n- 百分号不匹配空值。\n- 百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。\n- 尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。\n\n## 下划线 (_)\n\n下划线通配符和百分号通配符的用途一样，下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。\n\n> 注意：不要过度使用通配符，对通配符检索的处理一般会比其他检索方式花费更长的时间。\n\n【实例4】在`job`表中，查询所有以`开发`结尾的所有数据，输入的 SQL 的语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where name like '%开发';\n+----------+\n| name     |\n+----------+\n| 全栈开发 |\n+----------+\n1 row in set\n```\n\n\n\n","source":"_posts/MySQL-WHERE-条件查询.md","raw":"---\ntitle: 'MySQL WHERE:条件查询'\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql 条件查询  where查询\ndescription: Mysql 条件查询  where查询\ncover: 'https://tva3.sinaimg.cn/large/9fc55f55gy1gd512uzi5hj20sf0iydyg.jpg'\nabbrlink: dfb807ee\ndate: 2020-03-24 14:33:55\ntop_img:\ncopyright:\n---\n\n在使用MySQL SELECT语句时，可以使用WHERE子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。\n\n基本语法格式如下：\n\n```mysql\nWHERE <查询条件> {<判定运算1>，<判定运算2>，…}\n```\n\n其中，判定运算其结果取值为 TRUE、FALSE 和 UNKNOWN。\n\n>判定运算的语法分类如下： \n>\n>-  <表达式1>`{=|<|<=|>|>=|<=>|<>|！=}`<表达式2>\n>-  <表达式1>`[NOT]LIKE`<表达式2>\n>-  <表达式1>`[NOT][REGEXP|RLIKE]`<表达式2>\n>-  <表达式1>`[NOT]BETWEEN`<表达式2>`AND`<表达式3>\n>-  <表达式1>`IS[NOT]NULL`\n\n# 单一条件查询语句\n\n【实例1】在表`job`中查找`dept_id`为2的数据，输入的 SQL 语句和行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id = '2';\n+----------+\n| name     |\n+----------+\n| 产品经理 |\n| 全栈开发 |\n| 软件测试 |\n+----------+\n3 rows in set\n\nmysql> \n```\n\n该语句采用了简单的相等过滤，查询一个指定列 dept_id的具体值 2。\n\n【实例2】查询`dept_id`大于2的所有数据，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id>2;\n+----------+\n| name     |\n+----------+\n| 人事专员 |\n+----------+\n1 row in set\n\nmysql> \n```\n\n# 多条件的查询语句\n\n使用 SELECT 查询时，可以增加查询的限制条件，这样可以使查询的结果更加精确。MySQL 在 WHERE 子句中使用 AND 操作符限定只有满足所有查询条件的记录才会被返回。\n\n可以使用 AND 连接两个甚至多个查询条件，多个条件表达式之间用 AND 分开。\n\n【实例3】在`job`表中查找`dept_id`为2的，并且`name`以`产品`开头的所有数据，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where dept_id =2 and name like '产品%';\n+----------+\n| name     |\n+----------+\n| 产品经理 |\n+----------+\n1 row in set\n\nmysql> \n```\n\n# 使用LIKE的模糊查询\n\n字符串匹配的语法格式如下：\n\n```mysql\n<表达式1> [NOT] LIKE <表达式2>\n```\n\n字符串匹配是一种模式匹配，使用运算符 LIKE 设置过滤条件，过滤条件使用通配符进行匹配运算，而不是判断是否相等进行比较。\n\n> 相互间进行匹配运算的对象可以是 CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。\n\n## 百分号(%)\n\n百分号是 MySQL 中常用的一种通配符，在过滤条件中，百分号可以表示任何字符串，并且该字符串可以出现任意次。\n\n使用百分号通配符要注意以下几点：\n\n- MySQL 默认是不区分大小写的，若要区分大小写，则需要更换字符集的校对规则。\n- 百分号不匹配空值。\n- 百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。\n- 尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。\n\n## 下划线 (_)\n\n下划线通配符和百分号通配符的用途一样，下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。\n\n> 注意：不要过度使用通配符，对通配符检索的处理一般会比其他检索方式花费更长的时间。\n\n【实例4】在`job`表中，查询所有以`开发`结尾的所有数据，输入的 SQL 的语句和执行结果如下所示。\n\n```mysql\nmysql> select name from job where name like '%开发';\n+----------+\n| name     |\n+----------+\n| 全栈开发 |\n+----------+\n1 row in set\n```\n\n\n\n","slug":"MySQL-WHERE-条件查询","published":1,"updated":"2020-03-24T07:18:58.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mu1000btvm07j764yst","content":"<p>在使用MySQL SELECT语句时，可以使用WHERE子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。</p>\n<p>基本语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE &lt;查询条件&gt; &#123;&lt;判定运算1&gt;，&lt;判定运算2&gt;，…&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，判定运算其结果取值为 TRUE、FALSE 和 UNKNOWN。</p>\n<blockquote>\n<p>判定运算的语法分类如下： </p>\n<ul>\n<li>&lt;表达式1&gt;<code>{=|&lt;|&lt;=|&gt;|&gt;=|&lt;=&gt;|&lt;&gt;|！=}</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT]LIKE</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT][REGEXP|RLIKE]</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT]BETWEEN</code>&lt;表达式2&gt;<code>AND</code>&lt;表达式3&gt;</li>\n<li>&lt;表达式1&gt;<code>IS[NOT]NULL</code></li>\n</ul>\n</blockquote>\n<h1 id=\"单一条件查询语句\"><a href=\"#单一条件查询语句\" class=\"headerlink\" title=\"单一条件查询语句\"></a>单一条件查询语句</h1><p>【实例1】在表<code>job</code>中查找<code>dept_id</code>为2的数据，输入的 SQL 语句和行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id &#x3D; &#39;2&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 产品经理 |</span><br><span class=\"line\">| 全栈开发 |</span><br><span class=\"line\">| 软件测试 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>该语句采用了简单的相等过滤，查询一个指定列 dept_id的具体值 2。</p>\n<p>【实例2】查询<code>dept_id</code>大于2的所有数据，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id&gt;2;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 人事专员 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"多条件的查询语句\"><a href=\"#多条件的查询语句\" class=\"headerlink\" title=\"多条件的查询语句\"></a>多条件的查询语句</h1><p>使用 SELECT 查询时，可以增加查询的限制条件，这样可以使查询的结果更加精确。MySQL 在 WHERE 子句中使用 AND 操作符限定只有满足所有查询条件的记录才会被返回。</p>\n<p>可以使用 AND 连接两个甚至多个查询条件，多个条件表达式之间用 AND 分开。</p>\n<p>【实例3】在<code>job</code>表中查找<code>dept_id</code>为2的，并且<code>name</code>以<code>产品</code>开头的所有数据，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id &#x3D;2 and name like &#39;产品%&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 产品经理 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"使用LIKE的模糊查询\"><a href=\"#使用LIKE的模糊查询\" class=\"headerlink\" title=\"使用LIKE的模糊查询\"></a>使用LIKE的模糊查询</h1><p>字符串匹配的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式1&gt; [NOT] LIKE &lt;表达式2&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>字符串匹配是一种模式匹配，使用运算符 LIKE 设置过滤条件，过滤条件使用通配符进行匹配运算，而不是判断是否相等进行比较。</p>\n<blockquote>\n<p>相互间进行匹配运算的对象可以是 CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。</p>\n</blockquote>\n<h2 id=\"百分号\"><a href=\"#百分号\" class=\"headerlink\" title=\"百分号(%)\"></a>百分号(%)</h2><p>百分号是 MySQL 中常用的一种通配符，在过滤条件中，百分号可以表示任何字符串，并且该字符串可以出现任意次。</p>\n<p>使用百分号通配符要注意以下几点：</p>\n<ul>\n<li>MySQL 默认是不区分大小写的，若要区分大小写，则需要更换字符集的校对规则。</li>\n<li>百分号不匹配空值。</li>\n<li>百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。</li>\n<li>尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。</li>\n</ul>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线 (_)\"></a>下划线 (_)</h2><p>下划线通配符和百分号通配符的用途一样，下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。</p>\n<blockquote>\n<p>注意：不要过度使用通配符，对通配符检索的处理一般会比其他检索方式花费更长的时间。</p>\n</blockquote>\n<p>【实例4】在<code>job</code>表中，查询所有以<code>开发</code>结尾的所有数据，输入的 SQL 的语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where name like &#39;%开发&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 全栈开发 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br></pre></td></tr></table></figure></div>\n\n\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在使用MySQL SELECT语句时，可以使用WHERE子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。</p>\n<p>基本语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE &lt;查询条件&gt; &#123;&lt;判定运算1&gt;，&lt;判定运算2&gt;，…&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，判定运算其结果取值为 TRUE、FALSE 和 UNKNOWN。</p>\n<blockquote>\n<p>判定运算的语法分类如下： </p>\n<ul>\n<li>&lt;表达式1&gt;<code>{=|&lt;|&lt;=|&gt;|&gt;=|&lt;=&gt;|&lt;&gt;|！=}</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT]LIKE</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT][REGEXP|RLIKE]</code>&lt;表达式2&gt;</li>\n<li>&lt;表达式1&gt;<code>[NOT]BETWEEN</code>&lt;表达式2&gt;<code>AND</code>&lt;表达式3&gt;</li>\n<li>&lt;表达式1&gt;<code>IS[NOT]NULL</code></li>\n</ul>\n</blockquote>\n<h1 id=\"单一条件查询语句\"><a href=\"#单一条件查询语句\" class=\"headerlink\" title=\"单一条件查询语句\"></a>单一条件查询语句</h1><p>【实例1】在表<code>job</code>中查找<code>dept_id</code>为2的数据，输入的 SQL 语句和行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id &#x3D; &#39;2&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 产品经理 |</span><br><span class=\"line\">| 全栈开发 |</span><br><span class=\"line\">| 软件测试 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>该语句采用了简单的相等过滤，查询一个指定列 dept_id的具体值 2。</p>\n<p>【实例2】查询<code>dept_id</code>大于2的所有数据，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id&gt;2;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 人事专员 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多条件的查询语句\"><a href=\"#多条件的查询语句\" class=\"headerlink\" title=\"多条件的查询语句\"></a>多条件的查询语句</h1><p>使用 SELECT 查询时，可以增加查询的限制条件，这样可以使查询的结果更加精确。MySQL 在 WHERE 子句中使用 AND 操作符限定只有满足所有查询条件的记录才会被返回。</p>\n<p>可以使用 AND 连接两个甚至多个查询条件，多个条件表达式之间用 AND 分开。</p>\n<p>【实例3】在<code>job</code>表中查找<code>dept_id</code>为2的，并且<code>name</code>以<code>产品</code>开头的所有数据，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where dept_id &#x3D;2 and name like &#39;产品%&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 产品经理 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用LIKE的模糊查询\"><a href=\"#使用LIKE的模糊查询\" class=\"headerlink\" title=\"使用LIKE的模糊查询\"></a>使用LIKE的模糊查询</h1><p>字符串匹配的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式1&gt; [NOT] LIKE &lt;表达式2&gt;</span><br></pre></td></tr></table></figure>\n\n<p>字符串匹配是一种模式匹配，使用运算符 LIKE 设置过滤条件，过滤条件使用通配符进行匹配运算，而不是判断是否相等进行比较。</p>\n<blockquote>\n<p>相互间进行匹配运算的对象可以是 CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。</p>\n</blockquote>\n<h2 id=\"百分号\"><a href=\"#百分号\" class=\"headerlink\" title=\"百分号(%)\"></a>百分号(%)</h2><p>百分号是 MySQL 中常用的一种通配符，在过滤条件中，百分号可以表示任何字符串，并且该字符串可以出现任意次。</p>\n<p>使用百分号通配符要注意以下几点：</p>\n<ul>\n<li>MySQL 默认是不区分大小写的，若要区分大小写，则需要更换字符集的校对规则。</li>\n<li>百分号不匹配空值。</li>\n<li>百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。</li>\n<li>尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。</li>\n</ul>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线 (_)\"></a>下划线 (_)</h2><p>下划线通配符和百分号通配符的用途一样，下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。</p>\n<blockquote>\n<p>注意：不要过度使用通配符，对通配符检索的处理一般会比其他检索方式花费更长的时间。</p>\n</blockquote>\n<p>【实例4】在<code>job</code>表中，查询所有以<code>开发</code>结尾的所有数据，输入的 SQL 的语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from job where name like &#39;%开发&#39;;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| name     |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 全栈开发 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"MySQL主键（PRIMARY KEY）","keywords":"Mysql主键创建、修改、删除","description":"Mysql主键创建、修改、删除","cover":"https://tva4.sinaimg.cn/large/9fc55f55ly1gcni9bm8rmj20sf0aa0u8.jpg","abbrlink":"fea984c4","date":"2020-03-09T02:31:29.000Z","top_img":null,"copyright":null,"_content":"\n> 主键（PRIMARY KEY），也称“主键约束”。MySQL主键约束时一个列或者列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。\n\n# 选取设置主键约束的字段\n\n主键约束即在表中定义一个主键来唯一确定表中每一行数据的标识符。 \n\n主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。\n\n# 主键规则\n\n每个表有且仅有一个主键。\n\n# 在创建表是设置主键约束\n\n在`CREATE TABLE`语言中，主键是通过`PRIMARY KEY`关键字来指定的。\n\n在定义列的同时指定主键，语法规则如下：\n\n```mysql\n<字段名> <数据类型> PRIMARY KEY [默认值]\n```\n\n【实例1】在test数据库中创建`student`数据表，其主键为id,输入的SQL语句如下：\n\n```mysql\nmysql> create table student\n    -> (\n    -> id int(11) primary key,\n    -> name varchar(50),\n    -> age varchar(30)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc student;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n```\n\n在定义完所有列之后，指定主键的语法格式为：\n\n```mysql\n[CONSTRAINT <约束名>] PRIMARY KEY [字段名]\n```\n\n【实例2】在`test`数据库中创建student1数据表，输入的 SQL 语句和运行结果如下：\n\n```mysql\nmysql> create table student1\n    -> (\n    -> id int(11),\n    -> name varchar(50),\n    -> age varchar(30),\n    -> primary key(id)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n# 在创建表时设置复合主键\n\n主键由多个字段联合组成，语法规则如下：\n\n```mysql\nPRIMARY KEY [字段1,字段2,...,字段n]\n```\n\n【实例3】创建数据表`emp`,假设表中没有主键`id`，为了唯一确定一个员工，可以把`name`、`deptId`联合起来作为主键，输入SQL语句和运行结果如下\n\n```mysql\nmysql> create table emp\n    -> (\n    -> name varchar(50),\n    -> depId int(11),\n    -> salary float,\n    -> primary key(name,depId)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc emp;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| name   | varchar(50) | NO   | PRI | NULL    |       |\n| depId  | int(11)     | NO   | PRI | NULL    |       |\n| salary | float       | YES  |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n# 删除数据表的主键\n\n删除表中的主键的基本语法，如下：\n\n```mysql\nalter table <数据表> drop primary key;\n```\n\n【实例5】把`student1`中的主键删除，输入的SQL如下：\n\n```mysql\nmysql> alter table student1 drop primary key;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n```\n\n# 在修改表是添加主键约束\n\n在修改数据表是添加主键约束的基本语法为：\n\n```mysql\nALTER TABLE <数据表名> ADD PRIMARY KEY(<列名>);\n```\n\n查看`student1`数据表结构，如下\n\n```mysql\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n【实例4】修改数据表`student1`，将字段`name`设置为主键，输入的SQL如下：\n\n```mysql\nmysql> alter table student1\n    -> add primary key (name);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | NO   | PRI | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n","source":"_posts/MySQL主键.md","raw":"---\ntitle: MySQL主键（PRIMARY KEY）\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql主键创建、修改、删除\ndescription: Mysql主键创建、修改、删除\ncover: 'https://tva4.sinaimg.cn/large/9fc55f55ly1gcni9bm8rmj20sf0aa0u8.jpg'\nabbrlink: fea984c4\ndate: 2020-03-09 10:31:29\ntop_img:\ncopyright:\n---\n\n> 主键（PRIMARY KEY），也称“主键约束”。MySQL主键约束时一个列或者列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。\n\n# 选取设置主键约束的字段\n\n主键约束即在表中定义一个主键来唯一确定表中每一行数据的标识符。 \n\n主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。\n\n# 主键规则\n\n每个表有且仅有一个主键。\n\n# 在创建表是设置主键约束\n\n在`CREATE TABLE`语言中，主键是通过`PRIMARY KEY`关键字来指定的。\n\n在定义列的同时指定主键，语法规则如下：\n\n```mysql\n<字段名> <数据类型> PRIMARY KEY [默认值]\n```\n\n【实例1】在test数据库中创建`student`数据表，其主键为id,输入的SQL语句如下：\n\n```mysql\nmysql> create table student\n    -> (\n    -> id int(11) primary key,\n    -> name varchar(50),\n    -> age varchar(30)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc student;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n```\n\n在定义完所有列之后，指定主键的语法格式为：\n\n```mysql\n[CONSTRAINT <约束名>] PRIMARY KEY [字段名]\n```\n\n【实例2】在`test`数据库中创建student1数据表，输入的 SQL 语句和运行结果如下：\n\n```mysql\nmysql> create table student1\n    -> (\n    -> id int(11),\n    -> name varchar(50),\n    -> age varchar(30),\n    -> primary key(id)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n# 在创建表时设置复合主键\n\n主键由多个字段联合组成，语法规则如下：\n\n```mysql\nPRIMARY KEY [字段1,字段2,...,字段n]\n```\n\n【实例3】创建数据表`emp`,假设表中没有主键`id`，为了唯一确定一个员工，可以把`name`、`deptId`联合起来作为主键，输入SQL语句和运行结果如下\n\n```mysql\nmysql> create table emp\n    -> (\n    -> name varchar(50),\n    -> depId int(11),\n    -> salary float,\n    -> primary key(name,depId)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc emp;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| name   | varchar(50) | NO   | PRI | NULL    |       |\n| depId  | int(11)     | NO   | PRI | NULL    |       |\n| salary | float       | YES  |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n# 删除数据表的主键\n\n删除表中的主键的基本语法，如下：\n\n```mysql\nalter table <数据表> drop primary key;\n```\n\n【实例5】把`student1`中的主键删除，输入的SQL如下：\n\n```mysql\nmysql> alter table student1 drop primary key;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n```\n\n# 在修改表是添加主键约束\n\n在修改数据表是添加主键约束的基本语法为：\n\n```mysql\nALTER TABLE <数据表名> ADD PRIMARY KEY(<列名>);\n```\n\n查看`student1`数据表结构，如下\n\n```mysql\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | YES  |     | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n【实例4】修改数据表`student1`，将字段`name`设置为主键，输入的SQL如下：\n\n```mysql\nmysql> alter table student1\n    -> add primary key (name);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   |     | NULL    |       |\n| name  | varchar(50) | NO   | PRI | NULL    |       |\n| age   | varchar(30) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n\nmysql> \n```\n\n","slug":"MySQL主键","published":1,"updated":"2020-03-09T03:17:18.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mu4000ctvm07tha9cx8","content":"<blockquote>\n<p>主键（PRIMARY KEY），也称“主键约束”。MySQL主键约束时一个列或者列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。</p>\n</blockquote>\n<h1 id=\"选取设置主键约束的字段\"><a href=\"#选取设置主键约束的字段\" class=\"headerlink\" title=\"选取设置主键约束的字段\"></a>选取设置主键约束的字段</h1><p>主键约束即在表中定义一个主键来唯一确定表中每一行数据的标识符。 </p>\n<p>主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。</p>\n<h1 id=\"主键规则\"><a href=\"#主键规则\" class=\"headerlink\" title=\"主键规则\"></a>主键规则</h1><p>每个表有且仅有一个主键。</p>\n<h1 id=\"在创建表是设置主键约束\"><a href=\"#在创建表是设置主键约束\" class=\"headerlink\" title=\"在创建表是设置主键约束\"></a>在创建表是设置主键约束</h1><p>在<code>CREATE TABLE</code>语言中，主键是通过<code>PRIMARY KEY</code>关键字来指定的。</p>\n<p>在定义列的同时指定主键，语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; PRIMARY KEY [默认值]</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例1】在test数据库中创建<code>student</code>数据表，其主键为id,输入的SQL语句如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) primary key,</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; age varchar(30)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>在定义完所有列之后，指定主键的语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CONSTRAINT &lt;约束名&gt;] PRIMARY KEY [字段名]</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】在<code>test</code>数据库中创建student1数据表，输入的 SQL 语句和运行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student1</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11),</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; age varchar(30),</span><br><span class=\"line\">    -&gt; primary key(id)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在创建表时设置复合主键\"><a href=\"#在创建表时设置复合主键\" class=\"headerlink\" title=\"在创建表时设置复合主键\"></a>在创建表时设置复合主键</h1><p>主键由多个字段联合组成，语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRIMARY KEY [字段1,字段2,...,字段n]</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】创建数据表<code>emp</code>,假设表中没有主键<code>id</code>，为了唯一确定一个员工，可以把<code>name</code>、<code>deptId</code>联合起来作为主键，输入SQL语句和运行结果如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table emp</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; depId int(11),</span><br><span class=\"line\">    -&gt; salary float,</span><br><span class=\"line\">    -&gt; primary key(name,depId)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| name   | varchar(50) | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| depId  | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| salary | float       | YES  |     | NULL    |       |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"删除数据表的主键\"><a href=\"#删除数据表的主键\" class=\"headerlink\" title=\"删除数据表的主键\"></a>删除数据表的主键</h1><p>删除表中的主键的基本语法，如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table &lt;数据表&gt; drop primary key;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例5】把<code>student1</code>中的主键删除，输入的SQL如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student1 drop primary key;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在修改表是添加主键约束\"><a href=\"#在修改表是添加主键约束\" class=\"headerlink\" title=\"在修改表是添加主键约束\"></a>在修改表是添加主键约束</h1><p>在修改数据表是添加主键约束的基本语法为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD PRIMARY KEY(&lt;列名&gt;);</span><br></pre></td></tr></table></figure></div>\n\n<p>查看<code>student1</code>数据表结构，如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例4】修改数据表<code>student1</code>，将字段<code>name</code>设置为主键，输入的SQL如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student1</span><br><span class=\"line\">    -&gt; add primary key (name);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<blockquote>\n<p>主键（PRIMARY KEY），也称“主键约束”。MySQL主键约束时一个列或者列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。</p>\n</blockquote>\n<h1 id=\"选取设置主键约束的字段\"><a href=\"#选取设置主键约束的字段\" class=\"headerlink\" title=\"选取设置主键约束的字段\"></a>选取设置主键约束的字段</h1><p>主键约束即在表中定义一个主键来唯一确定表中每一行数据的标识符。 </p>\n<p>主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。</p>\n<h1 id=\"主键规则\"><a href=\"#主键规则\" class=\"headerlink\" title=\"主键规则\"></a>主键规则</h1><p>每个表有且仅有一个主键。</p>\n<h1 id=\"在创建表是设置主键约束\"><a href=\"#在创建表是设置主键约束\" class=\"headerlink\" title=\"在创建表是设置主键约束\"></a>在创建表是设置主键约束</h1><p>在<code>CREATE TABLE</code>语言中，主键是通过<code>PRIMARY KEY</code>关键字来指定的。</p>\n<p>在定义列的同时指定主键，语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; PRIMARY KEY [默认值]</span><br></pre></td></tr></table></figure>\n\n<p>【实例1】在test数据库中创建<code>student</code>数据表，其主键为id,输入的SQL语句如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) primary key,</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; age varchar(30)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>在定义完所有列之后，指定主键的语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CONSTRAINT &lt;约束名&gt;] PRIMARY KEY [字段名]</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】在<code>test</code>数据库中创建student1数据表，输入的 SQL 语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student1</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11),</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; age varchar(30),</span><br><span class=\"line\">    -&gt; primary key(id)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在创建表时设置复合主键\"><a href=\"#在创建表时设置复合主键\" class=\"headerlink\" title=\"在创建表时设置复合主键\"></a>在创建表时设置复合主键</h1><p>主键由多个字段联合组成，语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRIMARY KEY [字段1,字段2,...,字段n]</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】创建数据表<code>emp</code>,假设表中没有主键<code>id</code>，为了唯一确定一个员工，可以把<code>name</code>、<code>deptId</code>联合起来作为主键，输入SQL语句和运行结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table emp</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; name varchar(50),</span><br><span class=\"line\">    -&gt; depId int(11),</span><br><span class=\"line\">    -&gt; salary float,</span><br><span class=\"line\">    -&gt; primary key(name,depId)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| name   | varchar(50) | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| depId  | int(11)     | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| salary | float       | YES  |     | NULL    |       |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除数据表的主键\"><a href=\"#删除数据表的主键\" class=\"headerlink\" title=\"删除数据表的主键\"></a>删除数据表的主键</h1><p>删除表中的主键的基本语法，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table &lt;数据表&gt; drop primary key;</span><br></pre></td></tr></table></figure>\n\n<p>【实例5】把<code>student1</code>中的主键删除，输入的SQL如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student1 drop primary key;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在修改表是添加主键约束\"><a href=\"#在修改表是添加主键约束\" class=\"headerlink\" title=\"在修改表是添加主键约束\"></a>在修改表是添加主键约束</h1><p>在修改数据表是添加主键约束的基本语法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD PRIMARY KEY(&lt;列名&gt;);</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>student1</code>数据表结构，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>【实例4】修改数据表<code>student1</code>，将字段<code>name</code>设置为主键，输入的SQL如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student1</span><br><span class=\"line\">    -&gt; add primary key (name);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student1;</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class=\"line\">| name  | varchar(50) | NO   | PRI | NULL    |       |</span><br><span class=\"line\">| age   | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">+-------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL修改数据库:ALTER DATABASE用法简介","keywords":"ALTER DATABASE","description":"修改数据库 ALTER","cover":"http://tva4.sinaimg.cn/large/9fc55f55gy1gce746x6iqj20qf0o4god.jpg","abbrlink":"b1cf4eaf","date":"2020-03-01T01:45:00.000Z","top_img":null,"copyright":null,"_content":"\n在 MySQL 数据库中只能对数据库使用的字符集和校对规则进行修改，数据库的这些特性都储存在 db.opt 文件中。下面我们来介绍一下修改数据库的基本操作。\n\n##### ALTE DATABASE的基本语法\n\n在 MySQL 中，可以使用 ```ALTER DATABASE``` 来修改已经被创建或者存在的数据库的相关参数。修改数据库的语法格式为：\n\n```MYSQL\nALTER DATABASE [数据库名] { \n[ DEFAULT ] CHARACTER SET <字符集名> |\n[ DEFAULT ] COLLATE <校对规则名>}\n```\n\n> 语法说明如下：\n>\n> 1、ALTER DATABASE 用于更改数据库的全局特性。\n>\n> 2、使用 ALTER DATABASE 需要获得数据库 ALTER 权限。\n>\n> 3、数据库名称可以忽略，此时语句对应于默认数据库。\n>\n> 4、CHARACTER SET 子句用于更改默认的数据库字符集。\n\n##### 案例详解\n\n##### 实例1：指定字符集修改为 gb2312\n\n查看 test 数据库的定义声明的执行结果如下所示：\n\n```MYSQL\nmysql> show create database test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET gb2312 */ |\n+----------+-----------------------------------------------------------------+\n1 row in set\n\nmysql> \n```\n\n 使用命令行工具将数据库 test 的指定字符集修改为 gb2312，默认校对规则修改为 utf8_unicode_ci，输入 SQL 语句与执行结果如下所示：\n\n```mysql\nmysql> alter database test\n    -> default character set gb2312\n    -> default collate gb2312_chinese_ci;\nQuery OK, 1 row affected\n\nmysql> show create database test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET gb2312 */ |\n+----------+-----------------------------------------------------------------+\n1 row in set\n\nmysql> \n```\n\n","source":"_posts/MySQL修改数据库-ALTER-DATABASE用法简介.md","raw":"---\ntitle: 'MySQL修改数据库:ALTER DATABASE用法简介'\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: ALTER DATABASE\ndescription: 修改数据库 ALTER\ncover: 'http://tva4.sinaimg.cn/large/9fc55f55gy1gce746x6iqj20qf0o4god.jpg'\nabbrlink: b1cf4eaf\ndate: 2020-03-01 09:45:00\ntop_img:\ncopyright:\n---\n\n在 MySQL 数据库中只能对数据库使用的字符集和校对规则进行修改，数据库的这些特性都储存在 db.opt 文件中。下面我们来介绍一下修改数据库的基本操作。\n\n##### ALTE DATABASE的基本语法\n\n在 MySQL 中，可以使用 ```ALTER DATABASE``` 来修改已经被创建或者存在的数据库的相关参数。修改数据库的语法格式为：\n\n```MYSQL\nALTER DATABASE [数据库名] { \n[ DEFAULT ] CHARACTER SET <字符集名> |\n[ DEFAULT ] COLLATE <校对规则名>}\n```\n\n> 语法说明如下：\n>\n> 1、ALTER DATABASE 用于更改数据库的全局特性。\n>\n> 2、使用 ALTER DATABASE 需要获得数据库 ALTER 权限。\n>\n> 3、数据库名称可以忽略，此时语句对应于默认数据库。\n>\n> 4、CHARACTER SET 子句用于更改默认的数据库字符集。\n\n##### 案例详解\n\n##### 实例1：指定字符集修改为 gb2312\n\n查看 test 数据库的定义声明的执行结果如下所示：\n\n```MYSQL\nmysql> show create database test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET gb2312 */ |\n+----------+-----------------------------------------------------------------+\n1 row in set\n\nmysql> \n```\n\n 使用命令行工具将数据库 test 的指定字符集修改为 gb2312，默认校对规则修改为 utf8_unicode_ci，输入 SQL 语句与执行结果如下所示：\n\n```mysql\nmysql> alter database test\n    -> default character set gb2312\n    -> default collate gb2312_chinese_ci;\nQuery OK, 1 row affected\n\nmysql> show create database test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET gb2312 */ |\n+----------+-----------------------------------------------------------------+\n1 row in set\n\nmysql> \n```\n\n","slug":"MySQL修改数据库-ALTER-DATABASE用法简介","published":1,"updated":"2020-03-01T02:01:17.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mu7000htvm0hp111w41","content":"<p>在 MySQL 数据库中只能对数据库使用的字符集和校对规则进行修改，数据库的这些特性都储存在 db.opt 文件中。下面我们来介绍一下修改数据库的基本操作。</p>\n<h5 id=\"ALTE-DATABASE的基本语法\"><a href=\"#ALTE-DATABASE的基本语法\" class=\"headerlink\" title=\"ALTE DATABASE的基本语法\"></a>ALTE DATABASE的基本语法</h5><p>在 MySQL 中，可以使用 <code>ALTER DATABASE</code> 来修改已经被创建或者存在的数据库的相关参数。修改数据库的语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE [数据库名] &#123; </span><br><span class=\"line\">[ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |</span><br><span class=\"line\">[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>语法说明如下：</p>\n<p>1、ALTER DATABASE 用于更改数据库的全局特性。</p>\n<p>2、使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</p>\n<p>3、数据库名称可以忽略，此时语句对应于默认数据库。</p>\n<p>4、CHARACTER SET 子句用于更改默认的数据库字符集。</p>\n</blockquote>\n<h5 id=\"案例详解\"><a href=\"#案例详解\" class=\"headerlink\" title=\"案例详解\"></a>案例详解</h5><h5 id=\"实例1：指定字符集修改为-gb2312\"><a href=\"#实例1：指定字符集修改为-gb2312\" class=\"headerlink\" title=\"实例1：指定字符集修改为 gb2312\"></a>实例1：指定字符集修改为 gb2312</h5><p>查看 test 数据库的定义声明的执行结果如下所示：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show create database test;</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                 |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| test     | CREATE DATABASE &#96;test&#96; &#x2F;*!40100 DEFAULT CHARACTER SET gb2312 *&#x2F; |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p> 使用命令行工具将数据库 test 的指定字符集修改为 gb2312，默认校对规则修改为 utf8_unicode_ci，输入 SQL 语句与执行结果如下所示：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter database test</span><br><span class=\"line\">    -&gt; default character set gb2312</span><br><span class=\"line\">    -&gt; default collate gb2312_chinese_ci;</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show create database test;</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                 |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| test     | CREATE DATABASE &#96;test&#96; &#x2F;*!40100 DEFAULT CHARACTER SET gb2312 *&#x2F; |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在 MySQL 数据库中只能对数据库使用的字符集和校对规则进行修改，数据库的这些特性都储存在 db.opt 文件中。下面我们来介绍一下修改数据库的基本操作。</p>\n<h5 id=\"ALTE-DATABASE的基本语法\"><a href=\"#ALTE-DATABASE的基本语法\" class=\"headerlink\" title=\"ALTE DATABASE的基本语法\"></a>ALTE DATABASE的基本语法</h5><p>在 MySQL 中，可以使用 <code>ALTER DATABASE</code> 来修改已经被创建或者存在的数据库的相关参数。修改数据库的语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE [数据库名] &#123; </span><br><span class=\"line\">[ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |</span><br><span class=\"line\">[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>语法说明如下：</p>\n<p>1、ALTER DATABASE 用于更改数据库的全局特性。</p>\n<p>2、使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</p>\n<p>3、数据库名称可以忽略，此时语句对应于默认数据库。</p>\n<p>4、CHARACTER SET 子句用于更改默认的数据库字符集。</p>\n</blockquote>\n<h5 id=\"案例详解\"><a href=\"#案例详解\" class=\"headerlink\" title=\"案例详解\"></a>案例详解</h5><h5 id=\"实例1：指定字符集修改为-gb2312\"><a href=\"#实例1：指定字符集修改为-gb2312\" class=\"headerlink\" title=\"实例1：指定字符集修改为 gb2312\"></a>实例1：指定字符集修改为 gb2312</h5><p>查看 test 数据库的定义声明的执行结果如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show create database test;</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                 |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| test     | CREATE DATABASE &#96;test&#96; &#x2F;*!40100 DEFAULT CHARACTER SET gb2312 *&#x2F; |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 使用命令行工具将数据库 test 的指定字符集修改为 gb2312，默认校对规则修改为 utf8_unicode_ci，输入 SQL 语句与执行结果如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter database test</span><br><span class=\"line\">    -&gt; default character set gb2312</span><br><span class=\"line\">    -&gt; default collate gb2312_chinese_ci;</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show create database test;</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| Database | Create Database                                                 |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">| test     | CREATE DATABASE &#96;test&#96; &#x2F;*!40100 DEFAULT CHARACTER SET gb2312 *&#x2F; |</span><br><span class=\"line\">+----------+-----------------------------------------------------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL修改数据表(ALTER TABLE语句)","keywords":"修改数据表，ALTER TABLE语句的使用","description":"修改数据表，ALTER TABLE语句的使用","cover":"https://tva2.sinaimg.cn/large/9fc55f55ly1gck1oj9wxdj20dc07877a.jpg","abbrlink":"e3461340","date":"2020-03-06T02:20:22.000Z","top_img":null,"copyright":null,"_content":"\n在MySQL中可以使用```ALTER TABLE```语句来改变原有表的结构，例如增加或删除减列、创建或取消索引、更改原有列类型、重新命名列或表等。\n\n# 基本语法\n\n修改表指的是修改数据库中已经存在的数据表的结构。MySQL 使用 ```ALTER TABLE``` 语句修改表。常用的修改表的操作有修改表名、修改字段数据类型或字段名、增加和删除字段、修改字段的排列位置、更改表的存储引擎、删除表的外键约束等。\n\n常用的语法格式如下：\n\n```mysql\nALTER TABLE <表名> [修改选项]\n```\n\n修改选项的语法格式如下：\n\n```mysql\n{ADD COLUMN <列名> <类型>\n| CHANGE COLUMN <旧列名> <新列名> <新列类型>\n| ALTER COLUMN  <列名>  { SET DEFAULT <默认值> | DROP DEFAULT }\n| MODIFY COLUMN <列名> <类型>\n| DROP COLUMN <列名>\n| RENAME TO <新表名>\n}\n```\n\n## 添加字段\n\n随着业务的变化，可能需要在已经存在的表中添加新的字段，一个完整的字段包括字段名、数据类型、完整性约束。添加字段的语法格式如下：\n\n```mysql\nALTER TABLE <表名> ADD COLUMN <新字段名> <数据类型> [约束条件] [FIRST|AFTER 已存在的字段名]；\n```\n\n>`新字段名`为需要添加的字段的名称；`FIRST` 为可选参数，其作用是将新添加的字段设置为表的第一个字段；`AFTER` 为可选参数，其作用是将新添加的字段添加到指定的`已存在的字段名`的后面。\n\n【实例1】使用ALTER TABLE修改表Student的结构，在表的第一列添加一个int类型的字段`age`，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student \n    -> add column s_age varchar(10) after s_name;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| s_id    | int(11)     | YES  |     | NULL    |       |\n| s_name  | varchar(50) | YES  |     | NULL    |       |\n| s_age   | varchar(10) | YES  |     | NULL    |       |\n| s_birth | varchar(30) | YES  |     | NULL    |       |\n| s_sex   | varchar(10) | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\n5 rows in set\n\nmysql> \n```\n\n## 添加主键\n\n为保证数据的完整性，每个数据表都不会存在重复的数据，所以需要对表添加一些约束条件，例如，主键约束，唯一约束等等。\n\n【实例2】使用`ALTER TABLE`修改表Student的结构，为表添加主键约束，并且设置属性`s_id`自动增长，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> modify column s_id int(11) primary key auto_increment;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-------------+------+-----+---------+----------------+\n| Field   | Type        | Null | Key | Default | Extra          |\n+---------+-------------+------+-----+---------+----------------+\n| s_id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| s_name  | varchar(50) | YES  |     | NULL    |                |\n| s_age   | varchar(10) | YES  |     | NULL    |                |\n| s_birth | varchar(30) | YES  |     | NULL    |                |\n| s_sex   | varchar(10) | YES  |     | NULL    |                |\n+---------+-------------+------+-----+---------+----------------+\n5 rows in set\n```\n\n## 修改字段类型\n\n有时候根据业务的需求，会对数据库的某个字段进行修改，例如`Student`中的`S_sex`字段存储是学生的性别，这种情况，只有两种要么是`男`要么是`女`。像这种情况，可以使用枚举类型存储。\n\n【实例3】把`Student`表中的`s_sex`属性类型修改成枚举，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> modify column s_sex enum('男','女');\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-----------------+------+-----+---------+----------------+\n| Field   | Type            | Null | Key | Default | Extra          |\n+---------+-----------------+------+-----+---------+----------------+\n| s_id    | int(11)         | NO   | PRI | NULL    | auto_increment |\n| s_name  | varchar(50)     | YES  |     | NULL    |                |\n| s_age   | varchar(10)     | YES  |     | NULL    |                |\n| s_birth | varchar(30)     | YES  |     | NULL    |                |\n| s_sex   | enum('男','女') | YES  |     | NULL    |                |\n+---------+-----------------+------+-----+---------+----------------+\n5 rows in set\n```\n\n## 删除字段\n\n表中的某个字段已经不需要了，要进行删除操作，可以使用如下命令：\n\n```mysql\nALTER TABLE <表名> DROP COLUMN <列名>\n```\n\n【实例4】把`Student`表中的`s_birth`字段删除，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> drop column s_birth;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+--------+-----------------+------+-----+---------+----------------+\n| Field  | Type            | Null | Key | Default | Extra          |\n+--------+-----------------+------+-----+---------+----------------+\n| s_id   | int(11)         | NO   | PRI | NULL    | auto_increment |\n| s_name | varchar(50)     | YES  |     | NULL    |                |\n| s_age  | varchar(10)     | YES  |     | NULL    |                |\n| s_sex  | enum('男','女') | YES  |     | NULL    |                |\n+--------+-----------------+------+-----+---------+----------------+\n4 rows in set\n```\n\n## 修改表名\n\nMySQL 通过 ALTER TABLE 语句来实现表名的修改，语法规则如下：\n\n```mysql\nALTER TABLE <旧表名> RENAME [TO] <新表名>；\n```\n\n其中，`TO` 为可选参数，使用与否均不影响结果。\n\n【实例5】使用 ALTER TABLE 将数据表 `Student`改名为 `Student2`，输入的 SQL 语句和运行结果如下所示\n\n```mysql\nmysql> alter table Student rename to Student2;\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n+----------------+\n1 row in set\n\nmysql> \n```\n\n","source":"_posts/MySQL修改数据表-ALTER-TABLE语句.md","raw":"---\ntitle: MySQL修改数据表(ALTER TABLE语句)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: 修改数据表，ALTER TABLE语句的使用\ndescription: 修改数据表，ALTER TABLE语句的使用\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55ly1gck1oj9wxdj20dc07877a.jpg'\nabbrlink: e3461340\ndate: 2020-03-06 10:20:22\ntop_img:\ncopyright:\n---\n\n在MySQL中可以使用```ALTER TABLE```语句来改变原有表的结构，例如增加或删除减列、创建或取消索引、更改原有列类型、重新命名列或表等。\n\n# 基本语法\n\n修改表指的是修改数据库中已经存在的数据表的结构。MySQL 使用 ```ALTER TABLE``` 语句修改表。常用的修改表的操作有修改表名、修改字段数据类型或字段名、增加和删除字段、修改字段的排列位置、更改表的存储引擎、删除表的外键约束等。\n\n常用的语法格式如下：\n\n```mysql\nALTER TABLE <表名> [修改选项]\n```\n\n修改选项的语法格式如下：\n\n```mysql\n{ADD COLUMN <列名> <类型>\n| CHANGE COLUMN <旧列名> <新列名> <新列类型>\n| ALTER COLUMN  <列名>  { SET DEFAULT <默认值> | DROP DEFAULT }\n| MODIFY COLUMN <列名> <类型>\n| DROP COLUMN <列名>\n| RENAME TO <新表名>\n}\n```\n\n## 添加字段\n\n随着业务的变化，可能需要在已经存在的表中添加新的字段，一个完整的字段包括字段名、数据类型、完整性约束。添加字段的语法格式如下：\n\n```mysql\nALTER TABLE <表名> ADD COLUMN <新字段名> <数据类型> [约束条件] [FIRST|AFTER 已存在的字段名]；\n```\n\n>`新字段名`为需要添加的字段的名称；`FIRST` 为可选参数，其作用是将新添加的字段设置为表的第一个字段；`AFTER` 为可选参数，其作用是将新添加的字段添加到指定的`已存在的字段名`的后面。\n\n【实例1】使用ALTER TABLE修改表Student的结构，在表的第一列添加一个int类型的字段`age`，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student \n    -> add column s_age varchar(10) after s_name;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| s_id    | int(11)     | YES  |     | NULL    |       |\n| s_name  | varchar(50) | YES  |     | NULL    |       |\n| s_age   | varchar(10) | YES  |     | NULL    |       |\n| s_birth | varchar(30) | YES  |     | NULL    |       |\n| s_sex   | varchar(10) | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\n5 rows in set\n\nmysql> \n```\n\n## 添加主键\n\n为保证数据的完整性，每个数据表都不会存在重复的数据，所以需要对表添加一些约束条件，例如，主键约束，唯一约束等等。\n\n【实例2】使用`ALTER TABLE`修改表Student的结构，为表添加主键约束，并且设置属性`s_id`自动增长，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> modify column s_id int(11) primary key auto_increment;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-------------+------+-----+---------+----------------+\n| Field   | Type        | Null | Key | Default | Extra          |\n+---------+-------------+------+-----+---------+----------------+\n| s_id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| s_name  | varchar(50) | YES  |     | NULL    |                |\n| s_age   | varchar(10) | YES  |     | NULL    |                |\n| s_birth | varchar(30) | YES  |     | NULL    |                |\n| s_sex   | varchar(10) | YES  |     | NULL    |                |\n+---------+-------------+------+-----+---------+----------------+\n5 rows in set\n```\n\n## 修改字段类型\n\n有时候根据业务的需求，会对数据库的某个字段进行修改，例如`Student`中的`S_sex`字段存储是学生的性别，这种情况，只有两种要么是`男`要么是`女`。像这种情况，可以使用枚举类型存储。\n\n【实例3】把`Student`表中的`s_sex`属性类型修改成枚举，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> modify column s_sex enum('男','女');\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+---------+-----------------+------+-----+---------+----------------+\n| Field   | Type            | Null | Key | Default | Extra          |\n+---------+-----------------+------+-----+---------+----------------+\n| s_id    | int(11)         | NO   | PRI | NULL    | auto_increment |\n| s_name  | varchar(50)     | YES  |     | NULL    |                |\n| s_age   | varchar(10)     | YES  |     | NULL    |                |\n| s_birth | varchar(30)     | YES  |     | NULL    |                |\n| s_sex   | enum('男','女') | YES  |     | NULL    |                |\n+---------+-----------------+------+-----+---------+----------------+\n5 rows in set\n```\n\n## 删除字段\n\n表中的某个字段已经不需要了，要进行删除操作，可以使用如下命令：\n\n```mysql\nALTER TABLE <表名> DROP COLUMN <列名>\n```\n\n【实例4】把`Student`表中的`s_birth`字段删除，输入的SQL语句和运行结果如下：\n\n```mysql\nmysql> alter table Student\n    -> drop column s_birth;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc Student;\n+--------+-----------------+------+-----+---------+----------------+\n| Field  | Type            | Null | Key | Default | Extra          |\n+--------+-----------------+------+-----+---------+----------------+\n| s_id   | int(11)         | NO   | PRI | NULL    | auto_increment |\n| s_name | varchar(50)     | YES  |     | NULL    |                |\n| s_age  | varchar(10)     | YES  |     | NULL    |                |\n| s_sex  | enum('男','女') | YES  |     | NULL    |                |\n+--------+-----------------+------+-----+---------+----------------+\n4 rows in set\n```\n\n## 修改表名\n\nMySQL 通过 ALTER TABLE 语句来实现表名的修改，语法规则如下：\n\n```mysql\nALTER TABLE <旧表名> RENAME [TO] <新表名>；\n```\n\n其中，`TO` 为可选参数，使用与否均不影响结果。\n\n【实例5】使用 ALTER TABLE 将数据表 `Student`改名为 `Student2`，输入的 SQL 语句和运行结果如下所示\n\n```mysql\nmysql> alter table Student rename to Student2;\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n+----------------+\n1 row in set\n\nmysql> \n```\n\n","slug":"MySQL修改数据表-ALTER-TABLE语句","published":1,"updated":"2020-03-07T08:57:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mu9000jtvm0cg3288l8","content":"<p>在MySQL中可以使用<code>ALTER TABLE</code>语句来改变原有表的结构，例如增加或删除减列、创建或取消索引、更改原有列类型、重新命名列或表等。</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>修改表指的是修改数据库中已经存在的数据表的结构。MySQL 使用 <code>ALTER TABLE</code> 语句修改表。常用的修改表的操作有修改表名、修改字段数据类型或字段名、增加和删除字段、修改字段的排列位置、更改表的存储引擎、删除表的外键约束等。</p>\n<p>常用的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; [修改选项]</span><br></pre></td></tr></table></figure></div>\n\n<p>修改选项的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;ADD COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class=\"line\">| CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt;</span><br><span class=\"line\">| ALTER COLUMN  &lt;列名&gt;  &#123; SET DEFAULT &lt;默认值&gt; | DROP DEFAULT &#125;</span><br><span class=\"line\">| MODIFY COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class=\"line\">| DROP COLUMN &lt;列名&gt;</span><br><span class=\"line\">| RENAME TO &lt;新表名&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h2><p>随着业务的变化，可能需要在已经存在的表中添加新的字段，一个完整的字段包括字段名、数据类型、完整性约束。添加字段的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;新字段名&gt; &lt;数据类型&gt; [约束条件] [FIRST|AFTER 已存在的字段名]；</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><code>新字段名</code>为需要添加的字段的名称；<code>FIRST</code> 为可选参数，其作用是将新添加的字段设置为表的第一个字段；<code>AFTER</code> 为可选参数，其作用是将新添加的字段添加到指定的<code>已存在的字段名</code>的后面。</p>\n</blockquote>\n<p>【实例1】使用ALTER TABLE修改表Student的结构，在表的第一列添加一个int类型的字段<code>age</code>，输入的SQL语句和运行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student </span><br><span class=\"line\">    -&gt; add column s_age varchar(10) after s_name;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| s_id    | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_age   | varchar(10) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_birth | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_sex   | varchar(10) | YES  |     | NULL    |       |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">5 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"添加主键\"><a href=\"#添加主键\" class=\"headerlink\" title=\"添加主键\"></a>添加主键</h2><p>为保证数据的完整性，每个数据表都不会存在重复的数据，所以需要对表添加一些约束条件，例如，主键约束，唯一约束等等。</p>\n<p>【实例2】使用<code>ALTER TABLE</code>修改表Student的结构，为表添加主键约束，并且设置属性<code>s_id</code>自动增长，输入的SQL语句和运行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; modify column s_id int(11) primary key auto_increment;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type        | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name  | varchar(50) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age   | varchar(10) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_birth | varchar(30) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex   | varchar(10) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"修改字段类型\"><a href=\"#修改字段类型\" class=\"headerlink\" title=\"修改字段类型\"></a>修改字段类型</h2><p>有时候根据业务的需求，会对数据库的某个字段进行修改，例如<code>Student</code>中的<code>S_sex</code>字段存储是学生的性别，这种情况，只有两种要么是<code>男</code>要么是<code>女</code>。像这种情况，可以使用枚举类型存储。</p>\n<p>【实例3】把<code>Student</code>表中的<code>s_sex</code>属性类型修改成枚举，输入的SQL语句和运行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; modify column s_sex enum(&#39;男&#39;,&#39;女&#39;);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type            | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id    | int(11)         | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name  | varchar(50)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age   | varchar(10)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_birth | varchar(30)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex   | enum(&#39;男&#39;,&#39;女&#39;) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h2><p>表中的某个字段已经不需要了，要进行删除操作，可以使用如下命令：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例4】把<code>Student</code>表中的<code>s_birth</code>字段删除，输入的SQL语句和运行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; drop column s_birth;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field  | Type            | Null | Key | Default | Extra          |</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id   | int(11)         | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name | varchar(50)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age  | varchar(10)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex  | enum(&#39;男&#39;,&#39;女&#39;) | YES  |     | NULL    |                |</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h2><p>MySQL 通过 ALTER TABLE 语句来实现表名的修改，语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;旧表名&gt; RENAME [TO] &lt;新表名&gt;；</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，<code>TO</code> 为可选参数，使用与否均不影响结果。</p>\n<p>【实例5】使用 ALTER TABLE 将数据表 <code>Student</code>改名为 <code>Student2</code>，输入的 SQL 语句和运行结果如下所示</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student rename to Student2;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在MySQL中可以使用<code>ALTER TABLE</code>语句来改变原有表的结构，例如增加或删除减列、创建或取消索引、更改原有列类型、重新命名列或表等。</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>修改表指的是修改数据库中已经存在的数据表的结构。MySQL 使用 <code>ALTER TABLE</code> 语句修改表。常用的修改表的操作有修改表名、修改字段数据类型或字段名、增加和删除字段、修改字段的排列位置、更改表的存储引擎、删除表的外键约束等。</p>\n<p>常用的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; [修改选项]</span><br></pre></td></tr></table></figure>\n\n<p>修改选项的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;ADD COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class=\"line\">| CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt;</span><br><span class=\"line\">| ALTER COLUMN  &lt;列名&gt;  &#123; SET DEFAULT &lt;默认值&gt; | DROP DEFAULT &#125;</span><br><span class=\"line\">| MODIFY COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class=\"line\">| DROP COLUMN &lt;列名&gt;</span><br><span class=\"line\">| RENAME TO &lt;新表名&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h2><p>随着业务的变化，可能需要在已经存在的表中添加新的字段，一个完整的字段包括字段名、数据类型、完整性约束。添加字段的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;新字段名&gt; &lt;数据类型&gt; [约束条件] [FIRST|AFTER 已存在的字段名]；</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>新字段名</code>为需要添加的字段的名称；<code>FIRST</code> 为可选参数，其作用是将新添加的字段设置为表的第一个字段；<code>AFTER</code> 为可选参数，其作用是将新添加的字段添加到指定的<code>已存在的字段名</code>的后面。</p>\n</blockquote>\n<p>【实例1】使用ALTER TABLE修改表Student的结构，在表的第一列添加一个int类型的字段<code>age</code>，输入的SQL语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student </span><br><span class=\"line\">    -&gt; add column s_age varchar(10) after s_name;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| s_id    | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_age   | varchar(10) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_birth | varchar(30) | YES  |     | NULL    |       |</span><br><span class=\"line\">| s_sex   | varchar(10) | YES  |     | NULL    |       |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">5 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加主键\"><a href=\"#添加主键\" class=\"headerlink\" title=\"添加主键\"></a>添加主键</h2><p>为保证数据的完整性，每个数据表都不会存在重复的数据，所以需要对表添加一些约束条件，例如，主键约束，唯一约束等等。</p>\n<p>【实例2】使用<code>ALTER TABLE</code>修改表Student的结构，为表添加主键约束，并且设置属性<code>s_id</code>自动增长，输入的SQL语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; modify column s_id int(11) primary key auto_increment;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type        | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name  | varchar(50) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age   | varchar(10) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_birth | varchar(30) | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex   | varchar(10) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+-------------+------+-----+---------+----------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改字段类型\"><a href=\"#修改字段类型\" class=\"headerlink\" title=\"修改字段类型\"></a>修改字段类型</h2><p>有时候根据业务的需求，会对数据库的某个字段进行修改，例如<code>Student</code>中的<code>S_sex</code>字段存储是学生的性别，这种情况，只有两种要么是<code>男</code>要么是<code>女</code>。像这种情况，可以使用枚举类型存储。</p>\n<p>【实例3】把<code>Student</code>表中的<code>s_sex</code>属性类型修改成枚举，输入的SQL语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; modify column s_sex enum(&#39;男&#39;,&#39;女&#39;);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type            | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id    | int(11)         | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name  | varchar(50)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age   | varchar(10)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_birth | varchar(30)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex   | enum(&#39;男&#39;,&#39;女&#39;) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h2><p>表中的某个字段已经不需要了，要进行删除操作，可以使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>【实例4】把<code>Student</code>表中的<code>s_birth</code>字段删除，输入的SQL语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student</span><br><span class=\"line\">    -&gt; drop column s_birth;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc Student;</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field  | Type            | Null | Key | Default | Extra          |</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">| s_id   | int(11)         | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| s_name | varchar(50)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_age  | varchar(10)     | YES  |     | NULL    |                |</span><br><span class=\"line\">| s_sex  | enum(&#39;男&#39;,&#39;女&#39;) | YES  |     | NULL    |                |</span><br><span class=\"line\">+--------+-----------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h2><p>MySQL 通过 ALTER TABLE 语句来实现表名的修改，语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;旧表名&gt; RENAME [TO] &lt;新表名&gt;；</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>TO</code> 为可选参数，使用与否均不影响结果。</p>\n<p>【实例5】使用 ALTER TABLE 将数据表 <code>Student</code>改名为 <code>Student2</code>，输入的 SQL 语句和运行结果如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table Student rename to Student2;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL创建数据库(CREATE DATABASE语句)","keywords":"MySQL创建数据库","description":"使用CREATE DATABASE","cover":"http://tvax4.sinaimg.cn/large/9fc55f55gy1gcdgxsllv3j20e6080mx8.jpg","abbrlink":"3d972e7d","date":"2020-02-29T04:46:12.000Z","top_img":null,"copyright":null,"_content":"\n### 创建数据库基本语法\n\n在 MySQL中，可以使用**CREATE DATABASE**语句创建数据库，语法格式如下：\n\n```mysql\n CREATE DATABASE [IF NOT EXISTS] <数据库名>\n [[DEFAULT] CHARACTER SET <字符集名>] \n [[DEFAULT] COLLATE <校对规则名>]; \n```\n\n`[ ]`中的内容是可选的。语法说明如下：\n-  <数据库名>：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，不能以数字开头，尽量要有实际意义。注意在 MySQL 中不区分大小写。\n-  IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。\n-  [DEFAULT] CHARACTER SET：指定数据库的字符集。指定字符集的目的是为了避免在数据库中存储的数据出现乱码的情况。如果在创建数据库时不指定字符集，那么就使用系统的默认字符集。\n-  [DEFAULT] COLLATE：指定字符集的默认校对规则。\n\n\n\n> MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。后面我们会单独讲解 MySQL 的字符集和校对规则。\n\n###  实例详解\n\n#### 实例1：最简单的创建 MySQL 数据库的语句\n\n 在 MySQL 中创建一个名为 test_db 的数据库。在 MySQL 命令行客户端输入 SQL 语句`CREATE DATABASE test_db;`\n\n```mysql\n mysql> CREATE DATABASE test_db;\n Query OK, 1 row affected (0.12 sec);\n```\n\n若再次输入`CREATE DATABASE test_db;`语句，则系统会给出错误提示信息，如下所示：\n\n```mysql\n mysql> CREATE DATABASE test_db;\n ERROR 1007 (HY000): Can't create database 'test_db'; database exists\n```\n\n 提示不能创建“test_db”数据库，数据库已存在。MySQL 不允许在同一系统下创建两个相同名称的数据库\n\n可以加上`IF NOT EXISTS`从句，就可以避免类似错误，如下所示：\n\n```mysql\n mysql> CREATE DATABASE IF NOT EXISTS test_db;\n Query OK, 1 row affected (0.12 sec)\n```\n\n####  实例2：创建 MySQL 数据库时指定字符集和校对规则\n\n 使用 MySQL 命令行工具创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写），输入的 SQL 语句与执行结果如下所示： \n\n```mysql\n mysql> CREATE DATABASE IF NOT EXISTS test_db_char\n     -> DEFAULT CHARACTER SET utf8\n     -> DEFAULT COLLATE utf8_chinese_ci;\n Query OK, 1 row affected (0.03 sec)\n```\n\n 这时，可以使用`SHOW CREATE DATABASE`\n\n```\nmysql> SHOW CREATE DATABASE test_db_char;\n+--------------+-----------------------------------------------------+\n| Database     | Create Database                                     |\n+--------------+-----------------------------------------------------+\n| test_db_char | CREATE DATABASE `test_db_char` /*!40100 DEFAULT CHARACTER SET utf8 */ |\n+--------------+-----------------------------------------------------+\n1 row in set (0.00 sec)\n```","source":"_posts/MySQL创建数据库-CREATE-DATABASE语句.md","raw":"---\ntitle: MySQL创建数据库(CREATE DATABASE语句)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: MySQL创建数据库\ndescription: 使用CREATE DATABASE\ncover: 'http://tvax4.sinaimg.cn/large/9fc55f55gy1gcdgxsllv3j20e6080mx8.jpg'\nabbrlink: 3d972e7d\ndate: 2020-02-29 12:46:12\ntop_img:\ncopyright:\n---\n\n### 创建数据库基本语法\n\n在 MySQL中，可以使用**CREATE DATABASE**语句创建数据库，语法格式如下：\n\n```mysql\n CREATE DATABASE [IF NOT EXISTS] <数据库名>\n [[DEFAULT] CHARACTER SET <字符集名>] \n [[DEFAULT] COLLATE <校对规则名>]; \n```\n\n`[ ]`中的内容是可选的。语法说明如下：\n-  <数据库名>：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，不能以数字开头，尽量要有实际意义。注意在 MySQL 中不区分大小写。\n-  IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。\n-  [DEFAULT] CHARACTER SET：指定数据库的字符集。指定字符集的目的是为了避免在数据库中存储的数据出现乱码的情况。如果在创建数据库时不指定字符集，那么就使用系统的默认字符集。\n-  [DEFAULT] COLLATE：指定字符集的默认校对规则。\n\n\n\n> MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。后面我们会单独讲解 MySQL 的字符集和校对规则。\n\n###  实例详解\n\n#### 实例1：最简单的创建 MySQL 数据库的语句\n\n 在 MySQL 中创建一个名为 test_db 的数据库。在 MySQL 命令行客户端输入 SQL 语句`CREATE DATABASE test_db;`\n\n```mysql\n mysql> CREATE DATABASE test_db;\n Query OK, 1 row affected (0.12 sec);\n```\n\n若再次输入`CREATE DATABASE test_db;`语句，则系统会给出错误提示信息，如下所示：\n\n```mysql\n mysql> CREATE DATABASE test_db;\n ERROR 1007 (HY000): Can't create database 'test_db'; database exists\n```\n\n 提示不能创建“test_db”数据库，数据库已存在。MySQL 不允许在同一系统下创建两个相同名称的数据库\n\n可以加上`IF NOT EXISTS`从句，就可以避免类似错误，如下所示：\n\n```mysql\n mysql> CREATE DATABASE IF NOT EXISTS test_db;\n Query OK, 1 row affected (0.12 sec)\n```\n\n####  实例2：创建 MySQL 数据库时指定字符集和校对规则\n\n 使用 MySQL 命令行工具创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写），输入的 SQL 语句与执行结果如下所示： \n\n```mysql\n mysql> CREATE DATABASE IF NOT EXISTS test_db_char\n     -> DEFAULT CHARACTER SET utf8\n     -> DEFAULT COLLATE utf8_chinese_ci;\n Query OK, 1 row affected (0.03 sec)\n```\n\n 这时，可以使用`SHOW CREATE DATABASE`\n\n```\nmysql> SHOW CREATE DATABASE test_db_char;\n+--------------+-----------------------------------------------------+\n| Database     | Create Database                                     |\n+--------------+-----------------------------------------------------+\n| test_db_char | CREATE DATABASE `test_db_char` /*!40100 DEFAULT CHARACTER SET utf8 */ |\n+--------------+-----------------------------------------------------+\n1 row in set (0.00 sec)\n```","slug":"MySQL创建数据库-CREATE-DATABASE语句","published":1,"updated":"2020-02-29T13:37:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7muc000otvm0gii5hzv8","content":"<h3 id=\"创建数据库基本语法\"><a href=\"#创建数据库基本语法\" class=\"headerlink\" title=\"创建数据库基本语法\"></a>创建数据库基本语法</h3><p>在 MySQL中，可以使用<strong>CREATE DATABASE</strong>语句创建数据库，语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;</span><br><span class=\"line\">[[DEFAULT] CHARACTER SET &lt;字符集名&gt;] </span><br><span class=\"line\">[[DEFAULT] COLLATE &lt;校对规则名&gt;];</span><br></pre></td></tr></table></figure></div>\n\n<p><code>[ ]</code>中的内容是可选的。语法说明如下：</p>\n<ul>\n<li>&lt;数据库名&gt;：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，不能以数字开头，尽量要有实际意义。注意在 MySQL 中不区分大小写。</li>\n<li>IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。</li>\n<li>[DEFAULT] CHARACTER SET：指定数据库的字符集。指定字符集的目的是为了避免在数据库中存储的数据出现乱码的情况。如果在创建数据库时不指定字符集，那么就使用系统的默认字符集。</li>\n<li>[DEFAULT] COLLATE：指定字符集的默认校对规则。</li>\n</ul>\n<blockquote>\n<p>MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。后面我们会单独讲解 MySQL 的字符集和校对规则。</p>\n</blockquote>\n<h3 id=\"实例详解\"><a href=\"#实例详解\" class=\"headerlink\" title=\"实例详解\"></a>实例详解</h3><h4 id=\"实例1：最简单的创建-MySQL-数据库的语句\"><a href=\"#实例1：最简单的创建-MySQL-数据库的语句\" class=\"headerlink\" title=\"实例1：最简单的创建 MySQL 数据库的语句\"></a>实例1：最简单的创建 MySQL 数据库的语句</h4><p> 在 MySQL 中创建一个名为 test_db 的数据库。在 MySQL 命令行客户端输入 SQL 语句<code>CREATE DATABASE test_db;</code></p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE test_db;</span><br><span class=\"line\">Query OK, 1 row affected (0.12 sec);</span><br></pre></td></tr></table></figure></div>\n\n<p>若再次输入<code>CREATE DATABASE test_db;</code>语句，则系统会给出错误提示信息，如下所示：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE test_db;</span><br><span class=\"line\">ERROR 1007 (HY000): Can&#39;t create database &#39;test_db&#39;; database exists</span><br></pre></td></tr></table></figure></div>\n\n<p> 提示不能创建“test_db”数据库，数据库已存在。MySQL 不允许在同一系统下创建两个相同名称的数据库</p>\n<p>可以加上<code>IF NOT EXISTS</code>从句，就可以避免类似错误，如下所示：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS test_db;</span><br><span class=\"line\">Query OK, 1 row affected (0.12 sec)</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"实例2：创建-MySQL-数据库时指定字符集和校对规则\"><a href=\"#实例2：创建-MySQL-数据库时指定字符集和校对规则\" class=\"headerlink\" title=\"实例2：创建 MySQL 数据库时指定字符集和校对规则\"></a>实例2：创建 MySQL 数据库时指定字符集和校对规则</h4><p> 使用 MySQL 命令行工具创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写），输入的 SQL 语句与执行结果如下所示： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS test_db_char</span><br><span class=\"line\">    -&gt; DEFAULT CHARACTER SET utf8</span><br><span class=\"line\">    -&gt; DEFAULT COLLATE utf8_chinese_ci;</span><br><span class=\"line\">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure></div>\n\n<p> 这时，可以使用<code>SHOW CREATE DATABASE</code></p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW CREATE DATABASE test_db_char;</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">| Database     | Create Database                                     |</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">| test_db_char | CREATE DATABASE &#96;test_db_char&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F; |</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h3 id=\"创建数据库基本语法\"><a href=\"#创建数据库基本语法\" class=\"headerlink\" title=\"创建数据库基本语法\"></a>创建数据库基本语法</h3><p>在 MySQL中，可以使用<strong>CREATE DATABASE</strong>语句创建数据库，语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;</span><br><span class=\"line\">[[DEFAULT] CHARACTER SET &lt;字符集名&gt;] </span><br><span class=\"line\">[[DEFAULT] COLLATE &lt;校对规则名&gt;];</span><br></pre></td></tr></table></figure>\n\n<p><code>[ ]</code>中的内容是可选的。语法说明如下：</p>\n<ul>\n<li>&lt;数据库名&gt;：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，不能以数字开头，尽量要有实际意义。注意在 MySQL 中不区分大小写。</li>\n<li>IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。</li>\n<li>[DEFAULT] CHARACTER SET：指定数据库的字符集。指定字符集的目的是为了避免在数据库中存储的数据出现乱码的情况。如果在创建数据库时不指定字符集，那么就使用系统的默认字符集。</li>\n<li>[DEFAULT] COLLATE：指定字符集的默认校对规则。</li>\n</ul>\n<blockquote>\n<p>MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。后面我们会单独讲解 MySQL 的字符集和校对规则。</p>\n</blockquote>\n<h3 id=\"实例详解\"><a href=\"#实例详解\" class=\"headerlink\" title=\"实例详解\"></a>实例详解</h3><h4 id=\"实例1：最简单的创建-MySQL-数据库的语句\"><a href=\"#实例1：最简单的创建-MySQL-数据库的语句\" class=\"headerlink\" title=\"实例1：最简单的创建 MySQL 数据库的语句\"></a>实例1：最简单的创建 MySQL 数据库的语句</h4><p> 在 MySQL 中创建一个名为 test_db 的数据库。在 MySQL 命令行客户端输入 SQL 语句<code>CREATE DATABASE test_db;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE test_db;</span><br><span class=\"line\">Query OK, 1 row affected (0.12 sec);</span><br></pre></td></tr></table></figure>\n\n<p>若再次输入<code>CREATE DATABASE test_db;</code>语句，则系统会给出错误提示信息，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE test_db;</span><br><span class=\"line\">ERROR 1007 (HY000): Can&#39;t create database &#39;test_db&#39;; database exists</span><br></pre></td></tr></table></figure>\n\n<p> 提示不能创建“test_db”数据库，数据库已存在。MySQL 不允许在同一系统下创建两个相同名称的数据库</p>\n<p>可以加上<code>IF NOT EXISTS</code>从句，就可以避免类似错误，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS test_db;</span><br><span class=\"line\">Query OK, 1 row affected (0.12 sec)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例2：创建-MySQL-数据库时指定字符集和校对规则\"><a href=\"#实例2：创建-MySQL-数据库时指定字符集和校对规则\" class=\"headerlink\" title=\"实例2：创建 MySQL 数据库时指定字符集和校对规则\"></a>实例2：创建 MySQL 数据库时指定字符集和校对规则</h4><p> 使用 MySQL 命令行工具创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写），输入的 SQL 语句与执行结果如下所示： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE DATABASE IF NOT EXISTS test_db_char</span><br><span class=\"line\">    -&gt; DEFAULT CHARACTER SET utf8</span><br><span class=\"line\">    -&gt; DEFAULT COLLATE utf8_chinese_ci;</span><br><span class=\"line\">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>\n\n<p> 这时，可以使用<code>SHOW CREATE DATABASE</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW CREATE DATABASE test_db_char;</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">| Database     | Create Database                                     |</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">| test_db_char | CREATE DATABASE &#96;test_db_char&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F; |</span><br><span class=\"line\">+--------------+-----------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"title":"MySQL创建数据表(CREATE TABLE语句)","keywords":"Mysql创建数据表 CREATE TABLE","description":"Mysql创建数据表 CREATE TABLE","cover":"https://tvax2.sinaimg.cn/large/9fc55f55ly1gchnfdherpj20dw08pq32.jpg","abbrlink":"ba34c15b","date":"2020-03-04T01:21:07.000Z","top_img":null,"copyright":null,"_content":"\n# 基本语法\n\n在MySQL中，可以使用```CREATE TABLE```语句创建表。其语法格式：\n\n```MYSQL\nCREATE TABLE <表名> ([表定义选项])[表选项][分区选项];\n```\n\n> CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。\n\n# 在指定的数据库中创建表\n\n数据表属于数据库，在创建数据表之前，应使用```USE<数据库>```指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出```No databases seleted```的错误\n\n实例1   创建员工tb_emp1,结构如下表\n\n| 字段名称 | 数据类型    | 备注         |\n| -------- | ----------- | ------------ |\n| id       | INT(ll)     | 员工编号     |\n| name     | VARCHAR(25) | 员工名称     |\n| deptld   | INT(ll)     | 所在部门编号 |\n| salary   | FLOAT       | 工资         |\n\n选择创建表的数据库 test_db，创建 tb_emp1 数据表，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> use test_db;\nDatabase changed\nmysql> create table tb_emp1\n    -> (\n    -> id int(11) comment '员工编号',\n    -> name varchar(25) comment '员工名称',\n    -> depId int(11) comment '所在部门编号',\n    -> salary float comment '工资'\n    -> );\nQuery OK, 0 rows affected\n\nmysql> \n```\n\n语句执行后，便创建了一个名称为 tb_emp1 的数据表，使用 SHOW TABLES；语句查看数据表是否创建成功，如下所示。\n\n```MYSQL\nmysql> show tables;\n+-------------------+\n| Tables_in_test_db |\n+-------------------+\n| tb_emp1           |\n+-------------------+\n1 row in set\n\nmysql> \n```\n\n# 查看表结构\n\n在 MySQL 中，使用 SQL 语句创建好数据表之后，可以查看结构的定义，以确认表的定义是否正确。在 MySQL 中，查看表结构可以使用 ```DESCRIBE``` 和 ```SHOW CREATE TABLE``` 语句。\n\n```MYSQL\nDESCRIBE <表名>; 简写 DESC <表名>\n```\n\n使用 DESCRIBE 查看表 tb_emp1 的结构，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> desc tb_emp1;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| id     | int(11)     | YES  |     | NULL    |       |\n| name   | varchar(25) | YES  |     | NULL    |       |\n| depId  | int(11)     | YES  |     | NULL    |       |\n| salary | float       | YES  |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set\n\nmysql> \n```\n\n>其中，各个字段的含义如下： \n>\n>-  Null：表示该列是否可以存储 NULL 值。\n>-  Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。\n>-  Default：表示该列是否有默认值，如果有，值是多少。\n>-  Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。\n\nSHOW CREATE TABLE语句可以用来显示创建表时的CREATE TABLE语句，语法格式如下\n\n```MYSQL\nSHOW CREATE TABLE <表名>\\G；\n```\n\n","source":"_posts/MySQL创建数据表-CREATE-TABLE语句.md","raw":"---\ntitle: MySQL创建数据表(CREATE TABLE语句)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql创建数据表 CREATE TABLE\ndescription: Mysql创建数据表 CREATE TABLE\ncover: 'https://tvax2.sinaimg.cn/large/9fc55f55ly1gchnfdherpj20dw08pq32.jpg'\nabbrlink: ba34c15b\ndate: 2020-03-04 09:21:07\ntop_img:\ncopyright:\n---\n\n# 基本语法\n\n在MySQL中，可以使用```CREATE TABLE```语句创建表。其语法格式：\n\n```MYSQL\nCREATE TABLE <表名> ([表定义选项])[表选项][分区选项];\n```\n\n> CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。\n\n# 在指定的数据库中创建表\n\n数据表属于数据库，在创建数据表之前，应使用```USE<数据库>```指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出```No databases seleted```的错误\n\n实例1   创建员工tb_emp1,结构如下表\n\n| 字段名称 | 数据类型    | 备注         |\n| -------- | ----------- | ------------ |\n| id       | INT(ll)     | 员工编号     |\n| name     | VARCHAR(25) | 员工名称     |\n| deptld   | INT(ll)     | 所在部门编号 |\n| salary   | FLOAT       | 工资         |\n\n选择创建表的数据库 test_db，创建 tb_emp1 数据表，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> use test_db;\nDatabase changed\nmysql> create table tb_emp1\n    -> (\n    -> id int(11) comment '员工编号',\n    -> name varchar(25) comment '员工名称',\n    -> depId int(11) comment '所在部门编号',\n    -> salary float comment '工资'\n    -> );\nQuery OK, 0 rows affected\n\nmysql> \n```\n\n语句执行后，便创建了一个名称为 tb_emp1 的数据表，使用 SHOW TABLES；语句查看数据表是否创建成功，如下所示。\n\n```MYSQL\nmysql> show tables;\n+-------------------+\n| Tables_in_test_db |\n+-------------------+\n| tb_emp1           |\n+-------------------+\n1 row in set\n\nmysql> \n```\n\n# 查看表结构\n\n在 MySQL 中，使用 SQL 语句创建好数据表之后，可以查看结构的定义，以确认表的定义是否正确。在 MySQL 中，查看表结构可以使用 ```DESCRIBE``` 和 ```SHOW CREATE TABLE``` 语句。\n\n```MYSQL\nDESCRIBE <表名>; 简写 DESC <表名>\n```\n\n使用 DESCRIBE 查看表 tb_emp1 的结构，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> desc tb_emp1;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| id     | int(11)     | YES  |     | NULL    |       |\n| name   | varchar(25) | YES  |     | NULL    |       |\n| depId  | int(11)     | YES  |     | NULL    |       |\n| salary | float       | YES  |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set\n\nmysql> \n```\n\n>其中，各个字段的含义如下： \n>\n>-  Null：表示该列是否可以存储 NULL 值。\n>-  Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。\n>-  Default：表示该列是否有默认值，如果有，值是多少。\n>-  Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。\n\nSHOW CREATE TABLE语句可以用来显示创建表时的CREATE TABLE语句，语法格式如下\n\n```MYSQL\nSHOW CREATE TABLE <表名>\\G；\n```\n\n","slug":"MySQL创建数据表-CREATE-TABLE语句","published":1,"updated":"2020-03-04T01:42:58.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mud000rtvm05wwmamxu","content":"<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>在MySQL中，可以使用<code>CREATE TABLE</code>语句创建表。其语法格式：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &lt;表名&gt; ([表定义选项])[表选项][分区选项];</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。</p>\n</blockquote>\n<h1 id=\"在指定的数据库中创建表\"><a href=\"#在指定的数据库中创建表\" class=\"headerlink\" title=\"在指定的数据库中创建表\"></a>在指定的数据库中创建表</h1><p>数据表属于数据库，在创建数据表之前，应使用<code>USE&lt;数据库&gt;</code>指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出<code>No databases seleted</code>的错误</p>\n<p>实例1   创建员工tb_emp1,结构如下表</p>\n<table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>数据类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>INT(ll)</td>\n<td>员工编号</td>\n</tr>\n<tr>\n<td>name</td>\n<td>VARCHAR(25)</td>\n<td>员工名称</td>\n</tr>\n<tr>\n<td>deptld</td>\n<td>INT(ll)</td>\n<td>所在部门编号</td>\n</tr>\n<tr>\n<td>salary</td>\n<td>FLOAT</td>\n<td>工资</td>\n</tr>\n</tbody></table>\n<p>选择创建表的数据库 test_db，创建 tb_emp1 数据表，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use test_db;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; create table tb_emp1</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) comment &#39;员工编号&#39;,</span><br><span class=\"line\">    -&gt; name varchar(25) comment &#39;员工名称&#39;,</span><br><span class=\"line\">    -&gt; depId int(11) comment &#39;所在部门编号&#39;,</span><br><span class=\"line\">    -&gt; salary float comment &#39;工资&#39;</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>语句执行后，便创建了一个名称为 tb_emp1 的数据表，使用 SHOW TABLES；语句查看数据表是否创建成功，如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| Tables_in_test_db |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| tb_emp1           |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h1><p>在 MySQL 中，使用 SQL 语句创建好数据表之后，可以查看结构的定义，以确认表的定义是否正确。在 MySQL 中，查看表结构可以使用 <code>DESCRIBE</code> 和 <code>SHOW CREATE TABLE</code> 语句。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DESCRIBE &lt;表名&gt;; 简写 DESC &lt;表名&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>使用 DESCRIBE 查看表 tb_emp1 的结构，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc tb_emp1;</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| name   | varchar(25) | YES  |     | NULL    |       |</span><br><span class=\"line\">| depId  | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| salary | float       | YES  |     | NULL    |       |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>其中，各个字段的含义如下： </p>\n<ul>\n<li>Null：表示该列是否可以存储 NULL 值。</li>\n<li>Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。</li>\n<li>Default：表示该列是否有默认值，如果有，值是多少。</li>\n<li>Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。</li>\n</ul>\n</blockquote>\n<p>SHOW CREATE TABLE语句可以用来显示创建表时的CREATE TABLE语句，语法格式如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE &lt;表名&gt;\\G；</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>在MySQL中，可以使用<code>CREATE TABLE</code>语句创建表。其语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &lt;表名&gt; ([表定义选项])[表选项][分区选项];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。</p>\n</blockquote>\n<h1 id=\"在指定的数据库中创建表\"><a href=\"#在指定的数据库中创建表\" class=\"headerlink\" title=\"在指定的数据库中创建表\"></a>在指定的数据库中创建表</h1><p>数据表属于数据库，在创建数据表之前，应使用<code>USE&lt;数据库&gt;</code>指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出<code>No databases seleted</code>的错误</p>\n<p>实例1   创建员工tb_emp1,结构如下表</p>\n<table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>数据类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>INT(ll)</td>\n<td>员工编号</td>\n</tr>\n<tr>\n<td>name</td>\n<td>VARCHAR(25)</td>\n<td>员工名称</td>\n</tr>\n<tr>\n<td>deptld</td>\n<td>INT(ll)</td>\n<td>所在部门编号</td>\n</tr>\n<tr>\n<td>salary</td>\n<td>FLOAT</td>\n<td>工资</td>\n</tr>\n</tbody></table>\n<p>选择创建表的数据库 test_db，创建 tb_emp1 数据表，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use test_db;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; create table tb_emp1</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) comment &#39;员工编号&#39;,</span><br><span class=\"line\">    -&gt; name varchar(25) comment &#39;员工名称&#39;,</span><br><span class=\"line\">    -&gt; depId int(11) comment &#39;所在部门编号&#39;,</span><br><span class=\"line\">    -&gt; salary float comment &#39;工资&#39;</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>语句执行后，便创建了一个名称为 tb_emp1 的数据表，使用 SHOW TABLES；语句查看数据表是否创建成功，如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| Tables_in_test_db |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| tb_emp1           |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h1><p>在 MySQL 中，使用 SQL 语句创建好数据表之后，可以查看结构的定义，以确认表的定义是否正确。在 MySQL 中，查看表结构可以使用 <code>DESCRIBE</code> 和 <code>SHOW CREATE TABLE</code> 语句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DESCRIBE &lt;表名&gt;; 简写 DESC &lt;表名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用 DESCRIBE 查看表 tb_emp1 的结构，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc tb_emp1;</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| name   | varchar(25) | YES  |     | NULL    |       |</span><br><span class=\"line\">| depId  | int(11)     | YES  |     | NULL    |       |</span><br><span class=\"line\">| salary | float       | YES  |     | NULL    |       |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中，各个字段的含义如下： </p>\n<ul>\n<li>Null：表示该列是否可以存储 NULL 值。</li>\n<li>Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。</li>\n<li>Default：表示该列是否有默认值，如果有，值是多少。</li>\n<li>Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。</li>\n</ul>\n</blockquote>\n<p>SHOW CREATE TABLE语句可以用来显示创建表时的CREATE TABLE语句，语法格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE &lt;表名&gt;\\G；</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL删除数据表","keywords":"Mysql删除数据表 DROP TABLE","description":"Mysql删除数据表 DROP TABLE","cover":"https://tva2.sinaimg.cn/large/9fc55f55gy1gclj2vba2bj20dv08owen.jpg","abbrlink":"b967e26d","date":"2020-03-07T09:26:28.000Z","top_img":null,"copyright":null,"_content":"\n在MySQL数据库中，对于不在需要的数据表，可以将其从数据库中删除。\n\n在删除表的同时，表的结构和表的所有的数据都会被删除，因此在删除表之前最好先备份，以避免造成无法换回的损失。\n\n下面我们来了解一下 MySQL 数据库中数据表的删除方法。\n\n# 基本语法\n\n使用 ```DROP TABLE``` 语句可以删除一个或多个数据表，语法格式如下：\n\n```mysql\nDROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 ...]\n```\n\n> 两点注意： \n>\n> -  用户必须拥有执行 DROP TABLE 命令的权限，否则数据表不会被删除。\n> -  表被删除时，用户在该表上的权限不会自动删除。\n\n#  删除表的实例\n\n## 【实例1】\n\n选择数据库 test，创建tb_test 数据表，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table tb_test\n    -> (\n    -> id int(11) primary key auto_increment,\n    -> name varchar(50)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n| tb_test        |\n+----------------+\n2 rows in set\n\nmysql> \n```\n\n由运行结果可以看出，test 数据库中有 tb_test 和 student2 两张数据表。\n\n删除数据表 tb_test ，输入的 SQL 语句和运行结果如下所示：\n\n```mysql\nmysql> drop table tb_test;\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n+----------------+\n1 row in set\n\nmysql> \n```\n\n## 【实例2】\n\n当删除一个不存在的数据库会报错，如下：\n\n```mysql\nmysql> drop table tb_test;\n1051 - Unknown table 'test.tb_test'\nmysql> \n```\n\n这时，可以使用如下的SQL语句执行\n\n```mysql\nmysql> drop table if exists tb_test;\nQuery OK, 0 rows affected\n\nmysql> \n```\n\n在`drop table `后面加上`if exists`之后，意思就是如何判断是否存在这个数据表，如何有，就执行删除。","source":"_posts/MySQL删除数据表.md","raw":"---\ntitle: MySQL删除数据表\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql删除数据表 DROP TABLE\ndescription: Mysql删除数据表 DROP TABLE\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55gy1gclj2vba2bj20dv08owen.jpg'\nabbrlink: b967e26d\ndate: 2020-03-07 17:26:28\ntop_img:\ncopyright:\n---\n\n在MySQL数据库中，对于不在需要的数据表，可以将其从数据库中删除。\n\n在删除表的同时，表的结构和表的所有的数据都会被删除，因此在删除表之前最好先备份，以避免造成无法换回的损失。\n\n下面我们来了解一下 MySQL 数据库中数据表的删除方法。\n\n# 基本语法\n\n使用 ```DROP TABLE``` 语句可以删除一个或多个数据表，语法格式如下：\n\n```mysql\nDROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 ...]\n```\n\n> 两点注意： \n>\n> -  用户必须拥有执行 DROP TABLE 命令的权限，否则数据表不会被删除。\n> -  表被删除时，用户在该表上的权限不会自动删除。\n\n#  删除表的实例\n\n## 【实例1】\n\n选择数据库 test，创建tb_test 数据表，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table tb_test\n    -> (\n    -> id int(11) primary key auto_increment,\n    -> name varchar(50)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n| tb_test        |\n+----------------+\n2 rows in set\n\nmysql> \n```\n\n由运行结果可以看出，test 数据库中有 tb_test 和 student2 两张数据表。\n\n删除数据表 tb_test ，输入的 SQL 语句和运行结果如下所示：\n\n```mysql\nmysql> drop table tb_test;\nQuery OK, 0 rows affected\n\nmysql> show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| student2       |\n+----------------+\n1 row in set\n\nmysql> \n```\n\n## 【实例2】\n\n当删除一个不存在的数据库会报错，如下：\n\n```mysql\nmysql> drop table tb_test;\n1051 - Unknown table 'test.tb_test'\nmysql> \n```\n\n这时，可以使用如下的SQL语句执行\n\n```mysql\nmysql> drop table if exists tb_test;\nQuery OK, 0 rows affected\n\nmysql> \n```\n\n在`drop table `后面加上`if exists`之后，意思就是如何判断是否存在这个数据表，如何有，就执行删除。","slug":"MySQL删除数据表","published":1,"updated":"2020-03-07T10:27:50.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7muk000wtvm0d3bucsiu","content":"<p>在MySQL数据库中，对于不在需要的数据表，可以将其从数据库中删除。</p>\n<p>在删除表的同时，表的结构和表的所有的数据都会被删除，因此在删除表之前最好先备份，以避免造成无法换回的损失。</p>\n<p>下面我们来了解一下 MySQL 数据库中数据表的删除方法。</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>使用 <code>DROP TABLE</code> 语句可以删除一个或多个数据表，语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 ...]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>两点注意： </p>\n<ul>\n<li>用户必须拥有执行 DROP TABLE 命令的权限，否则数据表不会被删除。</li>\n<li>表被删除时，用户在该表上的权限不会自动删除。</li>\n</ul>\n</blockquote>\n<h1 id=\"删除表的实例\"><a href=\"#删除表的实例\" class=\"headerlink\" title=\"删除表的实例\"></a>删除表的实例</h1><h2 id=\"【实例1】\"><a href=\"#【实例1】\" class=\"headerlink\" title=\"【实例1】\"></a>【实例1】</h2><p>选择数据库 test，创建tb_test 数据表，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tb_test</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(50)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">| tb_test        |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>由运行结果可以看出，test 数据库中有 tb_test 和 student2 两张数据表。</p>\n<p>删除数据表 tb_test ，输入的 SQL 语句和运行结果如下所示：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table tb_test;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"【实例2】\"><a href=\"#【实例2】\" class=\"headerlink\" title=\"【实例2】\"></a>【实例2】</h2><p>当删除一个不存在的数据库会报错，如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table tb_test;</span><br><span class=\"line\">1051 - Unknown table &#39;test.tb_test&#39;</span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>这时，可以使用如下的SQL语句执行</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table if exists tb_test;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>在<code>drop table</code>后面加上<code>if exists</code>之后，意思就是如何判断是否存在这个数据表，如何有，就执行删除。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在MySQL数据库中，对于不在需要的数据表，可以将其从数据库中删除。</p>\n<p>在删除表的同时，表的结构和表的所有的数据都会被删除，因此在删除表之前最好先备份，以避免造成无法换回的损失。</p>\n<p>下面我们来了解一下 MySQL 数据库中数据表的删除方法。</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>使用 <code>DROP TABLE</code> 语句可以删除一个或多个数据表，语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 ...]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两点注意： </p>\n<ul>\n<li>用户必须拥有执行 DROP TABLE 命令的权限，否则数据表不会被删除。</li>\n<li>表被删除时，用户在该表上的权限不会自动删除。</li>\n</ul>\n</blockquote>\n<h1 id=\"删除表的实例\"><a href=\"#删除表的实例\" class=\"headerlink\" title=\"删除表的实例\"></a>删除表的实例</h1><h2 id=\"【实例1】\"><a href=\"#【实例1】\" class=\"headerlink\" title=\"【实例1】\"></a>【实例1】</h2><p>选择数据库 test，创建tb_test 数据表，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table tb_test</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(50)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">| tb_test        |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由运行结果可以看出，test 数据库中有 tb_test 和 student2 两张数据表。</p>\n<p>删除数据表 tb_test ，输入的 SQL 语句和运行结果如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table tb_test;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Tables_in_test |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| student2       |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"【实例2】\"><a href=\"#【实例2】\" class=\"headerlink\" title=\"【实例2】\"></a>【实例2】</h2><p>当删除一个不存在的数据库会报错，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table tb_test;</span><br><span class=\"line\">1051 - Unknown table &#39;test.tb_test&#39;</span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这时，可以使用如下的SQL语句执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop table if exists tb_test;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>drop table</code>后面加上<code>if exists</code>之后，意思就是如何判断是否存在这个数据表，如何有，就执行删除。</p>\n"},{"title":"MySQL去重和设置别名","keywords":"Mysql如何去重、Mysql设置别名","description":"Mysql如何去重、Mysql设置别名","cover":"https://tvax1.sinaimg.cn/large/9fc55f55ly1gcx8zprq64j20sg0lctlb.jpg","abbrlink":"259e736e","date":"2020-03-17T12:51:05.000Z","top_img":null,"copyright":null,"_content":"\n# 去重\n\n在使用MySQL SELECT 语句查询的数据返回的是索引匹配的行。\n\n【实例1】，查询 `visits`表中所有 `ip_counts`的执行结果如下所示。\n\n```mysql\nmysql> select ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n```\n\n可以看到查询结果返回了 3条记录，其中有一些重复的 age 值，有时出于对数据分析的要求，需要消除重复的记录值。这时候就需要用到 DISTINCT 关键字指示 MySQL 消除重复的记录值，语法格式为：\n\n```mysql\nSELECT DISTINCT <字段名> FROM <表名>;\n```\n\n【实例2】查询 `visits`表中 `ip_counts`字段的值，返回 `ip_counts`字段的值且不得重复，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select distinct ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n+-----------+\n2 rows in set\n```\n\n#  MySQL AS 设置别名\n\n在使用 MySQL 查询时，当表名很长或者执行一些特殊查询的时候，为了方便操作或者需要多次使用相同的表时，可以为表指定别名，用这个别名代替表原来的名称。\n\n为表取别名的基本语法格式为：\n\n```mysql\n<表名> [AS] <别名>\n```\n\n其中各子句的含义如下：\n\n-  `<表名>`：数据中存储的数据表的名称。 ·\n-  `<别名>`：查询时指定的表的新名称。\n-  `AS`：关键字为可选参数。\n\n【实例1】为`visits`表取别名 v，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select v.ip_counts from visits as v;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n```\n\n在使用 SELECT 语句显示查询结果时，MySQL 会显示每个 SELECT 后面指定输出的列，在有些情况下，显示的列名称会很长或者名称不够直观，MySQL 可以指定列的别名，替换字段或表达式。\n\n为列取别名的基本语法格式为： \n\n```mysql\n <列名> [AS] <列别名>\n```\n\n其中，各子句的语法含义如下： \n\n-  `<列名>`：为表中字段定义的名称。\n-  `<列别名>`：字段新的名称。\n-  `AS`：关键字为可选参数。\n\n","source":"_posts/MySQL去重和设置别名.md","raw":"---\ntitle: MySQL去重和设置别名\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql如何去重、Mysql设置别名\ndescription: Mysql如何去重、Mysql设置别名\ncover: 'https://tvax1.sinaimg.cn/large/9fc55f55ly1gcx8zprq64j20sg0lctlb.jpg'\nabbrlink: 259e736e\ndate: 2020-03-17 20:51:05\ntop_img:\ncopyright:\n---\n\n# 去重\n\n在使用MySQL SELECT 语句查询的数据返回的是索引匹配的行。\n\n【实例1】，查询 `visits`表中所有 `ip_counts`的执行结果如下所示。\n\n```mysql\nmysql> select ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n```\n\n可以看到查询结果返回了 3条记录，其中有一些重复的 age 值，有时出于对数据分析的要求，需要消除重复的记录值。这时候就需要用到 DISTINCT 关键字指示 MySQL 消除重复的记录值，语法格式为：\n\n```mysql\nSELECT DISTINCT <字段名> FROM <表名>;\n```\n\n【实例2】查询 `visits`表中 `ip_counts`字段的值，返回 `ip_counts`字段的值且不得重复，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select distinct ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n+-----------+\n2 rows in set\n```\n\n#  MySQL AS 设置别名\n\n在使用 MySQL 查询时，当表名很长或者执行一些特殊查询的时候，为了方便操作或者需要多次使用相同的表时，可以为表指定别名，用这个别名代替表原来的名称。\n\n为表取别名的基本语法格式为：\n\n```mysql\n<表名> [AS] <别名>\n```\n\n其中各子句的含义如下：\n\n-  `<表名>`：数据中存储的数据表的名称。 ·\n-  `<别名>`：查询时指定的表的新名称。\n-  `AS`：关键字为可选参数。\n\n【实例1】为`visits`表取别名 v，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select v.ip_counts from visits as v;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n```\n\n在使用 SELECT 语句显示查询结果时，MySQL 会显示每个 SELECT 后面指定输出的列，在有些情况下，显示的列名称会很长或者名称不够直观，MySQL 可以指定列的别名，替换字段或表达式。\n\n为列取别名的基本语法格式为： \n\n```mysql\n <列名> [AS] <列别名>\n```\n\n其中，各子句的语法含义如下： \n\n-  `<列名>`：为表中字段定义的名称。\n-  `<列别名>`：字段新的名称。\n-  `AS`：关键字为可选参数。\n\n","slug":"MySQL去重和设置别名","published":1,"updated":"2020-03-17T13:37:10.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mul000ztvm0fyrlbut3","content":"<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><p>在使用MySQL SELECT 语句查询的数据返回的是索引匹配的行。</p>\n<p>【实例1】，查询 <code>visits</code>表中所有 <code>ip_counts</code>的执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到查询结果返回了 3条记录，其中有一些重复的 age 值，有时出于对数据分析的要求，需要消除重复的记录值。这时候就需要用到 DISTINCT 关键字指示 MySQL 消除重复的记录值，语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT &lt;字段名&gt; FROM &lt;表名&gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】查询 <code>visits</code>表中 <code>ip_counts</code>字段的值，返回 <code>ip_counts</code>字段的值且不得重复，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select distinct ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"MySQL-AS-设置别名\"><a href=\"#MySQL-AS-设置别名\" class=\"headerlink\" title=\"MySQL AS 设置别名\"></a>MySQL AS 设置别名</h1><p>在使用 MySQL 查询时，当表名很长或者执行一些特殊查询的时候，为了方便操作或者需要多次使用相同的表时，可以为表指定别名，用这个别名代替表原来的名称。</p>\n<p>为表取别名的基本语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表名&gt; [AS] &lt;别名&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>其中各子句的含义如下：</p>\n<ul>\n<li><code>&lt;表名&gt;</code>：数据中存储的数据表的名称。 ·</li>\n<li><code>&lt;别名&gt;</code>：查询时指定的表的新名称。</li>\n<li><code>AS</code>：关键字为可选参数。</li>\n</ul>\n<p>【实例1】为<code>visits</code>表取别名 v，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select v.ip_counts from visits as v;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>在使用 SELECT 语句显示查询结果时，MySQL 会显示每个 SELECT 后面指定输出的列，在有些情况下，显示的列名称会很长或者名称不够直观，MySQL 可以指定列的别名，替换字段或表达式。</p>\n<p>为列取别名的基本语法格式为： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;列名&gt; [AS] &lt;列别名&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，各子句的语法含义如下： </p>\n<ul>\n<li><code>&lt;列名&gt;</code>：为表中字段定义的名称。</li>\n<li><code>&lt;列别名&gt;</code>：字段新的名称。</li>\n<li><code>AS</code>：关键字为可选参数。</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><p>在使用MySQL SELECT 语句查询的数据返回的是索引匹配的行。</p>\n<p>【实例1】，查询 <code>visits</code>表中所有 <code>ip_counts</code>的执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>可以看到查询结果返回了 3条记录，其中有一些重复的 age 值，有时出于对数据分析的要求，需要消除重复的记录值。这时候就需要用到 DISTINCT 关键字指示 MySQL 消除重复的记录值，语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT &lt;字段名&gt; FROM &lt;表名&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】查询 <code>visits</code>表中 <code>ip_counts</code>字段的值，返回 <code>ip_counts</code>字段的值且不得重复，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select distinct ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MySQL-AS-设置别名\"><a href=\"#MySQL-AS-设置别名\" class=\"headerlink\" title=\"MySQL AS 设置别名\"></a>MySQL AS 设置别名</h1><p>在使用 MySQL 查询时，当表名很长或者执行一些特殊查询的时候，为了方便操作或者需要多次使用相同的表时，可以为表指定别名，用这个别名代替表原来的名称。</p>\n<p>为表取别名的基本语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表名&gt; [AS] &lt;别名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中各子句的含义如下：</p>\n<ul>\n<li><code>&lt;表名&gt;</code>：数据中存储的数据表的名称。 ·</li>\n<li><code>&lt;别名&gt;</code>：查询时指定的表的新名称。</li>\n<li><code>AS</code>：关键字为可选参数。</li>\n</ul>\n<p>【实例1】为<code>visits</code>表取别名 v，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select v.ip_counts from visits as v;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>在使用 SELECT 语句显示查询结果时，MySQL 会显示每个 SELECT 后面指定输出的列，在有些情况下，显示的列名称会很长或者名称不够直观，MySQL 可以指定列的别名，替换字段或表达式。</p>\n<p>为列取别名的基本语法格式为： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;列名&gt; [AS] &lt;列别名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各子句的语法含义如下： </p>\n<ul>\n<li><code>&lt;列名&gt;</code>：为表中字段定义的名称。</li>\n<li><code>&lt;列别名&gt;</code>：字段新的名称。</li>\n<li><code>AS</code>：关键字为可选参数。</li>\n</ul>\n"},{"title":"MySQL唯一约束(UNIQUE KEY)","keywords":"Mysql 唯一约束  UNIQUE KEY 添加唯一约束，删除唯一约束","description":"Mysql 唯一约束  UNIQUE KEY 添加唯一约束，删除唯一约束","cover":"https://tva1.sinaimg.cn/large/9fc55f55ly1gcr08ughrvj20sf0iykhp.jpg","top_img":"https://tva4.sinaimg.cn/large/9fc55f55ly1gcr09h1tpcj20sf0a5dme.jpg","abbrlink":"76fe01d5","date":"2020-03-11T08:53:06.000Z","copyright":null,"_content":"\nMySQL唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。\n\n# 在创建表是设置唯一约束\n\n在定义完列之后直接使用 ``UNIQUE`` 关键字指定唯一约束，语法规则如下：\n\n```mysql\n<字段名> <数据类型> UNIQUE\n```\n\n【实例1】创建一个学生表`students`，指定学生名字是唯一，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table student(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100) unique,\n    -> age varchar(10)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  | UNI | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n> 提示：UNIQUE 和 PRIMARY KEY 的区别：一个表可以有多个字段声明为 UNIQUE，但只能有一个 PRIMARY KEY 声明；声明为 PRIMAY KEY 的列不允许有空值，但是声明为 UNIQUE 的字段允许空值的存在。\n\n# 删除唯一约束\n\n在 MySQL 中删除唯一约束的语法格式如下：\n\n```mysql\nALTER TABLE <表名> DROP INDEX <唯一约束名>;\n```\n\n【实例2】把学生表`student`的name唯一约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student drop index name;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  |     | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n# 在修改表时创建唯一约束\n\n在修改表时添加唯一约束的语法格式为：\n\n```mysql\nALTER TABLE <数据表名> ADD CONSTRAINT <唯一约束名> UNIQUE(<列名>);\n```\n\n【实例3】修改学生表`student`，指定学生的名子唯一，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student add constraint name unique(name);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  | UNI | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n```","source":"_posts/MySQL唯一约束-UNIQUE-KEY.md","raw":"---\ntitle: MySQL唯一约束(UNIQUE KEY)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql 唯一约束  UNIQUE KEY 添加唯一约束，删除唯一约束\ndescription: Mysql 唯一约束  UNIQUE KEY 添加唯一约束，删除唯一约束\ncover: 'https://tva1.sinaimg.cn/large/9fc55f55ly1gcr08ughrvj20sf0iykhp.jpg'\ntop_img: 'https://tva4.sinaimg.cn/large/9fc55f55ly1gcr09h1tpcj20sf0a5dme.jpg'\nabbrlink: 76fe01d5\ndate: 2020-03-11 16:53:06\ncopyright:\n---\n\nMySQL唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。\n\n# 在创建表是设置唯一约束\n\n在定义完列之后直接使用 ``UNIQUE`` 关键字指定唯一约束，语法规则如下：\n\n```mysql\n<字段名> <数据类型> UNIQUE\n```\n\n【实例1】创建一个学生表`students`，指定学生名字是唯一，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table student(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100) unique,\n    -> age varchar(10)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  | UNI | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n> 提示：UNIQUE 和 PRIMARY KEY 的区别：一个表可以有多个字段声明为 UNIQUE，但只能有一个 PRIMARY KEY 声明；声明为 PRIMAY KEY 的列不允许有空值，但是声明为 UNIQUE 的字段允许空值的存在。\n\n# 删除唯一约束\n\n在 MySQL 中删除唯一约束的语法格式如下：\n\n```mysql\nALTER TABLE <表名> DROP INDEX <唯一约束名>;\n```\n\n【实例2】把学生表`student`的name唯一约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student drop index name;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  |     | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n# 在修改表时创建唯一约束\n\n在修改表时添加唯一约束的语法格式为：\n\n```mysql\nALTER TABLE <数据表名> ADD CONSTRAINT <唯一约束名> UNIQUE(<列名>);\n```\n\n【实例3】修改学生表`student`，指定学生的名子唯一，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student add constraint name unique(name);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  | UNI | NULL    |                |\n| age   | varchar(10)  | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n```","slug":"MySQL唯一约束-UNIQUE-KEY","published":1,"updated":"2020-03-12T03:59:12.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mun0012tvm018vk86vi","content":"<p>MySQL唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。</p>\n<h1 id=\"在创建表是设置唯一约束\"><a href=\"#在创建表是设置唯一约束\" class=\"headerlink\" title=\"在创建表是设置唯一约束\"></a>在创建表是设置唯一约束</h1><p>在定义完列之后直接使用 <code>UNIQUE</code> 关键字指定唯一约束，语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; UNIQUE</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例1】创建一个学生表<code>students</code>，指定学生名字是唯一，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100) unique,</span><br><span class=\"line\">    -&gt; age varchar(10)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  | UNI | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>提示：UNIQUE 和 PRIMARY KEY 的区别：一个表可以有多个字段声明为 UNIQUE，但只能有一个 PRIMARY KEY 声明；声明为 PRIMAY KEY 的列不允许有空值，但是声明为 UNIQUE 的字段允许空值的存在。</p>\n</blockquote>\n<h1 id=\"删除唯一约束\"><a href=\"#删除唯一约束\" class=\"headerlink\" title=\"删除唯一约束\"></a>删除唯一约束</h1><p>在 MySQL 中删除唯一约束的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP INDEX &lt;唯一约束名&gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】把学生表<code>student</code>的name唯一约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student drop index name;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在修改表时创建唯一约束\"><a href=\"#在修改表时创建唯一约束\" class=\"headerlink\" title=\"在修改表时创建唯一约束\"></a>在修改表时创建唯一约束</h1><p>在修改表时添加唯一约束的语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;唯一约束名&gt; UNIQUE(&lt;列名&gt;);</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】修改学生表<code>student</code>，指定学生的名子唯一，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student add constraint name unique(name);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  | UNI | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。</p>\n<h1 id=\"在创建表是设置唯一约束\"><a href=\"#在创建表是设置唯一约束\" class=\"headerlink\" title=\"在创建表是设置唯一约束\"></a>在创建表是设置唯一约束</h1><p>在定义完列之后直接使用 <code>UNIQUE</code> 关键字指定唯一约束，语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; UNIQUE</span><br></pre></td></tr></table></figure>\n\n<p>【实例1】创建一个学生表<code>students</code>，指定学生名字是唯一，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100) unique,</span><br><span class=\"line\">    -&gt; age varchar(10)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  | UNI | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：UNIQUE 和 PRIMARY KEY 的区别：一个表可以有多个字段声明为 UNIQUE，但只能有一个 PRIMARY KEY 声明；声明为 PRIMAY KEY 的列不允许有空值，但是声明为 UNIQUE 的字段允许空值的存在。</p>\n</blockquote>\n<h1 id=\"删除唯一约束\"><a href=\"#删除唯一约束\" class=\"headerlink\" title=\"删除唯一约束\"></a>删除唯一约束</h1><p>在 MySQL 中删除唯一约束的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP INDEX &lt;唯一约束名&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】把学生表<code>student</code>的name唯一约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student drop index name;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在修改表时创建唯一约束\"><a href=\"#在修改表时创建唯一约束\" class=\"headerlink\" title=\"在修改表时创建唯一约束\"></a>在修改表时创建唯一约束</h1><p>在修改表时添加唯一约束的语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;唯一约束名&gt; UNIQUE(&lt;列名&gt;);</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】修改学生表<code>student</code>，指定学生的名子唯一，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student add constraint name unique(name);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  | UNI | NULL    |                |</span><br><span class=\"line\">| age   | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>"},{"title":"MySQL外键约束(FOREIGN KEY)","keywords":"Mysql数据库外键、创建外键、修改外键、删除外键","description":"Mysql数据库外键、创建外键、修改外键、删除外键","cover":"https://tva3.sinaimg.cn/large/9fc55f55ly1gcov8mj1aej20jw089jws.jpg","abbrlink":"b32f27","date":"2020-03-10T02:29:29.000Z","top_img":null,"copyright":null,"_content":"\nMySQL外键约束(FOREIGN KEY)用来在两个表的数据之间建立链接，它可以是一列或多列。一个表可以有一个或多个外键。\n\n> 外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。\n\n> 外键是表的一个字段，不是本表的主键，但对应另一个表的主键。定义外键后，不允许删除另一个表中具有关联关系的行。\n\n\n\n**Mysql数据库默认使用的引擎是MyISAM，而MyISAM引擎不支持建外键，所以将数据库默认引擎改为InnoDB。**\n\n# 外键的作用\n\n外键的作用是保持数据的一致性、完整性。例如，课程表`course`的主键`c_id`，在学生表`student`中有一个建`courseId`与这个`c_id`关联。\n\n- 主表（父表）：对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表。\n- 从表（子表）：对于两个具有关联关系的表而言，相关联字段中外键所在的表就是从表。\n\n>  简单来说就是，一对多的关系，一是主表，多是从表\n\n#  选取设置 MySQL 外键约束的字段\n\n定义一个外键时，需要遵守下列规则：\n\n1. 父表必须已经存在于数据库中，或者是当前正在创建的表。\n2. 必须为父表定义主键\n3. 主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。\n4. 在父表的表名后面指定列名或列名的组合。这个列或列的组合必须是父表的主键或候选键。\n5. 外键中列的数目必须和父表的主键中列的数目相同。\n6. 外键中列的数据类型必须和父表主键中对应列的数据类型相同。\n\n# 在创建表是设置外键约束\n\n在数据表中创建外键使用 ``FOREIGN KEY 关键字``，具体的语法规则如下：\n\n```mysql\n方式1：不指定外键名称，数据库自动生成\nFOREIGN KEY (<列名>) REFERENCES <主表名> (<列名>) [ ON UPDATE CASCADE ON DELETE CASCADE]\n方式2：方式二：指定外键名称为(FK_Name)\nconstraint FK_Name FOREIGN KEY (<列名>) REFERENCES <主表名> (<列名>) [ on delete cascade on update cascade ]\n```\n\n> 注意：**外键名**为定义的外键约束的名称，一个表中不能有相同名称的外键；**字段名**表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。\n\n【实例1】创建学生表`students`和课程表`course`，其中学生表和课程表是一对多的关系，输入的SQL语句如下\n\n```mysql\nmysql> create table course(\n    -> c_id int(11) primary key auto_increment,\n    -> c_name varchar(50),\n    -> c_grade varchar(20)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\nmysql> create table students(\n    ->id int auto_increment primary key,\n    ->name varchar(6),\n    ->class_id int,\n    ->foreign key(class_id) references Class(id) ON UPDATE CASCADE ON DELETE CASCADE\n)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\n```\n\n# 删除外键约束\n\n对于数据库中定义的外键，如果不再需要，可以将其删除。外键一旦删除，就会解除主表和从表间的关联关系，MySQL 中删除外键的语法格式如下：\n\n```mysql\nALTER TABLE <表名> DROP FOREIGN KEY <外键约束名>;\n```\n\n【实例2】把学生表`students`的外键删除，输入的SQL语句如下\n\n```mysql\nmysql> alter table students drop foreign key students_ibfk_1;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> \n```\n\n# 在修改表时添加外键约束\n\n在修改数据表时添加外键约束的语法规则为：\n\n```mysql\nALTER TABLE <数据表名> ADD CONSTRAINT <FK_Name>\nFOREIGN KEY(<列名>) REFERENCES <主表名> (<列名>);\n```\n\n【实例3】把学生表的`students`添加外键关系，输入的SQL语句如下\n\n```mysql\nmysql> alter table students add constraint students_ibfk_1\n    -> foreign key (c_course) references course(c_id);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> \n```\n\n","source":"_posts/MySQL外键约束-FOREIGN-KEY.md","raw":"---\ntitle: MySQL外键约束(FOREIGN KEY)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql数据库外键、创建外键、修改外键、删除外键\ndescription: Mysql数据库外键、创建外键、修改外键、删除外键\ncover: 'https://tva3.sinaimg.cn/large/9fc55f55ly1gcov8mj1aej20jw089jws.jpg'\nabbrlink: b32f27\ndate: 2020-03-10 10:29:29\ntop_img:\ncopyright:\n---\n\nMySQL外键约束(FOREIGN KEY)用来在两个表的数据之间建立链接，它可以是一列或多列。一个表可以有一个或多个外键。\n\n> 外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。\n\n> 外键是表的一个字段，不是本表的主键，但对应另一个表的主键。定义外键后，不允许删除另一个表中具有关联关系的行。\n\n\n\n**Mysql数据库默认使用的引擎是MyISAM，而MyISAM引擎不支持建外键，所以将数据库默认引擎改为InnoDB。**\n\n# 外键的作用\n\n外键的作用是保持数据的一致性、完整性。例如，课程表`course`的主键`c_id`，在学生表`student`中有一个建`courseId`与这个`c_id`关联。\n\n- 主表（父表）：对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表。\n- 从表（子表）：对于两个具有关联关系的表而言，相关联字段中外键所在的表就是从表。\n\n>  简单来说就是，一对多的关系，一是主表，多是从表\n\n#  选取设置 MySQL 外键约束的字段\n\n定义一个外键时，需要遵守下列规则：\n\n1. 父表必须已经存在于数据库中，或者是当前正在创建的表。\n2. 必须为父表定义主键\n3. 主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。\n4. 在父表的表名后面指定列名或列名的组合。这个列或列的组合必须是父表的主键或候选键。\n5. 外键中列的数目必须和父表的主键中列的数目相同。\n6. 外键中列的数据类型必须和父表主键中对应列的数据类型相同。\n\n# 在创建表是设置外键约束\n\n在数据表中创建外键使用 ``FOREIGN KEY 关键字``，具体的语法规则如下：\n\n```mysql\n方式1：不指定外键名称，数据库自动生成\nFOREIGN KEY (<列名>) REFERENCES <主表名> (<列名>) [ ON UPDATE CASCADE ON DELETE CASCADE]\n方式2：方式二：指定外键名称为(FK_Name)\nconstraint FK_Name FOREIGN KEY (<列名>) REFERENCES <主表名> (<列名>) [ on delete cascade on update cascade ]\n```\n\n> 注意：**外键名**为定义的外键约束的名称，一个表中不能有相同名称的外键；**字段名**表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。\n\n【实例1】创建学生表`students`和课程表`course`，其中学生表和课程表是一对多的关系，输入的SQL语句如下\n\n```mysql\nmysql> create table course(\n    -> c_id int(11) primary key auto_increment,\n    -> c_name varchar(50),\n    -> c_grade varchar(20)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\nmysql> create table students(\n    ->id int auto_increment primary key,\n    ->name varchar(6),\n    ->class_id int,\n    ->foreign key(class_id) references Class(id) ON UPDATE CASCADE ON DELETE CASCADE\n)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\n```\n\n# 删除外键约束\n\n对于数据库中定义的外键，如果不再需要，可以将其删除。外键一旦删除，就会解除主表和从表间的关联关系，MySQL 中删除外键的语法格式如下：\n\n```mysql\nALTER TABLE <表名> DROP FOREIGN KEY <外键约束名>;\n```\n\n【实例2】把学生表`students`的外键删除，输入的SQL语句如下\n\n```mysql\nmysql> alter table students drop foreign key students_ibfk_1;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> \n```\n\n# 在修改表时添加外键约束\n\n在修改数据表时添加外键约束的语法规则为：\n\n```mysql\nALTER TABLE <数据表名> ADD CONSTRAINT <FK_Name>\nFOREIGN KEY(<列名>) REFERENCES <主表名> (<列名>);\n```\n\n【实例3】把学生表的`students`添加外键关系，输入的SQL语句如下\n\n```mysql\nmysql> alter table students add constraint students_ibfk_1\n    -> foreign key (c_course) references course(c_id);\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> \n```\n\n","slug":"MySQL外键约束-FOREIGN-KEY","published":1,"updated":"2020-03-10T07:31:30.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mup0015tvm09j614h10","content":"<p>MySQL外键约束(FOREIGN KEY)用来在两个表的数据之间建立链接，它可以是一列或多列。一个表可以有一个或多个外键。</p>\n<blockquote>\n<p>外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</p>\n</blockquote>\n<blockquote>\n<p>外键是表的一个字段，不是本表的主键，但对应另一个表的主键。定义外键后，不允许删除另一个表中具有关联关系的行。</p>\n</blockquote>\n<p><strong>Mysql数据库默认使用的引擎是MyISAM，而MyISAM引擎不支持建外键，所以将数据库默认引擎改为InnoDB。</strong></p>\n<h1 id=\"外键的作用\"><a href=\"#外键的作用\" class=\"headerlink\" title=\"外键的作用\"></a>外键的作用</h1><p>外键的作用是保持数据的一致性、完整性。例如，课程表<code>course</code>的主键<code>c_id</code>，在学生表<code>student</code>中有一个建<code>courseId</code>与这个<code>c_id</code>关联。</p>\n<ul>\n<li>主表（父表）：对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表。</li>\n<li>从表（子表）：对于两个具有关联关系的表而言，相关联字段中外键所在的表就是从表。</li>\n</ul>\n<blockquote>\n<p> 简单来说就是，一对多的关系，一是主表，多是从表</p>\n</blockquote>\n<h1 id=\"选取设置-MySQL-外键约束的字段\"><a href=\"#选取设置-MySQL-外键约束的字段\" class=\"headerlink\" title=\"选取设置 MySQL 外键约束的字段\"></a>选取设置 MySQL 外键约束的字段</h1><p>定义一个外键时，需要遵守下列规则：</p>\n<ol>\n<li>父表必须已经存在于数据库中，或者是当前正在创建的表。</li>\n<li>必须为父表定义主键</li>\n<li>主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。</li>\n<li>在父表的表名后面指定列名或列名的组合。这个列或列的组合必须是父表的主键或候选键。</li>\n<li>外键中列的数目必须和父表的主键中列的数目相同。</li>\n<li>外键中列的数据类型必须和父表主键中对应列的数据类型相同。</li>\n</ol>\n<h1 id=\"在创建表是设置外键约束\"><a href=\"#在创建表是设置外键约束\" class=\"headerlink\" title=\"在创建表是设置外键约束\"></a>在创建表是设置外键约束</h1><p>在数据表中创建外键使用 <code>FOREIGN KEY 关键字</code>，具体的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式1：不指定外键名称，数据库自动生成</span><br><span class=\"line\">FOREIGN KEY (&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;) [ ON UPDATE CASCADE ON DELETE CASCADE]</span><br><span class=\"line\">方式2：方式二：指定外键名称为(FK_Name)</span><br><span class=\"line\">constraint FK_Name FOREIGN KEY (&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;) [ on delete cascade on update cascade ]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>注意：<strong>外键名</strong>为定义的外键约束的名称，一个表中不能有相同名称的外键；<strong>字段名</strong>表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。</p>\n</blockquote>\n<p>【实例1】创建学生表<code>students</code>和课程表<code>course</code>，其中学生表和课程表是一对多的关系，输入的SQL语句如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table course(</span><br><span class=\"line\">    -&gt; c_id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; c_name varchar(50),</span><br><span class=\"line\">    -&gt; c_grade varchar(20)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">mysql&gt; create table students(</span><br><span class=\"line\">    -&gt;id int auto_increment primary key,</span><br><span class=\"line\">    -&gt;name varchar(6),</span><br><span class=\"line\">    -&gt;class_id int,</span><br><span class=\"line\">    -&gt;foreign key(class_id) references Class(id) ON UPDATE CASCADE ON DELETE CASCADE</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"删除外键约束\"><a href=\"#删除外键约束\" class=\"headerlink\" title=\"删除外键约束\"></a>删除外键约束</h1><p>对于数据库中定义的外键，如果不再需要，可以将其删除。外键一旦删除，就会解除主表和从表间的关联关系，MySQL 中删除外键的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP FOREIGN KEY &lt;外键约束名&gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】把学生表<code>students</code>的外键删除，输入的SQL语句如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table students drop foreign key students_ibfk_1;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在修改表时添加外键约束\"><a href=\"#在修改表时添加外键约束\" class=\"headerlink\" title=\"在修改表时添加外键约束\"></a>在修改表时添加外键约束</h1><p>在修改数据表时添加外键约束的语法规则为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;FK_Name&gt;</span><br><span class=\"line\">FOREIGN KEY(&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;);</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】把学生表的<code>students</code>添加外键关系，输入的SQL语句如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table students add constraint students_ibfk_1</span><br><span class=\"line\">    -&gt; foreign key (c_course) references course(c_id);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL外键约束(FOREIGN KEY)用来在两个表的数据之间建立链接，它可以是一列或多列。一个表可以有一个或多个外键。</p>\n<blockquote>\n<p>外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</p>\n</blockquote>\n<blockquote>\n<p>外键是表的一个字段，不是本表的主键，但对应另一个表的主键。定义外键后，不允许删除另一个表中具有关联关系的行。</p>\n</blockquote>\n<p><strong>Mysql数据库默认使用的引擎是MyISAM，而MyISAM引擎不支持建外键，所以将数据库默认引擎改为InnoDB。</strong></p>\n<h1 id=\"外键的作用\"><a href=\"#外键的作用\" class=\"headerlink\" title=\"外键的作用\"></a>外键的作用</h1><p>外键的作用是保持数据的一致性、完整性。例如，课程表<code>course</code>的主键<code>c_id</code>，在学生表<code>student</code>中有一个建<code>courseId</code>与这个<code>c_id</code>关联。</p>\n<ul>\n<li>主表（父表）：对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表。</li>\n<li>从表（子表）：对于两个具有关联关系的表而言，相关联字段中外键所在的表就是从表。</li>\n</ul>\n<blockquote>\n<p> 简单来说就是，一对多的关系，一是主表，多是从表</p>\n</blockquote>\n<h1 id=\"选取设置-MySQL-外键约束的字段\"><a href=\"#选取设置-MySQL-外键约束的字段\" class=\"headerlink\" title=\"选取设置 MySQL 外键约束的字段\"></a>选取设置 MySQL 外键约束的字段</h1><p>定义一个外键时，需要遵守下列规则：</p>\n<ol>\n<li>父表必须已经存在于数据库中，或者是当前正在创建的表。</li>\n<li>必须为父表定义主键</li>\n<li>主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。</li>\n<li>在父表的表名后面指定列名或列名的组合。这个列或列的组合必须是父表的主键或候选键。</li>\n<li>外键中列的数目必须和父表的主键中列的数目相同。</li>\n<li>外键中列的数据类型必须和父表主键中对应列的数据类型相同。</li>\n</ol>\n<h1 id=\"在创建表是设置外键约束\"><a href=\"#在创建表是设置外键约束\" class=\"headerlink\" title=\"在创建表是设置外键约束\"></a>在创建表是设置外键约束</h1><p>在数据表中创建外键使用 <code>FOREIGN KEY 关键字</code>，具体的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式1：不指定外键名称，数据库自动生成</span><br><span class=\"line\">FOREIGN KEY (&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;) [ ON UPDATE CASCADE ON DELETE CASCADE]</span><br><span class=\"line\">方式2：方式二：指定外键名称为(FK_Name)</span><br><span class=\"line\">constraint FK_Name FOREIGN KEY (&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;) [ on delete cascade on update cascade ]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<strong>外键名</strong>为定义的外键约束的名称，一个表中不能有相同名称的外键；<strong>字段名</strong>表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。</p>\n</blockquote>\n<p>【实例1】创建学生表<code>students</code>和课程表<code>course</code>，其中学生表和课程表是一对多的关系，输入的SQL语句如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table course(</span><br><span class=\"line\">    -&gt; c_id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; c_name varchar(50),</span><br><span class=\"line\">    -&gt; c_grade varchar(20)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">mysql&gt; create table students(</span><br><span class=\"line\">    -&gt;id int auto_increment primary key,</span><br><span class=\"line\">    -&gt;name varchar(6),</span><br><span class=\"line\">    -&gt;class_id int,</span><br><span class=\"line\">    -&gt;foreign key(class_id) references Class(id) ON UPDATE CASCADE ON DELETE CASCADE</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除外键约束\"><a href=\"#删除外键约束\" class=\"headerlink\" title=\"删除外键约束\"></a>删除外键约束</h1><p>对于数据库中定义的外键，如果不再需要，可以将其删除。外键一旦删除，就会解除主表和从表间的关联关系，MySQL 中删除外键的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;表名&gt; DROP FOREIGN KEY &lt;外键约束名&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】把学生表<code>students</code>的外键删除，输入的SQL语句如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table students drop foreign key students_ibfk_1;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在修改表时添加外键约束\"><a href=\"#在修改表时添加外键约束\" class=\"headerlink\" title=\"在修改表时添加外键约束\"></a>在修改表时添加外键约束</h1><p>在修改数据表时添加外键约束的语法规则为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;FK_Name&gt;</span><br><span class=\"line\">FOREIGN KEY(&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;);</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】把学生表的<code>students</code>添加外键关系，输入的SQL语句如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table students add constraint students_ibfk_1</span><br><span class=\"line\">    -&gt; foreign key (c_course) references course(c_id);</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL子查询详解","keywords":"MySQL子查询详解","description":"MySQL子查询详解","cover":"https://tvax4.sinaimg.cn/large/9fc55f55gy1gdd4a7mxi7j20xc0qox6q.jpg","abbrlink":"2b8375ce","date":"2020-03-31T07:08:09.000Z","top_img":null,"copyright":null,"_content":"\n子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从  MySQL 4.1 开始引入，在 SELECT 子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。\n\n子查询中常用的操作符有 ANY（SOME）、ALL、IN 和 EXISTS。\n\n子查询可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“<”、“<=”、“>”、“>=”、“！=”等。\n\n# 子查询中常用的运算符\n\n## IN子查询\n\n结合关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：\n\n```mysql\n<表达式> [NOT] IN <子查询>\n```\n\n语法说明如下。 \n\n- `<表达式>`：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。\n- `<子查询>`：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。\n\n## 比较运算符子查询\n\n比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算。其语法格式为：\n\n```mysql\n<表达式> {= | < | > | >= | <= | <=> | < > | != }\n{ ALL | SOME | ANY} <子查询>\n```\n\n语法说明如下。 \n\n- `<子查询>`：用于指定子查询。\n- `<表达式>`：用于指定要进行比较的表达式。\n- `ALL`、`SOME` 和 `ANY`：可选项。用于指定对比较运算的限制。其中，关键字  ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字  SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。\n\n## EXIST子查询\n\n关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为： \n\n```mysql\n EXIST <子查询>\n```\n\n 若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。 \n\n# 子查询的应用\n\n【实例 1】在 tb_departments 表中查询 dept_type 为 A 的学院 ID，并根据学院 ID 查询该学院学生的名字，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from tb_students_info  where dept_id in \n    -> (select dept_id from tb_departments where dept_type ='A');\n+------+\n| name |\n+------+\n| Dany |\n| Jim  |\n+------+\n2 rows in set\n```\n\n上述查询过程可以分步执行，首先内层子查询查出 tb_departments 表中符合条件的学院 ID，单独执行内查询，查询结果如下所示。\n\n```mysql\nmysql> select dept_id from tb_departments where dept_type='A';\n+---------+\n| dept_id |\n+---------+\n|       1 |\n|       4 |\n|       5 |\n+---------+\n3 rows in set\n```\n\n可以看到，符合条件的 dept_id 列的值有两个：1 、4和 5。然后执行外层查询，在 tb_students_info 表中查询 dept_id 等于 1 、4 或 2 的学生的名字。嵌套子查询语句还可以写为如下形式，可以实现相同的效果。\n\n```mysql\nmysql> select name from tb_students_info where dept_id in (1,4,5);\n+------+\n| name |\n+------+\n| Dany |\n| Jim  |\n+------+\n2 rows in set\n```\n\n【实例 2】与前一个例子类似，但是在 SELECT 语句中使用 NOT IN 关键字，输入的 SQL 语句和执行结果如下所示\n\n```mysql\nmysql> select name from tb_students_info  where dept_id not in\n    -> (select dept_id from tb_departments where dept_type='A');\n+-------+\n| name  |\n+-------+\n| Jane  |\n| Henry |\n| John  |\n+-------+\n3 rows in set\n```","source":"_posts/MySQL子查询详解.md","raw":"---\ntitle: MySQL子查询详解\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: MySQL子查询详解\ndescription: MySQL子查询详解\ncover: 'https://tvax4.sinaimg.cn/large/9fc55f55gy1gdd4a7mxi7j20xc0qox6q.jpg'\nabbrlink: 2b8375ce\ndate: 2020-03-31 15:08:09\ntop_img:\ncopyright:\n---\n\n子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从  MySQL 4.1 开始引入，在 SELECT 子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。\n\n子查询中常用的操作符有 ANY（SOME）、ALL、IN 和 EXISTS。\n\n子查询可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“<”、“<=”、“>”、“>=”、“！=”等。\n\n# 子查询中常用的运算符\n\n## IN子查询\n\n结合关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：\n\n```mysql\n<表达式> [NOT] IN <子查询>\n```\n\n语法说明如下。 \n\n- `<表达式>`：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。\n- `<子查询>`：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。\n\n## 比较运算符子查询\n\n比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算。其语法格式为：\n\n```mysql\n<表达式> {= | < | > | >= | <= | <=> | < > | != }\n{ ALL | SOME | ANY} <子查询>\n```\n\n语法说明如下。 \n\n- `<子查询>`：用于指定子查询。\n- `<表达式>`：用于指定要进行比较的表达式。\n- `ALL`、`SOME` 和 `ANY`：可选项。用于指定对比较运算的限制。其中，关键字  ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字  SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。\n\n## EXIST子查询\n\n关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为： \n\n```mysql\n EXIST <子查询>\n```\n\n 若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。 \n\n# 子查询的应用\n\n【实例 1】在 tb_departments 表中查询 dept_type 为 A 的学院 ID，并根据学院 ID 查询该学院学生的名字，输入的 SQL 语句和执行结果如下所示。\n\n```mysql\nmysql> select name from tb_students_info  where dept_id in \n    -> (select dept_id from tb_departments where dept_type ='A');\n+------+\n| name |\n+------+\n| Dany |\n| Jim  |\n+------+\n2 rows in set\n```\n\n上述查询过程可以分步执行，首先内层子查询查出 tb_departments 表中符合条件的学院 ID，单独执行内查询，查询结果如下所示。\n\n```mysql\nmysql> select dept_id from tb_departments where dept_type='A';\n+---------+\n| dept_id |\n+---------+\n|       1 |\n|       4 |\n|       5 |\n+---------+\n3 rows in set\n```\n\n可以看到，符合条件的 dept_id 列的值有两个：1 、4和 5。然后执行外层查询，在 tb_students_info 表中查询 dept_id 等于 1 、4 或 2 的学生的名字。嵌套子查询语句还可以写为如下形式，可以实现相同的效果。\n\n```mysql\nmysql> select name from tb_students_info where dept_id in (1,4,5);\n+------+\n| name |\n+------+\n| Dany |\n| Jim  |\n+------+\n2 rows in set\n```\n\n【实例 2】与前一个例子类似，但是在 SELECT 语句中使用 NOT IN 关键字，输入的 SQL 语句和执行结果如下所示\n\n```mysql\nmysql> select name from tb_students_info  where dept_id not in\n    -> (select dept_id from tb_departments where dept_type='A');\n+-------+\n| name  |\n+-------+\n| Jane  |\n| Henry |\n| John  |\n+-------+\n3 rows in set\n```","slug":"MySQL子查询详解","published":1,"updated":"2020-03-31T07:09:47.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7muq0018tvm0elti8fem","content":"<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从  MySQL 4.1 开始引入，在 SELECT 子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。</p>\n<p>子查询中常用的操作符有 ANY（SOME）、ALL、IN 和 EXISTS。</p>\n<p>子查询可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“！=”等。</p>\n<h1 id=\"子查询中常用的运算符\"><a href=\"#子查询中常用的运算符\" class=\"headerlink\" title=\"子查询中常用的运算符\"></a>子查询中常用的运算符</h1><h2 id=\"IN子查询\"><a href=\"#IN子查询\" class=\"headerlink\" title=\"IN子查询\"></a>IN子查询</h2><p>结合关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; [NOT] IN &lt;子查询&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;表达式&gt;</code>：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。</li>\n<li><code>&lt;子查询&gt;</code>：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。</li>\n</ul>\n<h2 id=\"比较运算符子查询\"><a href=\"#比较运算符子查询\" class=\"headerlink\" title=\"比较运算符子查询\"></a>比较运算符子查询</h2><p>比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算。其语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; &#123;&#x3D; | &lt; | &gt; | &gt;&#x3D; | &lt;&#x3D; | &lt;&#x3D;&gt; | &lt; &gt; | !&#x3D; &#125;</span><br><span class=\"line\">&#123; ALL | SOME | ANY&#125; &lt;子查询&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;子查询&gt;</code>：用于指定子查询。</li>\n<li><code>&lt;表达式&gt;</code>：用于指定要进行比较的表达式。</li>\n<li><code>ALL</code>、<code>SOME</code> 和 <code>ANY</code>：可选项。用于指定对比较运算的限制。其中，关键字  ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字  SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。</li>\n</ul>\n<h2 id=\"EXIST子查询\"><a href=\"#EXIST子查询\" class=\"headerlink\" title=\"EXIST子查询\"></a>EXIST子查询</h2><p>关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXIST &lt;子查询&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p> 若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。 </p>\n<h1 id=\"子查询的应用\"><a href=\"#子查询的应用\" class=\"headerlink\" title=\"子查询的应用\"></a>子查询的应用</h1><p>【实例 1】在 tb_departments 表中查询 dept_type 为 A 的学院 ID，并根据学院 ID 查询该学院学生的名字，输入的 SQL 语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info  where dept_id in </span><br><span class=\"line\">    -&gt; (select dept_id from tb_departments where dept_type &#x3D;&#39;A&#39;);</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| name |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| Dany |</span><br><span class=\"line\">| Jim  |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>上述查询过程可以分步执行，首先内层子查询查出 tb_departments 表中符合条件的学院 ID，单独执行内查询，查询结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id from tb_departments where dept_type&#x3D;&#39;A&#39;;</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| dept_id |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|       1 |</span><br><span class=\"line\">|       4 |</span><br><span class=\"line\">|       5 |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到，符合条件的 dept_id 列的值有两个：1 、4和 5。然后执行外层查询，在 tb_students_info 表中查询 dept_id 等于 1 、4 或 2 的学生的名字。嵌套子查询语句还可以写为如下形式，可以实现相同的效果。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info where dept_id in (1,4,5);</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| name |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| Dany |</span><br><span class=\"line\">| Jim  |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例 2】与前一个例子类似，但是在 SELECT 语句中使用 NOT IN 关键字，输入的 SQL 语句和执行结果如下所示</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info  where dept_id not in</span><br><span class=\"line\">    -&gt; (select dept_id from tb_departments where dept_type&#x3D;&#39;A&#39;);</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">| Jane  |</span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">| John  |</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure></div>","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从  MySQL 4.1 开始引入，在 SELECT 子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。</p>\n<p>子查询中常用的操作符有 ANY（SOME）、ALL、IN 和 EXISTS。</p>\n<p>子查询可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“！=”等。</p>\n<h1 id=\"子查询中常用的运算符\"><a href=\"#子查询中常用的运算符\" class=\"headerlink\" title=\"子查询中常用的运算符\"></a>子查询中常用的运算符</h1><h2 id=\"IN子查询\"><a href=\"#IN子查询\" class=\"headerlink\" title=\"IN子查询\"></a>IN子查询</h2><p>结合关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; [NOT] IN &lt;子查询&gt;</span><br></pre></td></tr></table></figure>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;表达式&gt;</code>：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。</li>\n<li><code>&lt;子查询&gt;</code>：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。</li>\n</ul>\n<h2 id=\"比较运算符子查询\"><a href=\"#比较运算符子查询\" class=\"headerlink\" title=\"比较运算符子查询\"></a>比较运算符子查询</h2><p>比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算。其语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; &#123;&#x3D; | &lt; | &gt; | &gt;&#x3D; | &lt;&#x3D; | &lt;&#x3D;&gt; | &lt; &gt; | !&#x3D; &#125;</span><br><span class=\"line\">&#123; ALL | SOME | ANY&#125; &lt;子查询&gt;</span><br></pre></td></tr></table></figure>\n\n<p>语法说明如下。 </p>\n<ul>\n<li><code>&lt;子查询&gt;</code>：用于指定子查询。</li>\n<li><code>&lt;表达式&gt;</code>：用于指定要进行比较的表达式。</li>\n<li><code>ALL</code>、<code>SOME</code> 和 <code>ANY</code>：可选项。用于指定对比较运算的限制。其中，关键字  ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字  SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。</li>\n</ul>\n<h2 id=\"EXIST子查询\"><a href=\"#EXIST子查询\" class=\"headerlink\" title=\"EXIST子查询\"></a>EXIST子查询</h2><p>关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXIST &lt;子查询&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。 </p>\n<h1 id=\"子查询的应用\"><a href=\"#子查询的应用\" class=\"headerlink\" title=\"子查询的应用\"></a>子查询的应用</h1><p>【实例 1】在 tb_departments 表中查询 dept_type 为 A 的学院 ID，并根据学院 ID 查询该学院学生的名字，输入的 SQL 语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info  where dept_id in </span><br><span class=\"line\">    -&gt; (select dept_id from tb_departments where dept_type &#x3D;&#39;A&#39;);</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| name |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| Dany |</span><br><span class=\"line\">| Jim  |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>上述查询过程可以分步执行，首先内层子查询查出 tb_departments 表中符合条件的学院 ID，单独执行内查询，查询结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id from tb_departments where dept_type&#x3D;&#39;A&#39;;</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| dept_id |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|       1 |</span><br><span class=\"line\">|       4 |</span><br><span class=\"line\">|       5 |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，符合条件的 dept_id 列的值有两个：1 、4和 5。然后执行外层查询，在 tb_students_info 表中查询 dept_id 等于 1 、4 或 2 的学生的名字。嵌套子查询语句还可以写为如下形式，可以实现相同的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info where dept_id in (1,4,5);</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| name |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| Dany |</span><br><span class=\"line\">| Jim  |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>【实例 2】与前一个例子类似，但是在 SELECT 语句中使用 NOT IN 关键字，输入的 SQL 语句和执行结果如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info  where dept_id not in</span><br><span class=\"line\">    -&gt; (select dept_id from tb_departments where dept_type&#x3D;&#39;A&#39;);</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">| Jane  |</span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">| John  |</span><br><span class=\"line\">+-------+</span><br><span class=\"line\">3 rows in set</span><br></pre></td></tr></table></figure>"},{"title":"MySQL存储引擎精讲","abbrlink":"3adad3a1","date":"2020-03-01T05:30:48.000Z","keywords":"Mysql存储引擎","description":"Mysql有哪些存储引擎","cover":"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcfeaw7it5j20m808wwgd.jpg","top_img":"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcfeabz6skj20rs0auaaj.jpg","copyright":null,"_content":"\n#### 什么是存储引擎\n\n数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。\n\n现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。\n\n> 提示：InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。\n\nMyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。\n\n#### MySQL 5.7 支持的存储引擎\n\nMySQL 支持多种类型的数据库引擎，可分别根据各个引擎的功能和特性为不同的数据库处理任务提供各自不同的适应性和灵活性。在 MySQL 中，可以利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。\n\nMySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用`SHOW ENGINES`语句查看系统所支持的引擎类型，结果如图所示。\n\n![图片](https://tva2.sinaimg.cn/large/9fc55f55ly1gcfe1q4hjej20w707tmxe.jpg)\n\n> Support 列的值表示某种引擎是否能使用，`YES`表示可以使用，`NO`表示不能使用，`DEFAULT`表示该引擎为当前默认的存储引擎。\n\n#### 如何选择 MySQL 存储引擎\n\n不同的存储引擎都有各自的特点，以适应不同的需求，如表所示。为了做出选择，首先要考虑每一个存储引擎提供了哪些不同的功能。\n\n| 功能         | MylSAM | MEMORY | InnoDB | Archive |\n| :----------- | ------ | ------ | ------ | ------- |\n| 存储限制     | 256TB  | RAM    | 64TB   | None    |\n| 支持事务     | No     | No     | Yes    | No      |\n| 支持全文索引 | Yes    | No     | No     | No      |\n| 支持树索引   | Yes    | Yes    | Yes    | No      |\n| 支持哈希索引 | No     | Yes    | No     | No      |\n| 支持数据缓存 | No     | N/A    | Yes    | No      |\n| 支持外键     | No     | No     | Yes    | No      |\n\n可以根据以下的原则来选择 MySQL 存储引擎：\n\n-  如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。\n-  如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\n-  如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。\n-  如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。\n\n#### MySQL 默认存储引擎\n\nInnoDB 是系统的默认引擎，支持可靠的事务处理。\n\n使用下面的语句可以修改数据库临时的默认存储引擎 \n\n```mysql\n SET default_storage_engine=< 存储引擎名 >\n```\n\n","source":"_posts/MySQL存储引擎精讲.md","raw":"---\ntitle: MySQL存储引擎精讲\nabbrlink: 3adad3a1\ndate: 2020-03-01 13:30:48\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql存储引擎\ndescription: Mysql有哪些存储引擎\ncover: https://tvax2.sinaimg.cn/large/9fc55f55ly1gcfeaw7it5j20m808wwgd.jpg\ntop_img: https://tvax3.sinaimg.cn/large/9fc55f55ly1gcfeabz6skj20rs0auaaj.jpg\ncopyright:\n---\n\n#### 什么是存储引擎\n\n数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。\n\n现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。\n\n> 提示：InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。\n\nMyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。\n\n#### MySQL 5.7 支持的存储引擎\n\nMySQL 支持多种类型的数据库引擎，可分别根据各个引擎的功能和特性为不同的数据库处理任务提供各自不同的适应性和灵活性。在 MySQL 中，可以利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。\n\nMySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用`SHOW ENGINES`语句查看系统所支持的引擎类型，结果如图所示。\n\n![图片](https://tva2.sinaimg.cn/large/9fc55f55ly1gcfe1q4hjej20w707tmxe.jpg)\n\n> Support 列的值表示某种引擎是否能使用，`YES`表示可以使用，`NO`表示不能使用，`DEFAULT`表示该引擎为当前默认的存储引擎。\n\n#### 如何选择 MySQL 存储引擎\n\n不同的存储引擎都有各自的特点，以适应不同的需求，如表所示。为了做出选择，首先要考虑每一个存储引擎提供了哪些不同的功能。\n\n| 功能         | MylSAM | MEMORY | InnoDB | Archive |\n| :----------- | ------ | ------ | ------ | ------- |\n| 存储限制     | 256TB  | RAM    | 64TB   | None    |\n| 支持事务     | No     | No     | Yes    | No      |\n| 支持全文索引 | Yes    | No     | No     | No      |\n| 支持树索引   | Yes    | Yes    | Yes    | No      |\n| 支持哈希索引 | No     | Yes    | No     | No      |\n| 支持数据缓存 | No     | N/A    | Yes    | No      |\n| 支持外键     | No     | No     | Yes    | No      |\n\n可以根据以下的原则来选择 MySQL 存储引擎：\n\n-  如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。\n-  如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\n-  如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。\n-  如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。\n\n#### MySQL 默认存储引擎\n\nInnoDB 是系统的默认引擎，支持可靠的事务处理。\n\n使用下面的语句可以修改数据库临时的默认存储引擎 \n\n```mysql\n SET default_storage_engine=< 存储引擎名 >\n```\n\n","slug":"MySQL存储引擎精讲","published":1,"updated":"2020-03-10T05:21:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mur001btvm0atb50rjb","content":"<h4 id=\"什么是存储引擎\"><a href=\"#什么是存储引擎\" class=\"headerlink\" title=\"什么是存储引擎\"></a>什么是存储引擎</h4><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>\n<p>现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。</p>\n<blockquote>\n<p>提示：InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</p>\n</blockquote>\n<p>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。</p>\n<h4 id=\"MySQL-5-7-支持的存储引擎\"><a href=\"#MySQL-5-7-支持的存储引擎\" class=\"headerlink\" title=\"MySQL 5.7 支持的存储引擎\"></a>MySQL 5.7 支持的存储引擎</h4><p>MySQL 支持多种类型的数据库引擎，可分别根据各个引擎的功能和特性为不同的数据库处理任务提供各自不同的适应性和灵活性。在 MySQL 中，可以利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。</p>\n<p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用<code>SHOW ENGINES</code>语句查看系统所支持的引擎类型，结果如图所示。</p>\n<p><a href=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcfe1q4hjej20w707tmxe.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcfe1q4hjej20w707tmxe.jpg\" class=\"lazyload\"></a></p>\n<blockquote>\n<p>Support 列的值表示某种引擎是否能使用，<code>YES</code>表示可以使用，<code>NO</code>表示不能使用，<code>DEFAULT</code>表示该引擎为当前默认的存储引擎。</p>\n</blockquote>\n<h4 id=\"如何选择-MySQL-存储引擎\"><a href=\"#如何选择-MySQL-存储引擎\" class=\"headerlink\" title=\"如何选择 MySQL 存储引擎\"></a>如何选择 MySQL 存储引擎</h4><p>不同的存储引擎都有各自的特点，以适应不同的需求，如表所示。为了做出选择，首先要考虑每一个存储引擎提供了哪些不同的功能。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th>MylSAM</th>\n<th>MEMORY</th>\n<th>InnoDB</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">存储限制</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>64TB</td>\n<td>None</td>\n</tr>\n<tr>\n<td align=\"left\">支持事务</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持全文索引</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持树索引</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持哈希索引</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持数据缓存</td>\n<td>No</td>\n<td>N/A</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持外键</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n</tbody></table>\n<p>可以根据以下的原则来选择 MySQL 存储引擎：</p>\n<ul>\n<li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li>\n<li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li>\n<li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>\n<li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。</li>\n</ul>\n<h4 id=\"MySQL-默认存储引擎\"><a href=\"#MySQL-默认存储引擎\" class=\"headerlink\" title=\"MySQL 默认存储引擎\"></a>MySQL 默认存储引擎</h4><p>InnoDB 是系统的默认引擎，支持可靠的事务处理。</p>\n<p>使用下面的语句可以修改数据库临时的默认存储引擎 </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET default_storage_engine&#x3D;&lt; 存储引擎名 &gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h4 id=\"什么是存储引擎\"><a href=\"#什么是存储引擎\" class=\"headerlink\" title=\"什么是存储引擎\"></a>什么是存储引擎</h4><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>\n<p>现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。</p>\n<blockquote>\n<p>提示：InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</p>\n</blockquote>\n<p>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。</p>\n<h4 id=\"MySQL-5-7-支持的存储引擎\"><a href=\"#MySQL-5-7-支持的存储引擎\" class=\"headerlink\" title=\"MySQL 5.7 支持的存储引擎\"></a>MySQL 5.7 支持的存储引擎</h4><p>MySQL 支持多种类型的数据库引擎，可分别根据各个引擎的功能和特性为不同的数据库处理任务提供各自不同的适应性和灵活性。在 MySQL 中，可以利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。</p>\n<p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用<code>SHOW ENGINES</code>语句查看系统所支持的引擎类型，结果如图所示。</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcfe1q4hjej20w707tmxe.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>Support 列的值表示某种引擎是否能使用，<code>YES</code>表示可以使用，<code>NO</code>表示不能使用，<code>DEFAULT</code>表示该引擎为当前默认的存储引擎。</p>\n</blockquote>\n<h4 id=\"如何选择-MySQL-存储引擎\"><a href=\"#如何选择-MySQL-存储引擎\" class=\"headerlink\" title=\"如何选择 MySQL 存储引擎\"></a>如何选择 MySQL 存储引擎</h4><p>不同的存储引擎都有各自的特点，以适应不同的需求，如表所示。为了做出选择，首先要考虑每一个存储引擎提供了哪些不同的功能。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th>MylSAM</th>\n<th>MEMORY</th>\n<th>InnoDB</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">存储限制</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>64TB</td>\n<td>None</td>\n</tr>\n<tr>\n<td align=\"left\">支持事务</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持全文索引</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持树索引</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持哈希索引</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持数据缓存</td>\n<td>No</td>\n<td>N/A</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"left\">支持外键</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n</tbody></table>\n<p>可以根据以下的原则来选择 MySQL 存储引擎：</p>\n<ul>\n<li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li>\n<li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li>\n<li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>\n<li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。</li>\n</ul>\n<h4 id=\"MySQL-默认存储引擎\"><a href=\"#MySQL-默认存储引擎\" class=\"headerlink\" title=\"MySQL 默认存储引擎\"></a>MySQL 默认存储引擎</h4><p>InnoDB 是系统的默认引擎，支持可靠的事务处理。</p>\n<p>使用下面的语句可以修改数据库临时的默认存储引擎 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET default_storage_engine&#x3D;&lt; 存储引擎名 &gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL常用运算符详解","keywords":"MySQL常用运算符详解","description":"MySQL常用运算符详解","cover":"https://tvax4.sinaimg.cn/large/9fc55f55gy1gd72mgzuy5j20sg0lcwnk.jpg","abbrlink":"5b424e8f","date":"2020-03-25T02:30:21.000Z","top_img":null,"copyright":null,"_content":"\nMySQL数据库中的表结构确立后，表中的数据代表的意义就已经确定。而通过 MySQL 运算符进行运算，就可以获取到表结构以外的另一种数据。\n\nMySQL支持4中运算符，分别是\n\n**1、算术运算符**\n\n执行算术运算，例如：加、减、乘、除等。\n\n**2、比较运算符**\n\n包括大于、小于、等于或者不等于，等等。主要用于数值的比较、字符串的匹配等方面。例如：LIKE、IN、BETWEEN AND 和 IS NULL 等都是比较运算符，还包括正则表达式的 REGEXP 也是比较运算符。\n\n**3、逻辑运算符**\n\n包括与、或、非和异或等逻辑运算符。其返回值为布尔型，真值（1 或 true）和假值（0 或 false）。\n\n**4、位运算符**\n\n包括按位与、按位或、按位取反、按位异或、按位左移和按位右移等位运算符。位运算必须先将数据转换为二进制，然后在二进制格式下进行操作,运算完成后，将二进制的值转换为原来的类型，返回给用户。\n\n\n\n# 算术运算符\n\n算术运算符是 SQL 中最基本的运算符，MySQL 中的算术运算符如下表所示。\n\n| 算术运算符 | 说明               |\n| ---------- | ------------------ |\n| +          | 加法运算           |\n| -          | 减法运算           |\n| *          | 乘法运算           |\n| /          | 除法运算，返回商   |\n| %          | 求余运算，返回余数 |\n\n# 比较运算符\n\n比较运算符的语法格式为：\n\n```mysql\n<表达式1> {= | < | <= | > | >= | <=> | < > | !=} <表达式2>\n```\n\nMySQL 支持的比较运算符如下表所示\n\n| 比较运算符        | 说明                               |\n| ----------------- | ---------------------------------- |\n| =                 | 等于                               |\n| <                 | 小于                               |\n| <=                | 小于等于                           |\n| >                 | 大于                               |\n| >=                | 大于等于                           |\n| <=>               | 安全的等于，不会返回 UNKNOWN       |\n| <> 或!=           | 不等于                             |\n| IS NULL 或 ISNULL | 判断一个值是否为 NULL              |\n| IS NOT NULL       | 判断一个值是否不为 NULL            |\n| LEAST             | 当有两个或多个参数时，返回最小值   |\n| GREATEST          | 当有两个或多个参数时，返回最大值   |\n| BETWEEN AND       | 判断一个值是否落在两个值之间       |\n| IN                | 判断一个值是IN列表中的任意一个值   |\n| NOT IN            | 判断一个值不是IN列表中的任意一个值 |\n| LIKE              | 通配符匹配                         |\n| REGEXP            | 正则表达式匹配                     |\n\n下面分别介绍不同的比较运算符的使用方法。\n\n## 等于运算符“=”\n\n等号“=”用来判断数字、字符串和表达式是否相等。如果相等，返回值为 1，否则返回值为 0。\n\n数据进行比较时，有如下规则：\n\n- 若有一个或两个参数为 NULL，则比较运算的结果为 NULL。\n- 若同一个比较运算中的两个参数都是字符串，则按照字符串进行比较。\n- 若两个参数均为正数，则按照整数进行比较。\n- 若一个字符串和数字进行相等判断，则 MySQL 可以自动将字符串转换成数字。\n\n## 安全等于运算符“<=>”\n\n用于比较两个表达式的值。当两个表达式的值中有一个为空值或者都为空值时，将返回 UNKNOWN。\n\n对于运算符“<=>”，当两个表达式彼此相等或都等于空值时，比较结果为 TRUE；若其中一个是空值或者都是非空值但不相等时，则为 FALSE，不会出现 UNKNOWN 的情况。\n\n## 不等于运算符“<>”或者“!=”\n\n<>”或者“!=”用于数字、字符串、表达式不相等的判断。如果不相等，返回值为 1；否则返回值为 0。这两个运算符不能用于判断空值（NULL）。\n\n## 小于或等于运算符“<=”\n\n<=”用来判断左边的操作数是否小于或等于右边的操作数。如果小于或等于，返回值为 1；否则返回值为 0。**“<=”不能用于判断空值。**\n\n## 小于运算符“<”\n\n“<”用来判断左边的操作数是否小于右边的操作数。如果小于，返回值为 1；否则返回值为 0。“<”不能用于判断空值。\n\n## 大于或等于运算符“>=”\n\n“>=”用来判断左边的操作数是否大于或等于右边的操作数。如果大于或等于，返回值为 1；否则返回值为 0。“>=”不能用于判断空值。\n\n## 大于运算符“>”\n\n”用来判断左边的操作数是否大于右边的操作数。如果大于，返回值为 1；否则返回值为 0。“>”不能用于判断空值。\n\n## IS NULL（或者 ISNULL）\n\nIS NULL 和 ISNULL 用于检验一个值是否为 NULL，如果为 NULL，返回值为 1；否则返回值为 0。\n\n## IS NOT NULL\n\nIS NOT NULL 用于检验一个值是否为非 NULL，如果为非 NULL，返回值为 1；否则返回值为 0。\n\n## BETWWEN AND\n\n语法格式为： \n\n```mysql\n<表达式> BETWEEN <最小值> AND <最大值>\n```\n\n> 若`<表达式>`大于或等于`<最小值>`，且小于或等于`<最大值>`，则 BETWEEN 的返回值为 1；否则返回值为 0。\n\n## LEAST\n\n 语法格式为： \n\n```mysql\n LEAST(<值1>,<值2>,…,<值n>)\n```\n\n> 其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最小值。若任意一个自变量为 NULL，则 LEAST() 的返回值为 NULL。 \n\n## GREATEST\n\n语法格式为：\n\n```mssql\nGREATEST (<值1>,<值2>,…,<值n>)\n```\n\n其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最大值。若任意一个自变量为 NULL，则 GREATEST() 的返回值为 NULL。\n\n## IN\n\n IN 运算符用来判断操作数是否为 IN 列表中的一个值。如果是，返回值为 1；否则返回值为 0。 \n\n## NOT IN\n\n NOT IN 运算符用来判断表达式是否为 IN 列表中的一个值。如果不是，返回值为 1；否则返回值为 0。 \n\n# 逻辑运算符\n\n在 SQL 语言中，所有逻辑运算符求值所得的结果均为 TRUE、FALSE 或 NULL。在 MySQL 中分别体现为 1（TRUE）、0（FALSE）和 NULL。\n\nMySQL 中的逻辑运算符如下表所示。\n\n| 逻辑运算符   | 说明     |\n| ------------ | -------- |\n| NOT 或者 !   | 逻辑非   |\n| AND 或者 &&  | 逻辑与   |\n| OR 或者 \\|\\| | 逻辑或   |\n| XOR          | 逻辑异或 |\n\n下面分别介绍不同的逻辑运算符的使用方法。 \n\n## NOT 或者 !\n\n 逻辑非运算符 NOT 或者 !，表示当操作数为 0 时，返回值为 1；当操作数为非零值时，返回值为 0；当操作数为 NULL 时，返回值为 NULL。 \n\n## AND 或者 &&\n\n 逻辑与运算符 AND 或者 &&，表示当所有操作数均为非零值并且不为 NULL 时，返回值为 1；当一个或多个操作数为 0 时，返回值为 0；其余情况返回值为 NULL。 \n\n## OR 或者 ||\n\n 逻辑或运算符 OR 或者 ||，表示当两个操作数均为非 NULL 值且任意一个操作数为非零值时，结果为 1，否则结果为 0；当有一个操作数为  NULL 且另一个操作数为非零值时，结果为 1，否则结果为 NULL；当两个操作数均为 NULL 时，所得结果为 NULL。 \n\n## XOR\n\n 逻辑异或运算符 XOR。当任意一个操作数为 NULL 时，返回值为 NULL；对于非 NULL 的操作数，若两个操作数都不是 0 或者都是 0 值，则返回结果为 0；若一个为 0，另一个不为非 0，则返回结果为 1。 \n\n# 位运算符\n\n位运算符是用来对二进制字节中的位进行移位或者测试处理的。\n\n| 位运算符 | 说明                   |\n| -------- | ---------------------- |\n| \\|       | 按位或                 |\n| &        | 按位与                 |\n| ^        | 按位异或               |\n| <<       | 按位左移               |\n| >>       | 按位右移               |\n| ~        | 按位取反，反转所有比特 |\n\n下面分别介绍不同的位运算符的使用方法。 \n\n## 位或运算符“|”\n\n 位或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑或运算。若对应的二进制位有一个或两个为 1，则该位的运算结果为 1，否则为 0。 \n\n## 位与运算符“&”\n\n 位与运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑与运算。若对应的二进制位都为 1，则该位的运算结果为 1，否则为 0。 \n\n## 位异或运算符“^”\n\n 位异或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑异或运算。对应的二进制位不同时，对应位的结果才为 1。如果两个对应位都为 0 或者都为 1，则对应位的结果为 0。 \n\n## 位左移运算符“<<”\n\n 位左移运算符“<<”使指定的二进制值的所有位都左移指定的位数。左移指定位数之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用 0 补齐。\n\n```mysql\n表达式<<n\n```\n\n## 位右移运算符“>>”\n\n 位右移运算符“>>”使指定的二进制值的所有位都右移指定的位数。右移指定位数之后，右边高位的数值将被移出并丢弃，左边低位空出的位置用 0 补齐。\n\n```\n表达式>>n\n```\n\n## 位取反运算符“~”\n\n 位取反运算符的实质是将参与运算的数据按对应的二进制数逐位反转，即 1 取反后变 0，0 取反后变为 1。","source":"_posts/MySQL常用运算符详解.md","raw":"---\ntitle: MySQL常用运算符详解\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: MySQL常用运算符详解\ndescription: MySQL常用运算符详解\ncover: 'https://tvax4.sinaimg.cn/large/9fc55f55gy1gd72mgzuy5j20sg0lcwnk.jpg'\nabbrlink: 5b424e8f\ndate: 2020-03-25 10:30:21\ntop_img:\ncopyright:\n---\n\nMySQL数据库中的表结构确立后，表中的数据代表的意义就已经确定。而通过 MySQL 运算符进行运算，就可以获取到表结构以外的另一种数据。\n\nMySQL支持4中运算符，分别是\n\n**1、算术运算符**\n\n执行算术运算，例如：加、减、乘、除等。\n\n**2、比较运算符**\n\n包括大于、小于、等于或者不等于，等等。主要用于数值的比较、字符串的匹配等方面。例如：LIKE、IN、BETWEEN AND 和 IS NULL 等都是比较运算符，还包括正则表达式的 REGEXP 也是比较运算符。\n\n**3、逻辑运算符**\n\n包括与、或、非和异或等逻辑运算符。其返回值为布尔型，真值（1 或 true）和假值（0 或 false）。\n\n**4、位运算符**\n\n包括按位与、按位或、按位取反、按位异或、按位左移和按位右移等位运算符。位运算必须先将数据转换为二进制，然后在二进制格式下进行操作,运算完成后，将二进制的值转换为原来的类型，返回给用户。\n\n\n\n# 算术运算符\n\n算术运算符是 SQL 中最基本的运算符，MySQL 中的算术运算符如下表所示。\n\n| 算术运算符 | 说明               |\n| ---------- | ------------------ |\n| +          | 加法运算           |\n| -          | 减法运算           |\n| *          | 乘法运算           |\n| /          | 除法运算，返回商   |\n| %          | 求余运算，返回余数 |\n\n# 比较运算符\n\n比较运算符的语法格式为：\n\n```mysql\n<表达式1> {= | < | <= | > | >= | <=> | < > | !=} <表达式2>\n```\n\nMySQL 支持的比较运算符如下表所示\n\n| 比较运算符        | 说明                               |\n| ----------------- | ---------------------------------- |\n| =                 | 等于                               |\n| <                 | 小于                               |\n| <=                | 小于等于                           |\n| >                 | 大于                               |\n| >=                | 大于等于                           |\n| <=>               | 安全的等于，不会返回 UNKNOWN       |\n| <> 或!=           | 不等于                             |\n| IS NULL 或 ISNULL | 判断一个值是否为 NULL              |\n| IS NOT NULL       | 判断一个值是否不为 NULL            |\n| LEAST             | 当有两个或多个参数时，返回最小值   |\n| GREATEST          | 当有两个或多个参数时，返回最大值   |\n| BETWEEN AND       | 判断一个值是否落在两个值之间       |\n| IN                | 判断一个值是IN列表中的任意一个值   |\n| NOT IN            | 判断一个值不是IN列表中的任意一个值 |\n| LIKE              | 通配符匹配                         |\n| REGEXP            | 正则表达式匹配                     |\n\n下面分别介绍不同的比较运算符的使用方法。\n\n## 等于运算符“=”\n\n等号“=”用来判断数字、字符串和表达式是否相等。如果相等，返回值为 1，否则返回值为 0。\n\n数据进行比较时，有如下规则：\n\n- 若有一个或两个参数为 NULL，则比较运算的结果为 NULL。\n- 若同一个比较运算中的两个参数都是字符串，则按照字符串进行比较。\n- 若两个参数均为正数，则按照整数进行比较。\n- 若一个字符串和数字进行相等判断，则 MySQL 可以自动将字符串转换成数字。\n\n## 安全等于运算符“<=>”\n\n用于比较两个表达式的值。当两个表达式的值中有一个为空值或者都为空值时，将返回 UNKNOWN。\n\n对于运算符“<=>”，当两个表达式彼此相等或都等于空值时，比较结果为 TRUE；若其中一个是空值或者都是非空值但不相等时，则为 FALSE，不会出现 UNKNOWN 的情况。\n\n## 不等于运算符“<>”或者“!=”\n\n<>”或者“!=”用于数字、字符串、表达式不相等的判断。如果不相等，返回值为 1；否则返回值为 0。这两个运算符不能用于判断空值（NULL）。\n\n## 小于或等于运算符“<=”\n\n<=”用来判断左边的操作数是否小于或等于右边的操作数。如果小于或等于，返回值为 1；否则返回值为 0。**“<=”不能用于判断空值。**\n\n## 小于运算符“<”\n\n“<”用来判断左边的操作数是否小于右边的操作数。如果小于，返回值为 1；否则返回值为 0。“<”不能用于判断空值。\n\n## 大于或等于运算符“>=”\n\n“>=”用来判断左边的操作数是否大于或等于右边的操作数。如果大于或等于，返回值为 1；否则返回值为 0。“>=”不能用于判断空值。\n\n## 大于运算符“>”\n\n”用来判断左边的操作数是否大于右边的操作数。如果大于，返回值为 1；否则返回值为 0。“>”不能用于判断空值。\n\n## IS NULL（或者 ISNULL）\n\nIS NULL 和 ISNULL 用于检验一个值是否为 NULL，如果为 NULL，返回值为 1；否则返回值为 0。\n\n## IS NOT NULL\n\nIS NOT NULL 用于检验一个值是否为非 NULL，如果为非 NULL，返回值为 1；否则返回值为 0。\n\n## BETWWEN AND\n\n语法格式为： \n\n```mysql\n<表达式> BETWEEN <最小值> AND <最大值>\n```\n\n> 若`<表达式>`大于或等于`<最小值>`，且小于或等于`<最大值>`，则 BETWEEN 的返回值为 1；否则返回值为 0。\n\n## LEAST\n\n 语法格式为： \n\n```mysql\n LEAST(<值1>,<值2>,…,<值n>)\n```\n\n> 其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最小值。若任意一个自变量为 NULL，则 LEAST() 的返回值为 NULL。 \n\n## GREATEST\n\n语法格式为：\n\n```mssql\nGREATEST (<值1>,<值2>,…,<值n>)\n```\n\n其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最大值。若任意一个自变量为 NULL，则 GREATEST() 的返回值为 NULL。\n\n## IN\n\n IN 运算符用来判断操作数是否为 IN 列表中的一个值。如果是，返回值为 1；否则返回值为 0。 \n\n## NOT IN\n\n NOT IN 运算符用来判断表达式是否为 IN 列表中的一个值。如果不是，返回值为 1；否则返回值为 0。 \n\n# 逻辑运算符\n\n在 SQL 语言中，所有逻辑运算符求值所得的结果均为 TRUE、FALSE 或 NULL。在 MySQL 中分别体现为 1（TRUE）、0（FALSE）和 NULL。\n\nMySQL 中的逻辑运算符如下表所示。\n\n| 逻辑运算符   | 说明     |\n| ------------ | -------- |\n| NOT 或者 !   | 逻辑非   |\n| AND 或者 &&  | 逻辑与   |\n| OR 或者 \\|\\| | 逻辑或   |\n| XOR          | 逻辑异或 |\n\n下面分别介绍不同的逻辑运算符的使用方法。 \n\n## NOT 或者 !\n\n 逻辑非运算符 NOT 或者 !，表示当操作数为 0 时，返回值为 1；当操作数为非零值时，返回值为 0；当操作数为 NULL 时，返回值为 NULL。 \n\n## AND 或者 &&\n\n 逻辑与运算符 AND 或者 &&，表示当所有操作数均为非零值并且不为 NULL 时，返回值为 1；当一个或多个操作数为 0 时，返回值为 0；其余情况返回值为 NULL。 \n\n## OR 或者 ||\n\n 逻辑或运算符 OR 或者 ||，表示当两个操作数均为非 NULL 值且任意一个操作数为非零值时，结果为 1，否则结果为 0；当有一个操作数为  NULL 且另一个操作数为非零值时，结果为 1，否则结果为 NULL；当两个操作数均为 NULL 时，所得结果为 NULL。 \n\n## XOR\n\n 逻辑异或运算符 XOR。当任意一个操作数为 NULL 时，返回值为 NULL；对于非 NULL 的操作数，若两个操作数都不是 0 或者都是 0 值，则返回结果为 0；若一个为 0，另一个不为非 0，则返回结果为 1。 \n\n# 位运算符\n\n位运算符是用来对二进制字节中的位进行移位或者测试处理的。\n\n| 位运算符 | 说明                   |\n| -------- | ---------------------- |\n| \\|       | 按位或                 |\n| &        | 按位与                 |\n| ^        | 按位异或               |\n| <<       | 按位左移               |\n| >>       | 按位右移               |\n| ~        | 按位取反，反转所有比特 |\n\n下面分别介绍不同的位运算符的使用方法。 \n\n## 位或运算符“|”\n\n 位或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑或运算。若对应的二进制位有一个或两个为 1，则该位的运算结果为 1，否则为 0。 \n\n## 位与运算符“&”\n\n 位与运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑与运算。若对应的二进制位都为 1，则该位的运算结果为 1，否则为 0。 \n\n## 位异或运算符“^”\n\n 位异或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑异或运算。对应的二进制位不同时，对应位的结果才为 1。如果两个对应位都为 0 或者都为 1，则对应位的结果为 0。 \n\n## 位左移运算符“<<”\n\n 位左移运算符“<<”使指定的二进制值的所有位都左移指定的位数。左移指定位数之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用 0 补齐。\n\n```mysql\n表达式<<n\n```\n\n## 位右移运算符“>>”\n\n 位右移运算符“>>”使指定的二进制值的所有位都右移指定的位数。右移指定位数之后，右边高位的数值将被移出并丢弃，左边低位空出的位置用 0 补齐。\n\n```\n表达式>>n\n```\n\n## 位取反运算符“~”\n\n 位取反运算符的实质是将参与运算的数据按对应的二进制数逐位反转，即 1 取反后变 0，0 取反后变为 1。","slug":"MySQL常用运算符详解","published":1,"updated":"2020-03-26T01:27:04.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mut001etvm009x53bzu","content":"<p>MySQL数据库中的表结构确立后，表中的数据代表的意义就已经确定。而通过 MySQL 运算符进行运算，就可以获取到表结构以外的另一种数据。</p>\n<p>MySQL支持4中运算符，分别是</p>\n<p><strong>1、算术运算符</strong></p>\n<p>执行算术运算，例如：加、减、乘、除等。</p>\n<p><strong>2、比较运算符</strong></p>\n<p>包括大于、小于、等于或者不等于，等等。主要用于数值的比较、字符串的匹配等方面。例如：LIKE、IN、BETWEEN AND 和 IS NULL 等都是比较运算符，还包括正则表达式的 REGEXP 也是比较运算符。</p>\n<p><strong>3、逻辑运算符</strong></p>\n<p>包括与、或、非和异或等逻辑运算符。其返回值为布尔型，真值（1 或 true）和假值（0 或 false）。</p>\n<p><strong>4、位运算符</strong></p>\n<p>包括按位与、按位或、按位取反、按位异或、按位左移和按位右移等位运算符。位运算必须先将数据转换为二进制，然后在二进制格式下进行操作,运算完成后，将二进制的值转换为原来的类型，返回给用户。</p>\n<h1 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h1><p>算术运算符是 SQL 中最基本的运算符，MySQL 中的算术运算符如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>算术运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加法运算</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法运算</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算，返回商</td>\n</tr>\n<tr>\n<td>%</td>\n<td>求余运算，返回余数</td>\n</tr>\n</tbody></table>\n<h1 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h1><p>比较运算符的语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式1&gt; &#123;&#x3D; | &lt; | &lt;&#x3D; | &gt; | &gt;&#x3D; | &lt;&#x3D;&gt; | &lt; &gt; | !&#x3D;&#125; &lt;表达式2&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>MySQL 支持的比较运算符如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;=&gt;</td>\n<td>安全的等于，不会返回 UNKNOWN</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或!=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>IS NULL 或 ISNULL</td>\n<td>判断一个值是否为 NULL</td>\n</tr>\n<tr>\n<td>IS NOT NULL</td>\n<td>判断一个值是否不为 NULL</td>\n</tr>\n<tr>\n<td>LEAST</td>\n<td>当有两个或多个参数时，返回最小值</td>\n</tr>\n<tr>\n<td>GREATEST</td>\n<td>当有两个或多个参数时，返回最大值</td>\n</tr>\n<tr>\n<td>BETWEEN AND</td>\n<td>判断一个值是否落在两个值之间</td>\n</tr>\n<tr>\n<td>IN</td>\n<td>判断一个值是IN列表中的任意一个值</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>判断一个值不是IN列表中的任意一个值</td>\n</tr>\n<tr>\n<td>LIKE</td>\n<td>通配符匹配</td>\n</tr>\n<tr>\n<td>REGEXP</td>\n<td>正则表达式匹配</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的比较运算符的使用方法。</p>\n<h2 id=\"等于运算符“-”\"><a href=\"#等于运算符“-”\" class=\"headerlink\" title=\"等于运算符“=”\"></a>等于运算符“=”</h2><p>等号“=”用来判断数字、字符串和表达式是否相等。如果相等，返回值为 1，否则返回值为 0。</p>\n<p>数据进行比较时，有如下规则：</p>\n<ul>\n<li>若有一个或两个参数为 NULL，则比较运算的结果为 NULL。</li>\n<li>若同一个比较运算中的两个参数都是字符串，则按照字符串进行比较。</li>\n<li>若两个参数均为正数，则按照整数进行比较。</li>\n<li>若一个字符串和数字进行相等判断，则 MySQL 可以自动将字符串转换成数字。</li>\n</ul>\n<h2 id=\"安全等于运算符“-lt-gt-”\"><a href=\"#安全等于运算符“-lt-gt-”\" class=\"headerlink\" title=\"安全等于运算符“&lt;=&gt;”\"></a>安全等于运算符“&lt;=&gt;”</h2><p>用于比较两个表达式的值。当两个表达式的值中有一个为空值或者都为空值时，将返回 UNKNOWN。</p>\n<p>对于运算符“&lt;=&gt;”，当两个表达式彼此相等或都等于空值时，比较结果为 TRUE；若其中一个是空值或者都是非空值但不相等时，则为 FALSE，不会出现 UNKNOWN 的情况。</p>\n<h2 id=\"不等于运算符“-lt-gt-”或者“-”\"><a href=\"#不等于运算符“-lt-gt-”或者“-”\" class=\"headerlink\" title=\"不等于运算符“&lt;&gt;”或者“!=”\"></a>不等于运算符“&lt;&gt;”或者“!=”</h2><p>&lt;&gt;”或者“!=”用于数字、字符串、表达式不相等的判断。如果不相等，返回值为 1；否则返回值为 0。这两个运算符不能用于判断空值（NULL）。</p>\n<h2 id=\"小于或等于运算符“-lt-”\"><a href=\"#小于或等于运算符“-lt-”\" class=\"headerlink\" title=\"小于或等于运算符“&lt;=”\"></a>小于或等于运算符“&lt;=”</h2><p>&lt;=”用来判断左边的操作数是否小于或等于右边的操作数。如果小于或等于，返回值为 1；否则返回值为 0。<strong>“&lt;=”不能用于判断空值。</strong></p>\n<h2 id=\"小于运算符“-lt-”\"><a href=\"#小于运算符“-lt-”\" class=\"headerlink\" title=\"小于运算符“&lt;”\"></a>小于运算符“&lt;”</h2><p>“&lt;”用来判断左边的操作数是否小于右边的操作数。如果小于，返回值为 1；否则返回值为 0。“&lt;”不能用于判断空值。</p>\n<h2 id=\"大于或等于运算符“-gt-”\"><a href=\"#大于或等于运算符“-gt-”\" class=\"headerlink\" title=\"大于或等于运算符“&gt;=”\"></a>大于或等于运算符“&gt;=”</h2><p>“&gt;=”用来判断左边的操作数是否大于或等于右边的操作数。如果大于或等于，返回值为 1；否则返回值为 0。“&gt;=”不能用于判断空值。</p>\n<h2 id=\"大于运算符“-gt-”\"><a href=\"#大于运算符“-gt-”\" class=\"headerlink\" title=\"大于运算符“&gt;”\"></a>大于运算符“&gt;”</h2><p>”用来判断左边的操作数是否大于右边的操作数。如果大于，返回值为 1；否则返回值为 0。“&gt;”不能用于判断空值。</p>\n<h2 id=\"IS-NULL（或者-ISNULL）\"><a href=\"#IS-NULL（或者-ISNULL）\" class=\"headerlink\" title=\"IS NULL（或者 ISNULL）\"></a>IS NULL（或者 ISNULL）</h2><p>IS NULL 和 ISNULL 用于检验一个值是否为 NULL，如果为 NULL，返回值为 1；否则返回值为 0。</p>\n<h2 id=\"IS-NOT-NULL\"><a href=\"#IS-NOT-NULL\" class=\"headerlink\" title=\"IS NOT NULL\"></a>IS NOT NULL</h2><p>IS NOT NULL 用于检验一个值是否为非 NULL，如果为非 NULL，返回值为 1；否则返回值为 0。</p>\n<h2 id=\"BETWWEN-AND\"><a href=\"#BETWWEN-AND\" class=\"headerlink\" title=\"BETWWEN AND\"></a>BETWWEN AND</h2><p>语法格式为： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; BETWEEN &lt;最小值&gt; AND &lt;最大值&gt;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>若<code>&lt;表达式&gt;</code>大于或等于<code>&lt;最小值&gt;</code>，且小于或等于<code>&lt;最大值&gt;</code>，则 BETWEEN 的返回值为 1；否则返回值为 0。</p>\n</blockquote>\n<h2 id=\"LEAST\"><a href=\"#LEAST\" class=\"headerlink\" title=\"LEAST\"></a>LEAST</h2><p> 语法格式为： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEAST(&lt;值1&gt;,&lt;值2&gt;,…,&lt;值n&gt;)</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最小值。若任意一个自变量为 NULL，则 LEAST() 的返回值为 NULL。 </p>\n</blockquote>\n<h2 id=\"GREATEST\"><a href=\"#GREATEST\" class=\"headerlink\" title=\"GREATEST\"></a>GREATEST</h2><p>语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GREATEST (&lt;值1&gt;,&lt;值2&gt;,…,&lt;值n&gt;)</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最大值。若任意一个自变量为 NULL，则 GREATEST() 的返回值为 NULL。</p>\n<h2 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h2><p> IN 运算符用来判断操作数是否为 IN 列表中的一个值。如果是，返回值为 1；否则返回值为 0。 </p>\n<h2 id=\"NOT-IN\"><a href=\"#NOT-IN\" class=\"headerlink\" title=\"NOT IN\"></a>NOT IN</h2><p> NOT IN 运算符用来判断表达式是否为 IN 列表中的一个值。如果不是，返回值为 1；否则返回值为 0。 </p>\n<h1 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h1><p>在 SQL 语言中，所有逻辑运算符求值所得的结果均为 TRUE、FALSE 或 NULL。在 MySQL 中分别体现为 1（TRUE）、0（FALSE）和 NULL。</p>\n<p>MySQL 中的逻辑运算符如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NOT 或者 !</td>\n<td>逻辑非</td>\n</tr>\n<tr>\n<td>AND 或者 &amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>OR 或者 ||</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>XOR</td>\n<td>逻辑异或</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的逻辑运算符的使用方法。 </p>\n<h2 id=\"NOT-或者\"><a href=\"#NOT-或者\" class=\"headerlink\" title=\"NOT 或者 !\"></a>NOT 或者 !</h2><p> 逻辑非运算符 NOT 或者 !，表示当操作数为 0 时，返回值为 1；当操作数为非零值时，返回值为 0；当操作数为 NULL 时，返回值为 NULL。 </p>\n<h2 id=\"AND-或者-amp-amp\"><a href=\"#AND-或者-amp-amp\" class=\"headerlink\" title=\"AND 或者 &amp;&amp;\"></a>AND 或者 &amp;&amp;</h2><p> 逻辑与运算符 AND 或者 &amp;&amp;，表示当所有操作数均为非零值并且不为 NULL 时，返回值为 1；当一个或多个操作数为 0 时，返回值为 0；其余情况返回值为 NULL。 </p>\n<h2 id=\"OR-或者\"><a href=\"#OR-或者\" class=\"headerlink\" title=\"OR 或者 ||\"></a>OR 或者 ||</h2><p> 逻辑或运算符 OR 或者 ||，表示当两个操作数均为非 NULL 值且任意一个操作数为非零值时，结果为 1，否则结果为 0；当有一个操作数为  NULL 且另一个操作数为非零值时，结果为 1，否则结果为 NULL；当两个操作数均为 NULL 时，所得结果为 NULL。 </p>\n<h2 id=\"XOR\"><a href=\"#XOR\" class=\"headerlink\" title=\"XOR\"></a>XOR</h2><p> 逻辑异或运算符 XOR。当任意一个操作数为 NULL 时，返回值为 NULL；对于非 NULL 的操作数，若两个操作数都不是 0 或者都是 0 值，则返回结果为 0；若一个为 0，另一个不为非 0，则返回结果为 1。 </p>\n<h1 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h1><p>位运算符是用来对二进制字节中的位进行移位或者测试处理的。</p>\n<table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>|</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>按位左移</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>按位右移</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反，反转所有比特</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的位运算符的使用方法。 </p>\n<h2 id=\"位或运算符“-”\"><a href=\"#位或运算符“-”\" class=\"headerlink\" title=\"位或运算符“|”\"></a>位或运算符“|”</h2><p> 位或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑或运算。若对应的二进制位有一个或两个为 1，则该位的运算结果为 1，否则为 0。 </p>\n<h2 id=\"位与运算符“-amp-”\"><a href=\"#位与运算符“-amp-”\" class=\"headerlink\" title=\"位与运算符“&amp;”\"></a>位与运算符“&amp;”</h2><p> 位与运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑与运算。若对应的二进制位都为 1，则该位的运算结果为 1，否则为 0。 </p>\n<h2 id=\"位异或运算符“-”\"><a href=\"#位异或运算符“-”\" class=\"headerlink\" title=\"位异或运算符“^”\"></a>位异或运算符“^”</h2><p> 位异或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑异或运算。对应的二进制位不同时，对应位的结果才为 1。如果两个对应位都为 0 或者都为 1，则对应位的结果为 0。 </p>\n<h2 id=\"位左移运算符“-lt-lt-”\"><a href=\"#位左移运算符“-lt-lt-”\" class=\"headerlink\" title=\"位左移运算符“&lt;&lt;”\"></a>位左移运算符“&lt;&lt;”</h2><p> 位左移运算符“&lt;&lt;”使指定的二进制值的所有位都左移指定的位数。左移指定位数之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用 0 补齐。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式&lt;&lt;n</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"位右移运算符“-gt-gt-”\"><a href=\"#位右移运算符“-gt-gt-”\" class=\"headerlink\" title=\"位右移运算符“&gt;&gt;”\"></a>位右移运算符“&gt;&gt;”</h2><p> 位右移运算符“&gt;&gt;”使指定的二进制值的所有位都右移指定的位数。右移指定位数之后，右边高位的数值将被移出并丢弃，左边低位空出的位置用 0 补齐。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式&gt;&gt;n</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"位取反运算符“-”\"><a href=\"#位取反运算符“-”\" class=\"headerlink\" title=\"位取反运算符“~”\"></a>位取反运算符“~”</h2><p> 位取反运算符的实质是将参与运算的数据按对应的二进制数逐位反转，即 1 取反后变 0，0 取反后变为 1。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL数据库中的表结构确立后，表中的数据代表的意义就已经确定。而通过 MySQL 运算符进行运算，就可以获取到表结构以外的另一种数据。</p>\n<p>MySQL支持4中运算符，分别是</p>\n<p><strong>1、算术运算符</strong></p>\n<p>执行算术运算，例如：加、减、乘、除等。</p>\n<p><strong>2、比较运算符</strong></p>\n<p>包括大于、小于、等于或者不等于，等等。主要用于数值的比较、字符串的匹配等方面。例如：LIKE、IN、BETWEEN AND 和 IS NULL 等都是比较运算符，还包括正则表达式的 REGEXP 也是比较运算符。</p>\n<p><strong>3、逻辑运算符</strong></p>\n<p>包括与、或、非和异或等逻辑运算符。其返回值为布尔型，真值（1 或 true）和假值（0 或 false）。</p>\n<p><strong>4、位运算符</strong></p>\n<p>包括按位与、按位或、按位取反、按位异或、按位左移和按位右移等位运算符。位运算必须先将数据转换为二进制，然后在二进制格式下进行操作,运算完成后，将二进制的值转换为原来的类型，返回给用户。</p>\n<h1 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h1><p>算术运算符是 SQL 中最基本的运算符，MySQL 中的算术运算符如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>算术运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加法运算</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法运算</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算，返回商</td>\n</tr>\n<tr>\n<td>%</td>\n<td>求余运算，返回余数</td>\n</tr>\n</tbody></table>\n<h1 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h1><p>比较运算符的语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式1&gt; &#123;&#x3D; | &lt; | &lt;&#x3D; | &gt; | &gt;&#x3D; | &lt;&#x3D;&gt; | &lt; &gt; | !&#x3D;&#125; &lt;表达式2&gt;</span><br></pre></td></tr></table></figure>\n\n<p>MySQL 支持的比较运算符如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;=&gt;</td>\n<td>安全的等于，不会返回 UNKNOWN</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或!=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>IS NULL 或 ISNULL</td>\n<td>判断一个值是否为 NULL</td>\n</tr>\n<tr>\n<td>IS NOT NULL</td>\n<td>判断一个值是否不为 NULL</td>\n</tr>\n<tr>\n<td>LEAST</td>\n<td>当有两个或多个参数时，返回最小值</td>\n</tr>\n<tr>\n<td>GREATEST</td>\n<td>当有两个或多个参数时，返回最大值</td>\n</tr>\n<tr>\n<td>BETWEEN AND</td>\n<td>判断一个值是否落在两个值之间</td>\n</tr>\n<tr>\n<td>IN</td>\n<td>判断一个值是IN列表中的任意一个值</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>判断一个值不是IN列表中的任意一个值</td>\n</tr>\n<tr>\n<td>LIKE</td>\n<td>通配符匹配</td>\n</tr>\n<tr>\n<td>REGEXP</td>\n<td>正则表达式匹配</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的比较运算符的使用方法。</p>\n<h2 id=\"等于运算符“-”\"><a href=\"#等于运算符“-”\" class=\"headerlink\" title=\"等于运算符“=”\"></a>等于运算符“=”</h2><p>等号“=”用来判断数字、字符串和表达式是否相等。如果相等，返回值为 1，否则返回值为 0。</p>\n<p>数据进行比较时，有如下规则：</p>\n<ul>\n<li>若有一个或两个参数为 NULL，则比较运算的结果为 NULL。</li>\n<li>若同一个比较运算中的两个参数都是字符串，则按照字符串进行比较。</li>\n<li>若两个参数均为正数，则按照整数进行比较。</li>\n<li>若一个字符串和数字进行相等判断，则 MySQL 可以自动将字符串转换成数字。</li>\n</ul>\n<h2 id=\"安全等于运算符“-lt-gt-”\"><a href=\"#安全等于运算符“-lt-gt-”\" class=\"headerlink\" title=\"安全等于运算符“&lt;=&gt;”\"></a>安全等于运算符“&lt;=&gt;”</h2><p>用于比较两个表达式的值。当两个表达式的值中有一个为空值或者都为空值时，将返回 UNKNOWN。</p>\n<p>对于运算符“&lt;=&gt;”，当两个表达式彼此相等或都等于空值时，比较结果为 TRUE；若其中一个是空值或者都是非空值但不相等时，则为 FALSE，不会出现 UNKNOWN 的情况。</p>\n<h2 id=\"不等于运算符“-lt-gt-”或者“-”\"><a href=\"#不等于运算符“-lt-gt-”或者“-”\" class=\"headerlink\" title=\"不等于运算符“&lt;&gt;”或者“!=”\"></a>不等于运算符“&lt;&gt;”或者“!=”</h2><p>&lt;&gt;”或者“!=”用于数字、字符串、表达式不相等的判断。如果不相等，返回值为 1；否则返回值为 0。这两个运算符不能用于判断空值（NULL）。</p>\n<h2 id=\"小于或等于运算符“-lt-”\"><a href=\"#小于或等于运算符“-lt-”\" class=\"headerlink\" title=\"小于或等于运算符“&lt;=”\"></a>小于或等于运算符“&lt;=”</h2><p>&lt;=”用来判断左边的操作数是否小于或等于右边的操作数。如果小于或等于，返回值为 1；否则返回值为 0。<strong>“&lt;=”不能用于判断空值。</strong></p>\n<h2 id=\"小于运算符“-lt-”\"><a href=\"#小于运算符“-lt-”\" class=\"headerlink\" title=\"小于运算符“&lt;”\"></a>小于运算符“&lt;”</h2><p>“&lt;”用来判断左边的操作数是否小于右边的操作数。如果小于，返回值为 1；否则返回值为 0。“&lt;”不能用于判断空值。</p>\n<h2 id=\"大于或等于运算符“-gt-”\"><a href=\"#大于或等于运算符“-gt-”\" class=\"headerlink\" title=\"大于或等于运算符“&gt;=”\"></a>大于或等于运算符“&gt;=”</h2><p>“&gt;=”用来判断左边的操作数是否大于或等于右边的操作数。如果大于或等于，返回值为 1；否则返回值为 0。“&gt;=”不能用于判断空值。</p>\n<h2 id=\"大于运算符“-gt-”\"><a href=\"#大于运算符“-gt-”\" class=\"headerlink\" title=\"大于运算符“&gt;”\"></a>大于运算符“&gt;”</h2><p>”用来判断左边的操作数是否大于右边的操作数。如果大于，返回值为 1；否则返回值为 0。“&gt;”不能用于判断空值。</p>\n<h2 id=\"IS-NULL（或者-ISNULL）\"><a href=\"#IS-NULL（或者-ISNULL）\" class=\"headerlink\" title=\"IS NULL（或者 ISNULL）\"></a>IS NULL（或者 ISNULL）</h2><p>IS NULL 和 ISNULL 用于检验一个值是否为 NULL，如果为 NULL，返回值为 1；否则返回值为 0。</p>\n<h2 id=\"IS-NOT-NULL\"><a href=\"#IS-NOT-NULL\" class=\"headerlink\" title=\"IS NOT NULL\"></a>IS NOT NULL</h2><p>IS NOT NULL 用于检验一个值是否为非 NULL，如果为非 NULL，返回值为 1；否则返回值为 0。</p>\n<h2 id=\"BETWWEN-AND\"><a href=\"#BETWWEN-AND\" class=\"headerlink\" title=\"BETWWEN AND\"></a>BETWWEN AND</h2><p>语法格式为： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;表达式&gt; BETWEEN &lt;最小值&gt; AND &lt;最大值&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>若<code>&lt;表达式&gt;</code>大于或等于<code>&lt;最小值&gt;</code>，且小于或等于<code>&lt;最大值&gt;</code>，则 BETWEEN 的返回值为 1；否则返回值为 0。</p>\n</blockquote>\n<h2 id=\"LEAST\"><a href=\"#LEAST\" class=\"headerlink\" title=\"LEAST\"></a>LEAST</h2><p> 语法格式为： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEAST(&lt;值1&gt;,&lt;值2&gt;,…,&lt;值n&gt;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最小值。若任意一个自变量为 NULL，则 LEAST() 的返回值为 NULL。 </p>\n</blockquote>\n<h2 id=\"GREATEST\"><a href=\"#GREATEST\" class=\"headerlink\" title=\"GREATEST\"></a>GREATEST</h2><p>语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GREATEST (&lt;值1&gt;,&lt;值2&gt;,…,&lt;值n&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>其中，值 n 表示参数列表中有 n 个值。存在两个或多个参数的情况下，返回最大值。若任意一个自变量为 NULL，则 GREATEST() 的返回值为 NULL。</p>\n<h2 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h2><p> IN 运算符用来判断操作数是否为 IN 列表中的一个值。如果是，返回值为 1；否则返回值为 0。 </p>\n<h2 id=\"NOT-IN\"><a href=\"#NOT-IN\" class=\"headerlink\" title=\"NOT IN\"></a>NOT IN</h2><p> NOT IN 运算符用来判断表达式是否为 IN 列表中的一个值。如果不是，返回值为 1；否则返回值为 0。 </p>\n<h1 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h1><p>在 SQL 语言中，所有逻辑运算符求值所得的结果均为 TRUE、FALSE 或 NULL。在 MySQL 中分别体现为 1（TRUE）、0（FALSE）和 NULL。</p>\n<p>MySQL 中的逻辑运算符如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NOT 或者 !</td>\n<td>逻辑非</td>\n</tr>\n<tr>\n<td>AND 或者 &amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>OR 或者 ||</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>XOR</td>\n<td>逻辑异或</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的逻辑运算符的使用方法。 </p>\n<h2 id=\"NOT-或者\"><a href=\"#NOT-或者\" class=\"headerlink\" title=\"NOT 或者 !\"></a>NOT 或者 !</h2><p> 逻辑非运算符 NOT 或者 !，表示当操作数为 0 时，返回值为 1；当操作数为非零值时，返回值为 0；当操作数为 NULL 时，返回值为 NULL。 </p>\n<h2 id=\"AND-或者-amp-amp\"><a href=\"#AND-或者-amp-amp\" class=\"headerlink\" title=\"AND 或者 &amp;&amp;\"></a>AND 或者 &amp;&amp;</h2><p> 逻辑与运算符 AND 或者 &amp;&amp;，表示当所有操作数均为非零值并且不为 NULL 时，返回值为 1；当一个或多个操作数为 0 时，返回值为 0；其余情况返回值为 NULL。 </p>\n<h2 id=\"OR-或者\"><a href=\"#OR-或者\" class=\"headerlink\" title=\"OR 或者 ||\"></a>OR 或者 ||</h2><p> 逻辑或运算符 OR 或者 ||，表示当两个操作数均为非 NULL 值且任意一个操作数为非零值时，结果为 1，否则结果为 0；当有一个操作数为  NULL 且另一个操作数为非零值时，结果为 1，否则结果为 NULL；当两个操作数均为 NULL 时，所得结果为 NULL。 </p>\n<h2 id=\"XOR\"><a href=\"#XOR\" class=\"headerlink\" title=\"XOR\"></a>XOR</h2><p> 逻辑异或运算符 XOR。当任意一个操作数为 NULL 时，返回值为 NULL；对于非 NULL 的操作数，若两个操作数都不是 0 或者都是 0 值，则返回结果为 0；若一个为 0，另一个不为非 0，则返回结果为 1。 </p>\n<h1 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h1><p>位运算符是用来对二进制字节中的位进行移位或者测试处理的。</p>\n<table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>|</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>按位左移</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>按位右移</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反，反转所有比特</td>\n</tr>\n</tbody></table>\n<p>下面分别介绍不同的位运算符的使用方法。 </p>\n<h2 id=\"位或运算符“-”\"><a href=\"#位或运算符“-”\" class=\"headerlink\" title=\"位或运算符“|”\"></a>位或运算符“|”</h2><p> 位或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑或运算。若对应的二进制位有一个或两个为 1，则该位的运算结果为 1，否则为 0。 </p>\n<h2 id=\"位与运算符“-amp-”\"><a href=\"#位与运算符“-amp-”\" class=\"headerlink\" title=\"位与运算符“&amp;”\"></a>位与运算符“&amp;”</h2><p> 位与运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑与运算。若对应的二进制位都为 1，则该位的运算结果为 1，否则为 0。 </p>\n<h2 id=\"位异或运算符“-”\"><a href=\"#位异或运算符“-”\" class=\"headerlink\" title=\"位异或运算符“^”\"></a>位异或运算符“^”</h2><p> 位异或运算的实质是将参与运算的两个数据按对应的二进制数逐位进行逻辑异或运算。对应的二进制位不同时，对应位的结果才为 1。如果两个对应位都为 0 或者都为 1，则对应位的结果为 0。 </p>\n<h2 id=\"位左移运算符“-lt-lt-”\"><a href=\"#位左移运算符“-lt-lt-”\" class=\"headerlink\" title=\"位左移运算符“&lt;&lt;”\"></a>位左移运算符“&lt;&lt;”</h2><p> 位左移运算符“&lt;&lt;”使指定的二进制值的所有位都左移指定的位数。左移指定位数之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用 0 补齐。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式&lt;&lt;n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位右移运算符“-gt-gt-”\"><a href=\"#位右移运算符“-gt-gt-”\" class=\"headerlink\" title=\"位右移运算符“&gt;&gt;”\"></a>位右移运算符“&gt;&gt;”</h2><p> 位右移运算符“&gt;&gt;”使指定的二进制值的所有位都右移指定的位数。右移指定位数之后，右边高位的数值将被移出并丢弃，左边低位空出的位置用 0 补齐。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式&gt;&gt;n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位取反运算符“-”\"><a href=\"#位取反运算符“-”\" class=\"headerlink\" title=\"位取反运算符“~”\"></a>位取反运算符“~”</h2><p> 位取反运算符的实质是将参与运算的数据按对应的二进制数逐位反转，即 1 取反后变 0，0 取反后变为 1。</p>\n"},{"title":"MySQL数据类型简介","keywords":"Mysql数据类型","description":"Mysql数据类型","cover":"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcgl9n1hjjj20jg0dct8v.jpg","abbrlink":"de5b8b9b","date":"2020-03-03T03:16:35.000Z","top_img":null,"copyright":null,"_content":"\nMySQL 的数据类型有大概可以分为 5 种，分别是**整数类型**、**浮点数类型**和**定点数类型**、**日期和时间类型**、**字符串类型**、**二进制类型**等。\n\n> 注意：整数类型和浮点数类型可以统称为数值数据类型。\n\n# 数值类型\n\n整数类型包括 ```TINYINT```、```SMALLINT```、```MEDIUMINT```、```INT```、```BIGINT```，浮点数类型包括 ```FLOAT``` 和``` DOUBLE```，定点数类型为``` DECIMAL```。\n\n## 整数类型\n\nMySQL提供了多种数值型数据类型，不同的数据类型提供不同的取值范围，可以存储的值范围越大，所需的存储空间也会越大。下表中列出了 MySQL 中的数值类型。\n\n| 类型名称      | 说明           | 存储需求 |\n| ------------- | -------------- | -------- |\n| TINYINT       | 很小的整数     | 1个字节  |\n| SMALLINT      | 小的整数       | 2个宇节  |\n| MEDIUMINT     | 中等大小的整数 | 3个字节  |\n| INT (INTEGHR) | 普通大小的整数 | 4个字节  |\n| BIGINT        | 大整数         | 8个字节  |\n\n从上表中可以看到，不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。\n\n根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么TINYINT 无符号数的最大值为 2<sup>8</sup>-1，即 255；TINYINT 有符号数的最大值为 2<sup>7</sup>-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。\n\n| 类型名称      | 说明                                      | 存储需求                |\n| ------------- | ----------------------------------------- | ----------------------- |\n| TINYINT       | -128〜127                                 | 0 〜255                 |\n| SMALLINT      | -32768〜32767                             | 0〜65535                |\n| MEDIUMINT     | -8388608〜8388607                         | 0〜16777215             |\n| INT (INTEGER) | -2147483648〜2147483647                   | 0〜4294967295           |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 0〜18446744073709551615 |\n\n## 浮点数类型\n\n浮点类型有两种，分别是单精度浮点数```FLOAT```和双精度浮点数```DOUBLE```；定点类型只有一种，就是 ```DECIMAL```。\n\n> 浮点类型和定点类型都可以用`(M, D)`来表示，其中`M`称为精度，表示总共的位数；`D`称为标度，表示小数的位数。\n>\n> 浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n从上表中可以看到，DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。\n\n# 日期类型\n\nMySQL中有多处表示日期的数据类型：```YEAR```、```TIME```、```DATE```、```DTAETIME```、```TIMESTAMP```。当只记录年信息的时候，可以只使用 YEAR 类型。\n\n下表中列出了 MySQL 中的日期与时间类型。\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个子节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## YEAR 类型\n\nYEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEA。\n\n## TIME类型\n\nTIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。\n\n## DATE类型\n\nDATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 'YYYY-MM-DD'，其中 YYYY 表示年，MM 表示月，DD 表示日。\n\n## DATETIME类型\n\nDATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 'YYYY-MM-DD HH：MM：SS'，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。\n\n## TIMESTAMP类型\n\nTIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD \nHH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 '1970-01-0100：00：01'UTC～'2038-01-19 03：14：07'UTC。在插入数据时，要保证在合法的取值范围内。\n\n# 字符串类型\n\nMySQL中的字符串类型有 ```CHAR```、```VARCHAR```、```TINYTEXT```、```TEXT```、```MEDIUMTEXT```、```LONGTEXT```、```ENUM```、```SET``` 等。\n\n下表中列出了 MySQL 中的字符串数据类型，括号中的`M`表示可以为其指定长度。\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2<sup>8</sup>                             |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2<sup>16</sup>                            |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2<sup>24</sup>                            |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2<sup>32</sup>                            |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\nVARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。\n\n## CHAR和VARCHAR类型\n\nCHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。\n\n> 例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。\n\nVARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。\n\n> 例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。\n\n实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。\n\n| 插入值   | CHAR(4) | 存储需求 | VARCHAR(4) | 存储需求 |\n| -------- | ------- | -------- | ---------- | -------- |\n| ' '      | '    '  | 4字节    | ''         | 1字节    |\n| 'ab'     | 'ab  '  | 4字节    | 'ab'       | 3字节    |\n| 'abc'    | 'abc '  | 4字节    | 'abc'      | 4字节    |\n| 'abcd'   | 'abcd'  | 4字节    | 'abcd'     | 5字节    |\n| 'abcdef' | 'abcd'  | 4字节    | 'abcd'     | 5字节    |\n\n对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。\n\n## TEXT类型\n\nTEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。\n\nTEXT 类型分为 4 种：```TINYTEXT```、```TEXT```、```MEDIUMTEXT``` 和``` LONGTEXT```。不同的 TEXT 类型的存储空间和数据长度不同。\n\n-  TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。\n-  TEXT 表示长度为 65535（216-1）字符的 TEXT 列。\n-  MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。\n-  LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。\n\n## ENUM类型\n\nENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：\n\n```mysql\n<字段名> ENUM( '值1', '值1', …, '值n' )\n```\n\n字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。\n\n> ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。\n> ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。\n\n例如，定义 ENUM 类型的列（'first'，'second'，'third'），该列可以取的值和每个值的索引如下表所示。\n\n| 值     | 索引 |\n| ------ | ---- |\n| NULL   | NULL |\n| ''     | 0    |\n| ’first | 1    |\n| second | 2    |\n| third  | 3    |\n\n## SET类型\n\nSET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号`,`隔开，语法格式如下：\n\n```mysql\nSET( '值1', '值2', …, '值n' )\n```\n\n与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。\n\n但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。\n\n# 二进制类型\n\nMySQL 中的二进制字符串有 ```BIT```、```BINARY```、```VARBINARY```、```TINYBLOB```、```BLOB```、```MEDIUMBLOB``` 和 ```LONGBLOB```。\n\n下表中列出了 MySQL 中的二进制数据类型，括号中的`M`表示可以为其指定长度。\n\n| 类型名称       | 说明                 | 存储需求                         |\n| -------------- | -------------------- | -------------------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节                |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                           |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节                         |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2<sup>8</sup>  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2<sup>16</sup> |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2<sup>24</sup> |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2<sup>32</sup> |\n\n## BIT类型\n\n位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b'101'，其效果与分配 b'000101' 相同。\n\nBIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。\n\n## BINARY 和 VARBINARY 类型\n\nBINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：\n\n```mysql\n列名称 BINARY(M) 或者 VARBINARY(M)\n```\n\n## BLOB类型\n\nBLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种```TINYBLOB```、```BLOB```、```MEDIUMBLOB ```和 ```LONGBLOB```，它们可容纳值的最大长度不同，如下表所示。\n\n| 数据类型   | 存储范围                                         |\n| ---------- | ------------------------------------------------ |\n| TINYBLOB   | 最大长度为255 (2<sup>8</sup>-1)字节              |\n| BLOB       | 最大长度为65535 (2<sup>16</sup>-1)字节           |\n| MEDIUMBLOB | 最大长度为16777215 (2<sup>24</sup>-1)字节        |\n| LONGBLOB   | 最大长度为4294967295或4GB (2<sup>31</sup>-1)字节 |","source":"_posts/MySQL数据类型简介.md","raw":"---\ntitle: MySQL数据类型简介\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql数据类型\ndescription: Mysql数据类型\ncover: 'https://tvax2.sinaimg.cn/large/9fc55f55ly1gcgl9n1hjjj20jg0dct8v.jpg'\nabbrlink: de5b8b9b\ndate: 2020-03-03 11:16:35\ntop_img:\ncopyright:\n---\n\nMySQL 的数据类型有大概可以分为 5 种，分别是**整数类型**、**浮点数类型**和**定点数类型**、**日期和时间类型**、**字符串类型**、**二进制类型**等。\n\n> 注意：整数类型和浮点数类型可以统称为数值数据类型。\n\n# 数值类型\n\n整数类型包括 ```TINYINT```、```SMALLINT```、```MEDIUMINT```、```INT```、```BIGINT```，浮点数类型包括 ```FLOAT``` 和``` DOUBLE```，定点数类型为``` DECIMAL```。\n\n## 整数类型\n\nMySQL提供了多种数值型数据类型，不同的数据类型提供不同的取值范围，可以存储的值范围越大，所需的存储空间也会越大。下表中列出了 MySQL 中的数值类型。\n\n| 类型名称      | 说明           | 存储需求 |\n| ------------- | -------------- | -------- |\n| TINYINT       | 很小的整数     | 1个字节  |\n| SMALLINT      | 小的整数       | 2个宇节  |\n| MEDIUMINT     | 中等大小的整数 | 3个字节  |\n| INT (INTEGHR) | 普通大小的整数 | 4个字节  |\n| BIGINT        | 大整数         | 8个字节  |\n\n从上表中可以看到，不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。\n\n根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么TINYINT 无符号数的最大值为 2<sup>8</sup>-1，即 255；TINYINT 有符号数的最大值为 2<sup>7</sup>-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。\n\n| 类型名称      | 说明                                      | 存储需求                |\n| ------------- | ----------------------------------------- | ----------------------- |\n| TINYINT       | -128〜127                                 | 0 〜255                 |\n| SMALLINT      | -32768〜32767                             | 0〜65535                |\n| MEDIUMINT     | -8388608〜8388607                         | 0〜16777215             |\n| INT (INTEGER) | -2147483648〜2147483647                   | 0〜4294967295           |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 0〜18446744073709551615 |\n\n## 浮点数类型\n\n浮点类型有两种，分别是单精度浮点数```FLOAT```和双精度浮点数```DOUBLE```；定点类型只有一种，就是 ```DECIMAL```。\n\n> 浮点类型和定点类型都可以用`(M, D)`来表示，其中`M`称为精度，表示总共的位数；`D`称为标度，表示小数的位数。\n>\n> 浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n从上表中可以看到，DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。\n\n# 日期类型\n\nMySQL中有多处表示日期的数据类型：```YEAR```、```TIME```、```DATE```、```DTAETIME```、```TIMESTAMP```。当只记录年信息的时候，可以只使用 YEAR 类型。\n\n下表中列出了 MySQL 中的日期与时间类型。\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个子节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## YEAR 类型\n\nYEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEA。\n\n## TIME类型\n\nTIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。\n\n## DATE类型\n\nDATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 'YYYY-MM-DD'，其中 YYYY 表示年，MM 表示月，DD 表示日。\n\n## DATETIME类型\n\nDATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 'YYYY-MM-DD HH：MM：SS'，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。\n\n## TIMESTAMP类型\n\nTIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD \nHH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 '1970-01-0100：00：01'UTC～'2038-01-19 03：14：07'UTC。在插入数据时，要保证在合法的取值范围内。\n\n# 字符串类型\n\nMySQL中的字符串类型有 ```CHAR```、```VARCHAR```、```TINYTEXT```、```TEXT```、```MEDIUMTEXT```、```LONGTEXT```、```ENUM```、```SET``` 等。\n\n下表中列出了 MySQL 中的字符串数据类型，括号中的`M`表示可以为其指定长度。\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2<sup>8</sup>                             |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2<sup>16</sup>                            |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2<sup>24</sup>                            |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2<sup>32</sup>                            |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\nVARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。\n\n## CHAR和VARCHAR类型\n\nCHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。\n\n> 例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。\n\nVARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。\n\n> 例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。\n\n实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。\n\n| 插入值   | CHAR(4) | 存储需求 | VARCHAR(4) | 存储需求 |\n| -------- | ------- | -------- | ---------- | -------- |\n| ' '      | '    '  | 4字节    | ''         | 1字节    |\n| 'ab'     | 'ab  '  | 4字节    | 'ab'       | 3字节    |\n| 'abc'    | 'abc '  | 4字节    | 'abc'      | 4字节    |\n| 'abcd'   | 'abcd'  | 4字节    | 'abcd'     | 5字节    |\n| 'abcdef' | 'abcd'  | 4字节    | 'abcd'     | 5字节    |\n\n对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。\n\n## TEXT类型\n\nTEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。\n\nTEXT 类型分为 4 种：```TINYTEXT```、```TEXT```、```MEDIUMTEXT``` 和``` LONGTEXT```。不同的 TEXT 类型的存储空间和数据长度不同。\n\n-  TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。\n-  TEXT 表示长度为 65535（216-1）字符的 TEXT 列。\n-  MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。\n-  LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。\n\n## ENUM类型\n\nENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：\n\n```mysql\n<字段名> ENUM( '值1', '值1', …, '值n' )\n```\n\n字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。\n\n> ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。\n> ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。\n\n例如，定义 ENUM 类型的列（'first'，'second'，'third'），该列可以取的值和每个值的索引如下表所示。\n\n| 值     | 索引 |\n| ------ | ---- |\n| NULL   | NULL |\n| ''     | 0    |\n| ’first | 1    |\n| second | 2    |\n| third  | 3    |\n\n## SET类型\n\nSET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号`,`隔开，语法格式如下：\n\n```mysql\nSET( '值1', '值2', …, '值n' )\n```\n\n与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。\n\n但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。\n\n# 二进制类型\n\nMySQL 中的二进制字符串有 ```BIT```、```BINARY```、```VARBINARY```、```TINYBLOB```、```BLOB```、```MEDIUMBLOB``` 和 ```LONGBLOB```。\n\n下表中列出了 MySQL 中的二进制数据类型，括号中的`M`表示可以为其指定长度。\n\n| 类型名称       | 说明                 | 存储需求                         |\n| -------------- | -------------------- | -------------------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节                |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                           |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节                         |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2<sup>8</sup>  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2<sup>16</sup> |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2<sup>24</sup> |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2<sup>32</sup> |\n\n## BIT类型\n\n位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b'101'，其效果与分配 b'000101' 相同。\n\nBIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。\n\n## BINARY 和 VARBINARY 类型\n\nBINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：\n\n```mysql\n列名称 BINARY(M) 或者 VARBINARY(M)\n```\n\n## BLOB类型\n\nBLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种```TINYBLOB```、```BLOB```、```MEDIUMBLOB ```和 ```LONGBLOB```，它们可容纳值的最大长度不同，如下表所示。\n\n| 数据类型   | 存储范围                                         |\n| ---------- | ------------------------------------------------ |\n| TINYBLOB   | 最大长度为255 (2<sup>8</sup>-1)字节              |\n| BLOB       | 最大长度为65535 (2<sup>16</sup>-1)字节           |\n| MEDIUMBLOB | 最大长度为16777215 (2<sup>24</sup>-1)字节        |\n| LONGBLOB   | 最大长度为4294967295或4GB (2<sup>31</sup>-1)字节 |","slug":"MySQL数据类型简介","published":1,"updated":"2020-03-03T07:05:16.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7muu001htvm0dc2lha71","content":"<p>MySQL 的数据类型有大概可以分为 5 种，分别是<strong>整数类型</strong>、<strong>浮点数类型</strong>和<strong>定点数类型</strong>、<strong>日期和时间类型</strong>、<strong>字符串类型</strong>、<strong>二进制类型</strong>等。</p>\n<blockquote>\n<p>注意：整数类型和浮点数类型可以统称为数值数据类型。</p>\n</blockquote>\n<h1 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h1><p>整数类型包括 <code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code>，浮点数类型包括 <code>FLOAT</code> 和<code>DOUBLE</code>，定点数类型为<code>DECIMAL</code>。</p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><p>MySQL提供了多种数值型数据类型，不同的数据类型提供不同的取值范围，可以存储的值范围越大，所需的存储空间也会越大。下表中列出了 MySQL 中的数值类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>很小的整数</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>小的整数</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>中等大小的整数</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>普通大小的整数</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>大整数</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>从上表中可以看到，不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。</p>\n<p>根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么TINYINT 无符号数的最大值为 2<sup>8</sup>-1，即 255；TINYINT 有符号数的最大值为 2<sup>7</sup>-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>0 〜255</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>0〜65535</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>0〜16777215</td>\n</tr>\n<tr>\n<td>INT (INTEGER)</td>\n<td>-2147483648〜2147483647</td>\n<td>0〜4294967295</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>0〜18446744073709551615</td>\n</tr>\n</tbody></table>\n<h2 id=\"浮点数类型\"><a href=\"#浮点数类型\" class=\"headerlink\" title=\"浮点数类型\"></a>浮点数类型</h2><p>浮点类型有两种，分别是单精度浮点数<code>FLOAT</code>和双精度浮点数<code>DOUBLE</code>；定点类型只有一种，就是 <code>DECIMAL</code>。</p>\n<blockquote>\n<p>浮点类型和定点类型都可以用<code>(M, D)</code>来表示，其中<code>M</code>称为精度，表示总共的位数；<code>D</code>称为标度，表示小数的位数。</p>\n<p>浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<p>从上表中可以看到，DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。</p>\n<h1 id=\"日期类型\"><a href=\"#日期类型\" class=\"headerlink\" title=\"日期类型\"></a>日期类型</h1><p>MySQL中有多处表示日期的数据类型：<code>YEAR</code>、<code>TIME</code>、<code>DATE</code>、<code>DTAETIME</code>、<code>TIMESTAMP</code>。当只记录年信息的时候，可以只使用 YEAR 类型。</p>\n<p>下表中列出了 MySQL 中的日期与时间类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个子节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"YEAR-类型\"><a href=\"#YEAR-类型\" class=\"headerlink\" title=\"YEAR 类型\"></a>YEAR 类型</h2><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEA。</p>\n<h2 id=\"TIME类型\"><a href=\"#TIME类型\" class=\"headerlink\" title=\"TIME类型\"></a>TIME类型</h2><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。</p>\n<h2 id=\"DATE类型\"><a href=\"#DATE类型\" class=\"headerlink\" title=\"DATE类型\"></a>DATE类型</h2><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。</p>\n<h2 id=\"DATETIME类型\"><a href=\"#DATETIME类型\" class=\"headerlink\" title=\"DATETIME类型\"></a>DATETIME类型</h2><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。</p>\n<h2 id=\"TIMESTAMP类型\"><a href=\"#TIMESTAMP类型\" class=\"headerlink\" title=\"TIMESTAMP类型\"></a>TIMESTAMP类型</h2><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD<br>HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 ‘1970-01-0100：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p>\n<h1 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h1><p>MySQL中的字符串类型有 <code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code> 等。</p>\n<p>下表中列出了 MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2<sup>8</sup></td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2<sup>16</sup></td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2<sup>24</sup></td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2<sup>32</sup></td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<p>VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。</p>\n<h2 id=\"CHAR和VARCHAR类型\"><a href=\"#CHAR和VARCHAR类型\" class=\"headerlink\" title=\"CHAR和VARCHAR类型\"></a>CHAR和VARCHAR类型</h2><p>CHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。</p>\n<blockquote>\n<p>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。</p>\n</blockquote>\n<p>VARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p>\n<blockquote>\n<p>例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。</p>\n</blockquote>\n<p>实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>插入值</th>\n<th>CHAR(4)</th>\n<th>存储需求</th>\n<th>VARCHAR(4)</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>‘ ‘</td>\n<td>‘    ‘</td>\n<td>4字节</td>\n<td>‘’</td>\n<td>1字节</td>\n</tr>\n<tr>\n<td>‘ab’</td>\n<td>‘ab  ‘</td>\n<td>4字节</td>\n<td>‘ab’</td>\n<td>3字节</td>\n</tr>\n<tr>\n<td>‘abc’</td>\n<td>‘abc ‘</td>\n<td>4字节</td>\n<td>‘abc’</td>\n<td>4字节</td>\n</tr>\n<tr>\n<td>‘abcd’</td>\n<td>‘abcd’</td>\n<td>4字节</td>\n<td>‘abcd’</td>\n<td>5字节</td>\n</tr>\n<tr>\n<td>‘abcdef’</td>\n<td>‘abcd’</td>\n<td>4字节</td>\n<td>‘abcd’</td>\n<td>5字节</td>\n</tr>\n</tbody></table>\n<p>对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。</p>\n<h2 id=\"TEXT类型\"><a href=\"#TEXT类型\" class=\"headerlink\" title=\"TEXT类型\"></a>TEXT类型</h2><p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。</p>\n<p>TEXT 类型分为 4 种：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和<code>LONGTEXT</code>。不同的 TEXT 类型的存储空间和数据长度不同。</p>\n<ul>\n<li>TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。</li>\n<li>TEXT 表示长度为 65535（216-1）字符的 TEXT 列。</li>\n<li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li>\n<li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li>\n</ul>\n<h2 id=\"ENUM类型\"><a href=\"#ENUM类型\" class=\"headerlink\" title=\"ENUM类型\"></a>ENUM类型</h2><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; ENUM( &#39;值1&#39;, &#39;值1&#39;, …, &#39;值n&#39; )</span><br></pre></td></tr></table></figure></div>\n\n<p>字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。</p>\n<blockquote>\n<p>ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。<br>ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p>\n</blockquote>\n<p>例如，定义 ENUM 类型的列（’first’，’second’，’third’），该列可以取的值和每个值的索引如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NULL</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>‘’</td>\n<td>0</td>\n</tr>\n<tr>\n<td>’first</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second</td>\n<td>2</td>\n</tr>\n<tr>\n<td>third</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h2 id=\"SET类型\"><a href=\"#SET类型\" class=\"headerlink\" title=\"SET类型\"></a>SET类型</h2><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号<code>,</code>隔开，语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET( &#39;值1&#39;, &#39;值2&#39;, …, &#39;值n&#39; )</span><br></pre></td></tr></table></figure></div>\n\n<p>与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。</p>\n<p>但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。</p>\n<h1 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h1><p>MySQL 中的二进制字符串有 <code>BIT</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。</p>\n<p>下表中列出了 MySQL 中的二进制数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2<sup>8</sup></td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2<sup>16</sup></td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2<sup>24</sup></td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2<sup>32</sup></td>\n</tr>\n</tbody></table>\n<h2 id=\"BIT类型\"><a href=\"#BIT类型\" class=\"headerlink\" title=\"BIT类型\"></a>BIT类型</h2><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b’101’，其效果与分配 b’000101’ 相同。</p>\n<p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。</p>\n<h2 id=\"BINARY-和-VARBINARY-类型\"><a href=\"#BINARY-和-VARBINARY-类型\" class=\"headerlink\" title=\"BINARY 和 VARBINARY 类型\"></a>BINARY 和 VARBINARY 类型</h2><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列名称 BINARY(M) 或者 VARBINARY(M)</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"BLOB类型\"><a href=\"#BLOB类型\" class=\"headerlink\" title=\"BLOB类型\"></a>BLOB类型</h2><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和 <code>LONGBLOB</code>，它们可容纳值的最大长度不同，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>存储范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYBLOB</td>\n<td>最大长度为255 (2<sup>8</sup>-1)字节</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>最大长度为65535 (2<sup>16</sup>-1)字节</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB</td>\n<td>最大长度为16777215 (2<sup>24</sup>-1)字节</td>\n</tr>\n<tr>\n<td>LONGBLOB</td>\n<td>最大长度为4294967295或4GB (2<sup>31</sup>-1)字节</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL 的数据类型有大概可以分为 5 种，分别是<strong>整数类型</strong>、<strong>浮点数类型</strong>和<strong>定点数类型</strong>、<strong>日期和时间类型</strong>、<strong>字符串类型</strong>、<strong>二进制类型</strong>等。</p>\n<blockquote>\n<p>注意：整数类型和浮点数类型可以统称为数值数据类型。</p>\n</blockquote>\n<h1 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h1><p>整数类型包括 <code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code>，浮点数类型包括 <code>FLOAT</code> 和<code>DOUBLE</code>，定点数类型为<code>DECIMAL</code>。</p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><p>MySQL提供了多种数值型数据类型，不同的数据类型提供不同的取值范围，可以存储的值范围越大，所需的存储空间也会越大。下表中列出了 MySQL 中的数值类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>很小的整数</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>小的整数</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>中等大小的整数</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>普通大小的整数</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>大整数</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>从上表中可以看到，不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。</p>\n<p>根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么TINYINT 无符号数的最大值为 2<sup>8</sup>-1，即 255；TINYINT 有符号数的最大值为 2<sup>7</sup>-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>0 〜255</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>0〜65535</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>0〜16777215</td>\n</tr>\n<tr>\n<td>INT (INTEGER)</td>\n<td>-2147483648〜2147483647</td>\n<td>0〜4294967295</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>0〜18446744073709551615</td>\n</tr>\n</tbody></table>\n<h2 id=\"浮点数类型\"><a href=\"#浮点数类型\" class=\"headerlink\" title=\"浮点数类型\"></a>浮点数类型</h2><p>浮点类型有两种，分别是单精度浮点数<code>FLOAT</code>和双精度浮点数<code>DOUBLE</code>；定点类型只有一种，就是 <code>DECIMAL</code>。</p>\n<blockquote>\n<p>浮点类型和定点类型都可以用<code>(M, D)</code>来表示，其中<code>M</code>称为精度，表示总共的位数；<code>D</code>称为标度，表示小数的位数。</p>\n<p>浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<p>从上表中可以看到，DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。</p>\n<h1 id=\"日期类型\"><a href=\"#日期类型\" class=\"headerlink\" title=\"日期类型\"></a>日期类型</h1><p>MySQL中有多处表示日期的数据类型：<code>YEAR</code>、<code>TIME</code>、<code>DATE</code>、<code>DTAETIME</code>、<code>TIMESTAMP</code>。当只记录年信息的时候，可以只使用 YEAR 类型。</p>\n<p>下表中列出了 MySQL 中的日期与时间类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个子节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"YEAR-类型\"><a href=\"#YEAR-类型\" class=\"headerlink\" title=\"YEAR 类型\"></a>YEAR 类型</h2><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEA。</p>\n<h2 id=\"TIME类型\"><a href=\"#TIME类型\" class=\"headerlink\" title=\"TIME类型\"></a>TIME类型</h2><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。</p>\n<h2 id=\"DATE类型\"><a href=\"#DATE类型\" class=\"headerlink\" title=\"DATE类型\"></a>DATE类型</h2><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。</p>\n<h2 id=\"DATETIME类型\"><a href=\"#DATETIME类型\" class=\"headerlink\" title=\"DATETIME类型\"></a>DATETIME类型</h2><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。</p>\n<h2 id=\"TIMESTAMP类型\"><a href=\"#TIMESTAMP类型\" class=\"headerlink\" title=\"TIMESTAMP类型\"></a>TIMESTAMP类型</h2><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD<br>HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 ‘1970-01-0100：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p>\n<h1 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h1><p>MySQL中的字符串类型有 <code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code> 等。</p>\n<p>下表中列出了 MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2<sup>8</sup></td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2<sup>16</sup></td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2<sup>24</sup></td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2<sup>32</sup></td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<p>VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。</p>\n<h2 id=\"CHAR和VARCHAR类型\"><a href=\"#CHAR和VARCHAR类型\" class=\"headerlink\" title=\"CHAR和VARCHAR类型\"></a>CHAR和VARCHAR类型</h2><p>CHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。</p>\n<blockquote>\n<p>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。</p>\n</blockquote>\n<p>VARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p>\n<blockquote>\n<p>例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。</p>\n</blockquote>\n<p>实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>插入值</th>\n<th>CHAR(4)</th>\n<th>存储需求</th>\n<th>VARCHAR(4)</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>‘ ‘</td>\n<td>‘    ‘</td>\n<td>4字节</td>\n<td>‘’</td>\n<td>1字节</td>\n</tr>\n<tr>\n<td>‘ab’</td>\n<td>‘ab  ‘</td>\n<td>4字节</td>\n<td>‘ab’</td>\n<td>3字节</td>\n</tr>\n<tr>\n<td>‘abc’</td>\n<td>‘abc ‘</td>\n<td>4字节</td>\n<td>‘abc’</td>\n<td>4字节</td>\n</tr>\n<tr>\n<td>‘abcd’</td>\n<td>‘abcd’</td>\n<td>4字节</td>\n<td>‘abcd’</td>\n<td>5字节</td>\n</tr>\n<tr>\n<td>‘abcdef’</td>\n<td>‘abcd’</td>\n<td>4字节</td>\n<td>‘abcd’</td>\n<td>5字节</td>\n</tr>\n</tbody></table>\n<p>对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。</p>\n<h2 id=\"TEXT类型\"><a href=\"#TEXT类型\" class=\"headerlink\" title=\"TEXT类型\"></a>TEXT类型</h2><p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。</p>\n<p>TEXT 类型分为 4 种：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和<code>LONGTEXT</code>。不同的 TEXT 类型的存储空间和数据长度不同。</p>\n<ul>\n<li>TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。</li>\n<li>TEXT 表示长度为 65535（216-1）字符的 TEXT 列。</li>\n<li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li>\n<li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li>\n</ul>\n<h2 id=\"ENUM类型\"><a href=\"#ENUM类型\" class=\"headerlink\" title=\"ENUM类型\"></a>ENUM类型</h2><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; ENUM( &#39;值1&#39;, &#39;值1&#39;, …, &#39;值n&#39; )</span><br></pre></td></tr></table></figure>\n\n<p>字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。</p>\n<blockquote>\n<p>ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。<br>ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p>\n</blockquote>\n<p>例如，定义 ENUM 类型的列（’first’，’second’，’third’），该列可以取的值和每个值的索引如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NULL</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>‘’</td>\n<td>0</td>\n</tr>\n<tr>\n<td>’first</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second</td>\n<td>2</td>\n</tr>\n<tr>\n<td>third</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h2 id=\"SET类型\"><a href=\"#SET类型\" class=\"headerlink\" title=\"SET类型\"></a>SET类型</h2><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号<code>,</code>隔开，语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET( &#39;值1&#39;, &#39;值2&#39;, …, &#39;值n&#39; )</span><br></pre></td></tr></table></figure>\n\n<p>与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。</p>\n<p>但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。</p>\n<h1 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h1><p>MySQL 中的二进制字符串有 <code>BIT</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。</p>\n<p>下表中列出了 MySQL 中的二进制数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2<sup>8</sup></td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2<sup>16</sup></td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2<sup>24</sup></td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2<sup>32</sup></td>\n</tr>\n</tbody></table>\n<h2 id=\"BIT类型\"><a href=\"#BIT类型\" class=\"headerlink\" title=\"BIT类型\"></a>BIT类型</h2><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b’101’，其效果与分配 b’000101’ 相同。</p>\n<p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。</p>\n<h2 id=\"BINARY-和-VARBINARY-类型\"><a href=\"#BINARY-和-VARBINARY-类型\" class=\"headerlink\" title=\"BINARY 和 VARBINARY 类型\"></a>BINARY 和 VARBINARY 类型</h2><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列名称 BINARY(M) 或者 VARBINARY(M)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BLOB类型\"><a href=\"#BLOB类型\" class=\"headerlink\" title=\"BLOB类型\"></a>BLOB类型</h2><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和 <code>LONGBLOB</code>，它们可容纳值的最大长度不同，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>存储范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYBLOB</td>\n<td>最大长度为255 (2<sup>8</sup>-1)字节</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>最大长度为65535 (2<sup>16</sup>-1)字节</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB</td>\n<td>最大长度为16777215 (2<sup>24</sup>-1)字节</td>\n</tr>\n<tr>\n<td>LONGBLOB</td>\n<td>最大长度为4294967295或4GB (2<sup>31</sup>-1)字节</td>\n</tr>\n</tbody></table>\n"},{"title":"MySQL查看或显示数据库(SHOW DATABASES语句)","keywords":"show database","description":"查看数据库","cover":"http://tvax2.sinaimg.cn/large/9fc55f55gy1gcdjv8zy9sj20e8080750.jpg","abbrlink":"60b68f5d","date":"2020-02-29T12:08:37.000Z","top_img":null,"copyright":null,"_content":"\n### 查看数据库基本语法\n\n在 MySQL 中，可使用 ```SHOW DATABASES``` 语句来查看或显示当前用户权限范围以内的数据库。查看数据库的语法格式为：\n\n```MYSQL\nSHOW DATABASES [LIKE '数据库名'];\n```\n\n> 语法说明如下： \n>\n> - LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。\n>\n> - 数据库名由单引号`' '`包围。\n\n### 案例详解\n\n##### 实例1：查看所有数据库\n\n列出当前用户可以查看的所有数据库：\n\n```mysql\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n+--------------------+\n10 rows in set\n```\n\n> 可以发现，在上面的列表中有 4 个数据库，它们都是安装 MySQL 5.7时系统自动创建的，其各自功能如下：\n>\n> - information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等\n> - mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。\n> - performance_schema：主要用于收集数据库服务器性能参数。\n\n##### 实例2：创建并查看数据库\n\n先创建一个名为test_db的数据库\n\n```mysql\nmysql> create database test_db;\nQuery OK, 1 row affected\nmysql > show databases\n```\n\n##### 实例3：使用LIKE从句\n\n先创建三个数据库，名字分别是test_db、db_test、db_test_db。\n\n1）使用LIKE从句，查看与test_db完全匹配的数据库；\n\n```mysql\nmysql> show databases like 'test_db';\n+--------------------+\n| Database (test_db) |\n+--------------------+\n| test_db            |\n+--------------------+\n1 row in set\n```\n\n2) 使用 LIKE 从句，查看名字中包含 test 的数据库：\n\n```mysql\nmysql> show databases like '%test%';\n+-------------------+\n| Database (%test%) |\n+-------------------+\n| db_test           |\n| db_test_db        |\n| test              |\n| test_db           |\n| test_db_char      |\n+-------------------+\n5 rows in set\n```\n\n3) 使用 LIKE 从句，查看名字以 db 开头的数据库：\n\n```mysql\nmysql> show databases like \"db%\";\n+----------------+\n| Database (db%) |\n+----------------+\n| db_test        |\n| db_test_db     |\n+----------------+\n2 rows in set\n```\n\n4) 使用 LIKE 从句，查看名字以 db 结尾的数据库：\n\n```mysql\nmysql> show databases like \"%db\";\n+----------------+\n| Database (%db) |\n+----------------+\n| db_test_db     |\n| test_db        |\n+----------------+\n2 rows in set\n```\n\n","source":"_posts/MySQL查看或显示数据库-SHOW-DATABASES语句.md","raw":"---\ntitle: MySQL查看或显示数据库(SHOW DATABASES语句)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: show database\ndescription: 查看数据库\ncover: 'http://tvax2.sinaimg.cn/large/9fc55f55gy1gcdjv8zy9sj20e8080750.jpg'\nabbrlink: 60b68f5d\ndate: 2020-02-29 20:08:37\ntop_img:\ncopyright:\n---\n\n### 查看数据库基本语法\n\n在 MySQL 中，可使用 ```SHOW DATABASES``` 语句来查看或显示当前用户权限范围以内的数据库。查看数据库的语法格式为：\n\n```MYSQL\nSHOW DATABASES [LIKE '数据库名'];\n```\n\n> 语法说明如下： \n>\n> - LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。\n>\n> - 数据库名由单引号`' '`包围。\n\n### 案例详解\n\n##### 实例1：查看所有数据库\n\n列出当前用户可以查看的所有数据库：\n\n```mysql\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n+--------------------+\n10 rows in set\n```\n\n> 可以发现，在上面的列表中有 4 个数据库，它们都是安装 MySQL 5.7时系统自动创建的，其各自功能如下：\n>\n> - information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等\n> - mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。\n> - performance_schema：主要用于收集数据库服务器性能参数。\n\n##### 实例2：创建并查看数据库\n\n先创建一个名为test_db的数据库\n\n```mysql\nmysql> create database test_db;\nQuery OK, 1 row affected\nmysql > show databases\n```\n\n##### 实例3：使用LIKE从句\n\n先创建三个数据库，名字分别是test_db、db_test、db_test_db。\n\n1）使用LIKE从句，查看与test_db完全匹配的数据库；\n\n```mysql\nmysql> show databases like 'test_db';\n+--------------------+\n| Database (test_db) |\n+--------------------+\n| test_db            |\n+--------------------+\n1 row in set\n```\n\n2) 使用 LIKE 从句，查看名字中包含 test 的数据库：\n\n```mysql\nmysql> show databases like '%test%';\n+-------------------+\n| Database (%test%) |\n+-------------------+\n| db_test           |\n| db_test_db        |\n| test              |\n| test_db           |\n| test_db_char      |\n+-------------------+\n5 rows in set\n```\n\n3) 使用 LIKE 从句，查看名字以 db 开头的数据库：\n\n```mysql\nmysql> show databases like \"db%\";\n+----------------+\n| Database (db%) |\n+----------------+\n| db_test        |\n| db_test_db     |\n+----------------+\n2 rows in set\n```\n\n4) 使用 LIKE 从句，查看名字以 db 结尾的数据库：\n\n```mysql\nmysql> show databases like \"%db\";\n+----------------+\n| Database (%db) |\n+----------------+\n| db_test_db     |\n| test_db        |\n+----------------+\n2 rows in set\n```\n\n","slug":"MySQL查看或显示数据库-SHOW-DATABASES语句","published":1,"updated":"2020-02-29T12:39:46.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7muv001ktvm0b2zdhhb7","content":"<h3 id=\"查看数据库基本语法\"><a href=\"#查看数据库基本语法\" class=\"headerlink\" title=\"查看数据库基本语法\"></a>查看数据库基本语法</h3><p>在 MySQL 中，可使用 <code>SHOW DATABASES</code> 语句来查看或显示当前用户权限范围以内的数据库。查看数据库的语法格式为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES [LIKE &#39;数据库名&#39;];</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>语法说明如下： </p>\n<ul>\n<li><p>LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。</p>\n</li>\n<li><p>数据库名由单引号<code>&#39; &#39;</code>包围。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"案例详解\"><a href=\"#案例详解\" class=\"headerlink\" title=\"案例详解\"></a>案例详解</h3><h5 id=\"实例1：查看所有数据库\"><a href=\"#实例1：查看所有数据库\" class=\"headerlink\" title=\"实例1：查看所有数据库\"></a>实例1：查看所有数据库</h5><p>列出当前用户可以查看的所有数据库：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>可以发现，在上面的列表中有 4 个数据库，它们都是安装 MySQL 5.7时系统自动创建的，其各自功能如下：</p>\n<ul>\n<li>information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等</li>\n<li>mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</li>\n<li>performance_schema：主要用于收集数据库服务器性能参数。</li>\n</ul>\n</blockquote>\n<h5 id=\"实例2：创建并查看数据库\"><a href=\"#实例2：创建并查看数据库\" class=\"headerlink\" title=\"实例2：创建并查看数据库\"></a>实例2：创建并查看数据库</h5><p>先创建一个名为test_db的数据库</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database test_db;</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\">mysql &gt; show databases</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"实例3：使用LIKE从句\"><a href=\"#实例3：使用LIKE从句\" class=\"headerlink\" title=\"实例3：使用LIKE从句\"></a>实例3：使用LIKE从句</h5><p>先创建三个数据库，名字分别是test_db、db_test、db_test_db。</p>\n<p>1）使用LIKE从句，查看与test_db完全匹配的数据库；</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &#39;test_db&#39;;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database (test_db) |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| test_db            |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">1 row in set</span><br></pre></td></tr></table></figure></div>\n\n<p>2) 使用 LIKE 从句，查看名字中包含 test 的数据库：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &#39;%test%&#39;;</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| Database (%test%) |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| db_test           |</span><br><span class=\"line\">| db_test_db        |</span><br><span class=\"line\">| test              |</span><br><span class=\"line\">| test_db           |</span><br><span class=\"line\">| test_db_char      |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>3) 使用 LIKE 从句，查看名字以 db 开头的数据库：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &quot;db%&quot;;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Database (db%) |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| db_test        |</span><br><span class=\"line\">| db_test_db     |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>4) 使用 LIKE 从句，查看名字以 db 结尾的数据库：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &quot;%db&quot;;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Database (%db) |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| db_test_db     |</span><br><span class=\"line\">| test_db        |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h3 id=\"查看数据库基本语法\"><a href=\"#查看数据库基本语法\" class=\"headerlink\" title=\"查看数据库基本语法\"></a>查看数据库基本语法</h3><p>在 MySQL 中，可使用 <code>SHOW DATABASES</code> 语句来查看或显示当前用户权限范围以内的数据库。查看数据库的语法格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES [LIKE &#39;数据库名&#39;];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>语法说明如下： </p>\n<ul>\n<li><p>LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。</p>\n</li>\n<li><p>数据库名由单引号<code>&#39; &#39;</code>包围。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"案例详解\"><a href=\"#案例详解\" class=\"headerlink\" title=\"案例详解\"></a>案例详解</h3><h5 id=\"实例1：查看所有数据库\"><a href=\"#实例1：查看所有数据库\" class=\"headerlink\" title=\"实例1：查看所有数据库\"></a>实例1：查看所有数据库</h5><p>列出当前用户可以查看的所有数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">10 rows in set</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以发现，在上面的列表中有 4 个数据库，它们都是安装 MySQL 5.7时系统自动创建的，其各自功能如下：</p>\n<ul>\n<li>information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等</li>\n<li>mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</li>\n<li>performance_schema：主要用于收集数据库服务器性能参数。</li>\n</ul>\n</blockquote>\n<h5 id=\"实例2：创建并查看数据库\"><a href=\"#实例2：创建并查看数据库\" class=\"headerlink\" title=\"实例2：创建并查看数据库\"></a>实例2：创建并查看数据库</h5><p>先创建一个名为test_db的数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database test_db;</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\">mysql &gt; show databases</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例3：使用LIKE从句\"><a href=\"#实例3：使用LIKE从句\" class=\"headerlink\" title=\"实例3：使用LIKE从句\"></a>实例3：使用LIKE从句</h5><p>先创建三个数据库，名字分别是test_db、db_test、db_test_db。</p>\n<p>1）使用LIKE从句，查看与test_db完全匹配的数据库；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &#39;test_db&#39;;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database (test_db) |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| test_db            |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">1 row in set</span><br></pre></td></tr></table></figure>\n\n<p>2) 使用 LIKE 从句，查看名字中包含 test 的数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &#39;%test%&#39;;</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| Database (%test%) |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| db_test           |</span><br><span class=\"line\">| db_test_db        |</span><br><span class=\"line\">| test              |</span><br><span class=\"line\">| test_db           |</span><br><span class=\"line\">| test_db_char      |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>3) 使用 LIKE 从句，查看名字以 db 开头的数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &quot;db%&quot;;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Database (db%) |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| db_test        |</span><br><span class=\"line\">| db_test_db     |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>4) 使用 LIKE 从句，查看名字以 db 结尾的数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases like &quot;%db&quot;;</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| Database (%db) |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">| db_test_db     |</span><br><span class=\"line\">| test_db        |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">2 rows in set</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL检查约束(CHECK)","keywords":"mysql检查约束 CHECK","description":"mysql检查约束 CHECK","cover":"https://tvax1.sinaimg.cn/large/9fc55f55ly1gcs3s6f0z3j20xc0m9x6p.jpg","abbrlink":"e2afda08","date":"2020-03-13T01:57:09.000Z","top_img":null,"copyright":null,"_content":"\nMySQL检查约束(CHECK)可以通过`CREATE`或者`ALTER TABLE` 语句实现，根据用户实际的完整性要求来定义。它可以分别对列或表实施 CHECK 约束。\n\n# 选取设置检查约束的字段\n\n检查约束使用 ``CHECK``关键字，具体的语法格式如下：\n\n```mysql\nCHECK  <表达式>\n```\n\n> 其中：`<表达式>`指的就是 SQL 表达式，用于指定需要检查的限定条件。\n>\n> 若将 CHECK 约束子句置于表中某个列的定义之后，则这种约束也称为基于列的 CHECK 约束。\n\n# 在创建表是设置检查约束\n\n创建表时设置检查约束的语法规则如下：\n\n```mysql\n字段名 类型  CHECK(<检查约束>)\n```\n\n【实例1】在`test`数据库中创建`test`数据表，要求 `status`字段值 1 或者0，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table test(\n    -> status varchar(1) check(status=1 or status=0)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n```\n\n为验证，这个约束是否起作用，我们现在就可以向表中插入数据。\n\n```mysql\nmysql> insert into test value(5);\nQuery OK, 1 row affected\n\nmysql> select * from test;\n+--------+\n| status |\n+--------+\n| 5      |\n+--------+\n1 row in set\n\nmysql> \n```\n\n通过以上可以清楚看到这个status可以正常插入的\n\n**为什么呢**\n\n这也是mysql的一个bug，在官方文档中也有解释，我们不必担心这个问题\n\n这里大家可以看到我们使用的是枚举。\n\n\n\n","source":"_posts/MySQL检查约束-CHECK.md","raw":"---\ntitle: MySQL检查约束(CHECK)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: mysql检查约束 CHECK\ndescription: mysql检查约束 CHECK\ncover: 'https://tvax1.sinaimg.cn/large/9fc55f55ly1gcs3s6f0z3j20xc0m9x6p.jpg'\nabbrlink: e2afda08\ndate: 2020-03-13 09:57:09\ntop_img:\ncopyright:\n---\n\nMySQL检查约束(CHECK)可以通过`CREATE`或者`ALTER TABLE` 语句实现，根据用户实际的完整性要求来定义。它可以分别对列或表实施 CHECK 约束。\n\n# 选取设置检查约束的字段\n\n检查约束使用 ``CHECK``关键字，具体的语法格式如下：\n\n```mysql\nCHECK  <表达式>\n```\n\n> 其中：`<表达式>`指的就是 SQL 表达式，用于指定需要检查的限定条件。\n>\n> 若将 CHECK 约束子句置于表中某个列的定义之后，则这种约束也称为基于列的 CHECK 约束。\n\n# 在创建表是设置检查约束\n\n创建表时设置检查约束的语法规则如下：\n\n```mysql\n字段名 类型  CHECK(<检查约束>)\n```\n\n【实例1】在`test`数据库中创建`test`数据表，要求 `status`字段值 1 或者0，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table test(\n    -> status varchar(1) check(status=1 or status=0)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\n```\n\n为验证，这个约束是否起作用，我们现在就可以向表中插入数据。\n\n```mysql\nmysql> insert into test value(5);\nQuery OK, 1 row affected\n\nmysql> select * from test;\n+--------+\n| status |\n+--------+\n| 5      |\n+--------+\n1 row in set\n\nmysql> \n```\n\n通过以上可以清楚看到这个status可以正常插入的\n\n**为什么呢**\n\n这也是mysql的一个bug，在官方文档中也有解释，我们不必担心这个问题\n\n这里大家可以看到我们使用的是枚举。\n\n\n\n","slug":"MySQL检查约束-CHECK","published":1,"updated":"2020-03-13T02:43:58.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mvb001ntvm08rqigjzb","content":"<p>MySQL检查约束(CHECK)可以通过<code>CREATE</code>或者<code>ALTER TABLE</code> 语句实现，根据用户实际的完整性要求来定义。它可以分别对列或表实施 CHECK 约束。</p>\n<h1 id=\"选取设置检查约束的字段\"><a href=\"#选取设置检查约束的字段\" class=\"headerlink\" title=\"选取设置检查约束的字段\"></a>选取设置检查约束的字段</h1><p>检查约束使用 <code>CHECK</code>关键字，具体的语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHECK  &lt;表达式&gt;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>其中：<code>&lt;表达式&gt;</code>指的就是 SQL 表达式，用于指定需要检查的限定条件。</p>\n<p>若将 CHECK 约束子句置于表中某个列的定义之后，则这种约束也称为基于列的 CHECK 约束。</p>\n</blockquote>\n<h1 id=\"在创建表是设置检查约束\"><a href=\"#在创建表是设置检查约束\" class=\"headerlink\" title=\"在创建表是设置检查约束\"></a>在创建表是设置检查约束</h1><p>创建表时设置检查约束的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段名 类型  CHECK(&lt;检查约束&gt;)</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例1】在<code>test</code>数据库中创建<code>test</code>数据表，要求 <code>status</code>字段值 1 或者0，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table test(</span><br><span class=\"line\">    -&gt; status varchar(1) check(status&#x3D;1 or status&#x3D;0)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br></pre></td></tr></table></figure></div>\n\n<p>为验证，这个约束是否起作用，我们现在就可以向表中插入数据。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into test value(5);</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from test;</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">| status |</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">| 5      |</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>通过以上可以清楚看到这个status可以正常插入的</p>\n<p><strong>为什么呢</strong></p>\n<p>这也是mysql的一个bug，在官方文档中也有解释，我们不必担心这个问题</p>\n<p>这里大家可以看到我们使用的是枚举。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL检查约束(CHECK)可以通过<code>CREATE</code>或者<code>ALTER TABLE</code> 语句实现，根据用户实际的完整性要求来定义。它可以分别对列或表实施 CHECK 约束。</p>\n<h1 id=\"选取设置检查约束的字段\"><a href=\"#选取设置检查约束的字段\" class=\"headerlink\" title=\"选取设置检查约束的字段\"></a>选取设置检查约束的字段</h1><p>检查约束使用 <code>CHECK</code>关键字，具体的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHECK  &lt;表达式&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中：<code>&lt;表达式&gt;</code>指的就是 SQL 表达式，用于指定需要检查的限定条件。</p>\n<p>若将 CHECK 约束子句置于表中某个列的定义之后，则这种约束也称为基于列的 CHECK 约束。</p>\n</blockquote>\n<h1 id=\"在创建表是设置检查约束\"><a href=\"#在创建表是设置检查约束\" class=\"headerlink\" title=\"在创建表是设置检查约束\"></a>在创建表是设置检查约束</h1><p>创建表时设置检查约束的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段名 类型  CHECK(&lt;检查约束&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>【实例1】在<code>test</code>数据库中创建<code>test</code>数据表，要求 <code>status</code>字段值 1 或者0，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table test(</span><br><span class=\"line\">    -&gt; status varchar(1) check(status&#x3D;1 or status&#x3D;0)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br></pre></td></tr></table></figure>\n\n<p>为验证，这个约束是否起作用，我们现在就可以向表中插入数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into test value(5);</span><br><span class=\"line\">Query OK, 1 row affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from test;</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">| status |</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">| 5      |</span><br><span class=\"line\">+--------+</span><br><span class=\"line\">1 row in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过以上可以清楚看到这个status可以正常插入的</p>\n<p><strong>为什么呢</strong></p>\n<p>这也是mysql的一个bug，在官方文档中也有解释，我们不必担心这个问题</p>\n<p>这里大家可以看到我们使用的是枚举。</p>\n"},{"title":"MySQL非空约束(NOT NuLL)","keywords":"Mysql非空约束、删除约束、修改约束","description":"Mysql非空约束、删除约束、修改约束","cover":"https://tva4.sinaimg.cn/large/9fc55f55ly1gcux0ypuwfj20sf0iy4qp.jpg","abbrlink":"7857d14","date":"2020-03-15T12:48:33.000Z","top_img":null,"copyright":null,"_content":"\nMySQL非空约束（NOT NULL）可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。\n\n# 在创建表时设置非空约束\n\n创建表时可以使用 ``NOT NULL`` 关键字设置非空约束，具体的语法规则如下：\n\n```mysql\n<字段名> <数据类型> NOT NULL;\n```\n\n【实例1】创建数据表`dept`，指定部门名称不能为空，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table emp(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100) not null,\n    -> msg varchar(100)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | NO   |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n# 删除非空约束\n\n修改时删除非空约束的语法规则如下：\n\n```mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <字段名> <数据类型> NULL;\n```\n\n【实例2】修改数据表`emp`,将部门名称的非空约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table emp\n    -> change column name  name varchar(100) null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------\n```\n\n# 在修改表时添加非空约束\n\n修改表时设置非空约束的语法规则如下：\n\n```mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名>\n<字段名> <数据类型> NOT NULL;\n```\n\n【实例3】修改数据表`emp`，指定部门位置不能为空，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table emp\n    -> change column name name varchar(100) not null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | NO   |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n\n\n\n\n","source":"_posts/MySQL非空约束-NOT-NuLL.md","raw":"---\ntitle: MySQL非空约束(NOT NuLL)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql非空约束、删除约束、修改约束\ndescription: Mysql非空约束、删除约束、修改约束\ncover: 'https://tva4.sinaimg.cn/large/9fc55f55ly1gcux0ypuwfj20sf0iy4qp.jpg'\nabbrlink: 7857d14\ndate: 2020-03-15 20:48:33\ntop_img:\ncopyright:\n---\n\nMySQL非空约束（NOT NULL）可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。\n\n# 在创建表时设置非空约束\n\n创建表时可以使用 ``NOT NULL`` 关键字设置非空约束，具体的语法规则如下：\n\n```mysql\n<字段名> <数据类型> NOT NULL;\n```\n\n【实例1】创建数据表`dept`，指定部门名称不能为空，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table emp(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100) not null,\n    -> msg varchar(100)\n    -> );\nQuery OK, 0 rows affected\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | NO   |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n# 删除非空约束\n\n修改时删除非空约束的语法规则如下：\n\n```mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <字段名> <数据类型> NULL;\n```\n\n【实例2】修改数据表`emp`,将部门名称的非空约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table emp\n    -> change column name  name varchar(100) null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | YES  |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------\n```\n\n# 在修改表时添加非空约束\n\n修改表时设置非空约束的语法规则如下：\n\n```mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名>\n<字段名> <数据类型> NOT NULL;\n```\n\n【实例3】修改数据表`emp`，指定部门位置不能为空，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table emp\n    -> change column name name varchar(100) not null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc emp;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(100) | NO   |     | NULL    |                |\n| msg   | varchar(100) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n3 rows in set\n\nmysql> \n```\n\n\n\n\n\n","slug":"MySQL非空约束-NOT-NuLL","published":1,"updated":"2020-03-15T13:06:34.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mvc001qtvm0ac644bsl","content":"<p>MySQL非空约束（NOT NULL）可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。</p>\n<h1 id=\"在创建表时设置非空约束\"><a href=\"#在创建表时设置非空约束\" class=\"headerlink\" title=\"在创建表时设置非空约束\"></a>在创建表时设置非空约束</h1><p>创建表时可以使用 <code>NOT NULL</code> 关键字设置非空约束，具体的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; NOT NULL;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例1】创建数据表<code>dept</code>，指定部门名称不能为空，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table emp(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100) not null,</span><br><span class=\"line\">    -&gt; msg varchar(100)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | NO   |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"删除非空约束\"><a href=\"#删除非空约束\" class=\"headerlink\" title=\"删除非空约束\"></a>删除非空约束</h1><p>修改时删除非空约束的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;字段名&gt; &lt;数据类型&gt; NULL;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】修改数据表<code>emp</code>,将部门名称的非空约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table emp</span><br><span class=\"line\">    -&gt; change column name  name varchar(100) null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在修改表时添加非空约束\"><a href=\"#在修改表时添加非空约束\" class=\"headerlink\" title=\"在修改表时添加非空约束\"></a>在修改表时添加非空约束</h1><p>修改表时设置非空约束的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt;</span><br><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; NOT NULL;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】修改数据表<code>emp</code>，指定部门位置不能为空，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table emp</span><br><span class=\"line\">    -&gt; change column name name varchar(100) not null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | NO   |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>MySQL非空约束（NOT NULL）可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。</p>\n<h1 id=\"在创建表时设置非空约束\"><a href=\"#在创建表时设置非空约束\" class=\"headerlink\" title=\"在创建表时设置非空约束\"></a>在创建表时设置非空约束</h1><p>创建表时可以使用 <code>NOT NULL</code> 关键字设置非空约束，具体的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>【实例1】创建数据表<code>dept</code>，指定部门名称不能为空，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table emp(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100) not null,</span><br><span class=\"line\">    -&gt; msg varchar(100)</span><br><span class=\"line\">    -&gt; );</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | NO   |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除非空约束\"><a href=\"#删除非空约束\" class=\"headerlink\" title=\"删除非空约束\"></a>删除非空约束</h1><p>修改时删除非空约束的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;字段名&gt; &lt;数据类型&gt; NULL;</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】修改数据表<code>emp</code>,将部门名称的非空约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table emp</span><br><span class=\"line\">    -&gt; change column name  name varchar(100) null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在修改表时添加非空约束\"><a href=\"#在修改表时添加非空约束\" class=\"headerlink\" title=\"在修改表时添加非空约束\"></a>在修改表时添加非空约束</h1><p>修改表时设置非空约束的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt;</span><br><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】修改数据表<code>emp</code>，指定部门位置不能为空，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table emp</span><br><span class=\"line\">    -&gt; change column name name varchar(100) not null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc emp;</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name  | varchar(100) | NO   |     | NULL    |                |</span><br><span class=\"line\">| msg   | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+-------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"MySQL默认值(DEFAULT)","keywords":"MySQL添加默认值、修改默认值、删除默认值","description":"MySQL添加默认值、修改默认值、删除默认值","cover":"https://tva3.sinaimg.cn/large/9fc55f55ly1gctglmapvuj20sg0sg7kz.jpg","top_img":"https://tva1.sinaimg.cn/large/9fc55f55ly1gctgmapg5lj20sg0b3asm.jpg","abbrlink":"bfc9a30b","date":"2020-03-14T06:24:25.000Z","copyright":null,"_content":"\n“默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL默认值约束用来指定某列的默认值。\n\n# 创建表是设置默认值约束\n\n创建表时可以使用 ``DEFAULT`` 关键字设置默认值约束，具体的语法规则如下：\n\n```mysql\n<字段名> <数据类型> DEFAULT <默认值>;\n```\n\n【实例1】创建数据表`student`,指定性别默认值为\"男\"，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table student(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100),\n    -> sex varchar(10) default '男',\n    -> address varchar(100)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | 男      |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n```\n\n# 在修改表时添加默认值约束\n\n修改表时添加默认值约束的语法规则如下： \n\n``` mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <数据类型> DEFAULT <默认值>;\n```\n\n【实例2】修改数据表`student`，将性别的的默认值修改为 '女'，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student\n    -> change column sex\n    -> sex varchar(10) default '女';\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | 女      |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n\nmysql> \n```\n\n# 删除默认值约束\n\n修改表时删除默认值约束的语法规则如下： \n\n```mysql\n修改表时删除默认值约束的语法规则如下：\n\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <字段名> <数据类型> DEFAULT NULL;\n```\n\n【实例3】修改数据表 ``student``，将性别位置的默认值约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student\n    -> change column sex\n    -> sex varchar(10) default null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | NULL    |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n\nmysql> \n```\n\n","source":"_posts/MySQL默认值-DEFAULT.md","raw":"---\ntitle: MySQL默认值(DEFAULT)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: MySQL添加默认值、修改默认值、删除默认值\ndescription: MySQL添加默认值、修改默认值、删除默认值\ncover: 'https://tva3.sinaimg.cn/large/9fc55f55ly1gctglmapvuj20sg0sg7kz.jpg'\ntop_img: 'https://tva1.sinaimg.cn/large/9fc55f55ly1gctgmapg5lj20sg0b3asm.jpg'\nabbrlink: bfc9a30b\ndate: 2020-03-14 14:24:25\ncopyright:\n---\n\n“默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL默认值约束用来指定某列的默认值。\n\n# 创建表是设置默认值约束\n\n创建表时可以使用 ``DEFAULT`` 关键字设置默认值约束，具体的语法规则如下：\n\n```mysql\n<字段名> <数据类型> DEFAULT <默认值>;\n```\n\n【实例1】创建数据表`student`,指定性别默认值为\"男\"，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> create table student(\n    -> id int(11) primary key auto_increment,\n    -> name varchar(100),\n    -> sex varchar(10) default '男',\n    -> address varchar(100)\n    -> )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\nQuery OK, 0 rows affected\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | 男      |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n```\n\n# 在修改表时添加默认值约束\n\n修改表时添加默认值约束的语法规则如下： \n\n``` mysql\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <数据类型> DEFAULT <默认值>;\n```\n\n【实例2】修改数据表`student`，将性别的的默认值修改为 '女'，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student\n    -> change column sex\n    -> sex varchar(10) default '女';\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | 女      |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n\nmysql> \n```\n\n# 删除默认值约束\n\n修改表时删除默认值约束的语法规则如下： \n\n```mysql\n修改表时删除默认值约束的语法规则如下：\n\nALTER TABLE <数据表名>\nCHANGE COLUMN <字段名> <字段名> <数据类型> DEFAULT NULL;\n```\n\n【实例3】修改数据表 ``student``，将性别位置的默认值约束删除，输入的 SQL 语句和运行结果如下所示。\n\n```mysql\nmysql> alter table student\n    -> change column sex\n    -> sex varchar(10) default null;\nQuery OK, 0 rows affected\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(100) | YES  |     | NULL    |                |\n| sex     | varchar(10)  | YES  |     | NULL    |                |\n| address | varchar(100) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set\n\nmysql> \n```\n\n","slug":"MySQL默认值-DEFAULT","published":1,"updated":"2020-03-14T06:53:51.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mve001ttvm025k71um5","content":"<p>“默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL默认值约束用来指定某列的默认值。</p>\n<h1 id=\"创建表是设置默认值约束\"><a href=\"#创建表是设置默认值约束\" class=\"headerlink\" title=\"创建表是设置默认值约束\"></a>创建表是设置默认值约束</h1><p>创建表时可以使用 <code>DEFAULT</code> 关键字设置默认值约束，具体的语法规则如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例1】创建数据表<code>student</code>,指定性别默认值为”男”，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100),</span><br><span class=\"line\">    -&gt; sex varchar(10) default &#39;男&#39;,</span><br><span class=\"line\">    -&gt; address varchar(100)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | 男      |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"在修改表时添加默认值约束\"><a href=\"#在修改表时添加默认值约束\" class=\"headerlink\" title=\"在修改表时添加默认值约束\"></a>在修改表时添加默认值约束</h1><p>修改表时添加默认值约束的语法规则如下： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】修改数据表<code>student</code>，将性别的的默认值修改为 ‘女’，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student</span><br><span class=\"line\">    -&gt; change column sex</span><br><span class=\"line\">    -&gt; sex varchar(10) default &#39;女&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | 女      |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"删除默认值约束\"><a href=\"#删除默认值约束\" class=\"headerlink\" title=\"删除默认值约束\"></a>删除默认值约束</h1><p>修改表时删除默认值约束的语法规则如下： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改表时删除默认值约束的语法规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;字段名&gt; &lt;数据类型&gt; DEFAULT NULL;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】修改数据表 <code>student</code>，将性别位置的默认值约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student</span><br><span class=\"line\">    -&gt; change column sex</span><br><span class=\"line\">    -&gt; sex varchar(10) default null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>“默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL默认值约束用来指定某列的默认值。</p>\n<h1 id=\"创建表是设置默认值约束\"><a href=\"#创建表是设置默认值约束\" class=\"headerlink\" title=\"创建表是设置默认值约束\"></a>创建表是设置默认值约束</h1><p>创建表时可以使用 <code>DEFAULT</code> 关键字设置默认值约束，具体的语法规则如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例1】创建数据表<code>student</code>,指定性别默认值为”男”，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table student(</span><br><span class=\"line\">    -&gt; id int(11) primary key auto_increment,</span><br><span class=\"line\">    -&gt; name varchar(100),</span><br><span class=\"line\">    -&gt; sex varchar(10) default &#39;男&#39;,</span><br><span class=\"line\">    -&gt; address varchar(100)</span><br><span class=\"line\">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | 男      |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在修改表时添加默认值约束\"><a href=\"#在修改表时添加默认值约束\" class=\"headerlink\" title=\"在修改表时添加默认值约束\"></a>在修改表时添加默认值约束</h1><p>修改表时添加默认值约束的语法规则如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】修改数据表<code>student</code>，将性别的的默认值修改为 ‘女’，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student</span><br><span class=\"line\">    -&gt; change column sex</span><br><span class=\"line\">    -&gt; sex varchar(10) default &#39;女&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | 女      |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除默认值约束\"><a href=\"#删除默认值约束\" class=\"headerlink\" title=\"删除默认值约束\"></a>删除默认值约束</h1><p>修改表时删除默认值约束的语法规则如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改表时删除默认值约束的语法规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE &lt;数据表名&gt;</span><br><span class=\"line\">CHANGE COLUMN &lt;字段名&gt; &lt;字段名&gt; &lt;数据类型&gt; DEFAULT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】修改数据表 <code>student</code>，将性别位置的默认值约束删除，输入的 SQL 语句和运行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table student</span><br><span class=\"line\">    -&gt; change column sex</span><br><span class=\"line\">    -&gt; sex varchar(10) default null;</span><br><span class=\"line\">Query OK, 0 rows affected</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc student;</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">| sex     | varchar(10)  | YES  |     | NULL    |                |</span><br><span class=\"line\">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+--------------+------+-----+---------+----------------+</span><br><span class=\"line\">4 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Mysql SELECT:数据表查询语句","keywords":"Mysql数据表查询语句","description":"Mysql数据表查询语句","cover":"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcvm952rrvj20sg0lc49h.jpg","abbrlink":"8da7dc77","date":"2020-03-16T03:14:04.000Z","top_img":null,"copyright":null,"_content":"\nMysql表单查询是指从一张表的数据中查询所需的数据，主要有查询所有字段、查询指定字段、查询指定记录、查询空值、多条件的查询、对查询结果进行排序等。\n\n# MySQL SELECT基本语法\n\nMySQL 从数据表中查询数据的基本语句为 SELECT 语句，基本格式如下：\n\n```mysql\nSELECT \n{* | <字段列名>}\n[\n    FROM <表 1>, <表 2>…\n    [WHERE <表达式>\n    [GROUP BY <group by definition>\n    [HAVING <expression> [{<operator> <expression>}…]]\n    [ORDER BY <order by definition>]\n    [LIMIT[<offset>,] <row count>]\n]\n```\n\n其中，各条子句含义如下： \n\n- `{*|<字段列名>}`包含星号通配符的字段列表，表示查询的字段，其中字段列至少包含一个字段名称，如果要查询多个字段，多个字段之间要用逗号隔开，最后一个字段后不要加逗号。\n- `FROM <表 1>，<表 2>…`，表 1 和表 2 表示查询数据的来源，可以是单个或多个。\n- WHERE 子句是可选项，如果选择该项，将限定查询行必须满足的查询条件。\n- `GROUP BY< 字段 >`，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。\n- `[ORDER BY< 字段 >]`，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC）。\n- `[LIMIT[<offset>，]<row count>]`，该子句告诉 MySQL 每次显示查询出来的数据条数。\n\n# 使用“*”查询表中的全部内容\n\n在 SELECT 语句中使用星号“*”通配符查询所有字段。\n\nSELECT 查询记录最简单的形式是从一个表中检索所有记录，实现的方法是使用星号“*”通配符指定查找所有列的名称，语法格式如下：\n\n```mysql\nSELECT * FROM 表名\n```\n\n【实例2】查询`visits`表中的所有数据，输入的SQL语句和执行结果如下：\n\n```mysql\nmysql> select * from visits;\n+-----+---------------------+------------+-----------+-----------+----------+\n| id  | create_time         | date       | ip_counts | pv_counts | week_day |\n+-----+---------------------+------------+-----------+-----------+----------+\n| 108 | 2019-10-29 21:45:49 | 2019-10-29 |         1 |         1 | Tue      |\n| 109 | 2019-10-30 08:58:54 | 2019-10-30 |         2 |        11 | Wed      |\n| 110 | 2019-10-31 09:04:18 | 2019-10-31 |         2 |         8 | Thu      |\n+-----+---------------------+------------+-----------+-----------+----------+\n3 rows in set\n\nmysql> \n```\n\n由执行结果可知，使用星号“*”通配符时，将返回所有列，数据列按照创建表时的顺序显示。\n\n# 查询表中指定的字段\n\n查询表中的某一个字段的语法格式为： \n\n```MYSQL\n SELECT < 列名 > FROM < 表名 >;\n```\n\n【实例3】查询`visits`数据表中的`ip_counts`字段所有数据，输入的SQL语句和执行结果如下：\n\n```mysql\nmysql> select ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n\nmysql> \n```\n\n如果需要查询多个字段时，中间用逗号“，”分隔开，最后一个字段后面不需要加逗号，语法格式如下： \n\n```mysql\nSELECT <字段名1>,<字段名2>,…,<字段名n> FROM <表名>;\n```\n\n\n\n \n\n","source":"_posts/Mysql-SELECT-数据表查询语句.md","raw":"---\ntitle: 'Mysql SELECT:数据表查询语句'\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql数据表查询语句\ndescription: Mysql数据表查询语句\ncover: 'https://tvax4.sinaimg.cn/large/9fc55f55ly1gcvm952rrvj20sg0lc49h.jpg'\nabbrlink: 8da7dc77\ndate: 2020-03-16 11:14:04\ntop_img:\ncopyright:\n---\n\nMysql表单查询是指从一张表的数据中查询所需的数据，主要有查询所有字段、查询指定字段、查询指定记录、查询空值、多条件的查询、对查询结果进行排序等。\n\n# MySQL SELECT基本语法\n\nMySQL 从数据表中查询数据的基本语句为 SELECT 语句，基本格式如下：\n\n```mysql\nSELECT \n{* | <字段列名>}\n[\n    FROM <表 1>, <表 2>…\n    [WHERE <表达式>\n    [GROUP BY <group by definition>\n    [HAVING <expression> [{<operator> <expression>}…]]\n    [ORDER BY <order by definition>]\n    [LIMIT[<offset>,] <row count>]\n]\n```\n\n其中，各条子句含义如下： \n\n- `{*|<字段列名>}`包含星号通配符的字段列表，表示查询的字段，其中字段列至少包含一个字段名称，如果要查询多个字段，多个字段之间要用逗号隔开，最后一个字段后不要加逗号。\n- `FROM <表 1>，<表 2>…`，表 1 和表 2 表示查询数据的来源，可以是单个或多个。\n- WHERE 子句是可选项，如果选择该项，将限定查询行必须满足的查询条件。\n- `GROUP BY< 字段 >`，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。\n- `[ORDER BY< 字段 >]`，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC）。\n- `[LIMIT[<offset>，]<row count>]`，该子句告诉 MySQL 每次显示查询出来的数据条数。\n\n# 使用“*”查询表中的全部内容\n\n在 SELECT 语句中使用星号“*”通配符查询所有字段。\n\nSELECT 查询记录最简单的形式是从一个表中检索所有记录，实现的方法是使用星号“*”通配符指定查找所有列的名称，语法格式如下：\n\n```mysql\nSELECT * FROM 表名\n```\n\n【实例2】查询`visits`表中的所有数据，输入的SQL语句和执行结果如下：\n\n```mysql\nmysql> select * from visits;\n+-----+---------------------+------------+-----------+-----------+----------+\n| id  | create_time         | date       | ip_counts | pv_counts | week_day |\n+-----+---------------------+------------+-----------+-----------+----------+\n| 108 | 2019-10-29 21:45:49 | 2019-10-29 |         1 |         1 | Tue      |\n| 109 | 2019-10-30 08:58:54 | 2019-10-30 |         2 |        11 | Wed      |\n| 110 | 2019-10-31 09:04:18 | 2019-10-31 |         2 |         8 | Thu      |\n+-----+---------------------+------------+-----------+-----------+----------+\n3 rows in set\n\nmysql> \n```\n\n由执行结果可知，使用星号“*”通配符时，将返回所有列，数据列按照创建表时的顺序显示。\n\n# 查询表中指定的字段\n\n查询表中的某一个字段的语法格式为： \n\n```MYSQL\n SELECT < 列名 > FROM < 表名 >;\n```\n\n【实例3】查询`visits`数据表中的`ip_counts`字段所有数据，输入的SQL语句和执行结果如下：\n\n```mysql\nmysql> select ip_counts from visits;\n+-----------+\n| ip_counts |\n+-----------+\n|         1 |\n|         2 |\n|         2 |\n+-----------+\n3 rows in set\n\nmysql> \n```\n\n如果需要查询多个字段时，中间用逗号“，”分隔开，最后一个字段后面不需要加逗号，语法格式如下： \n\n```mysql\nSELECT <字段名1>,<字段名2>,…,<字段名n> FROM <表名>;\n```\n\n\n\n \n\n","slug":"Mysql-SELECT-数据表查询语句","published":1,"updated":"2020-03-16T03:40:07.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7mvf001wtvm07iyjgjej","content":"<p>Mysql表单查询是指从一张表的数据中查询所需的数据，主要有查询所有字段、查询指定字段、查询指定记录、查询空值、多条件的查询、对查询结果进行排序等。</p>\n<h1 id=\"MySQL-SELECT基本语法\"><a href=\"#MySQL-SELECT基本语法\" class=\"headerlink\" title=\"MySQL SELECT基本语法\"></a>MySQL SELECT基本语法</h1><p>MySQL 从数据表中查询数据的基本语句为 SELECT 语句，基本格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT </span><br><span class=\"line\">&#123;* | &lt;字段列名&gt;&#125;</span><br><span class=\"line\">[</span><br><span class=\"line\">    FROM &lt;表 1&gt;, &lt;表 2&gt;…</span><br><span class=\"line\">    [WHERE &lt;表达式&gt;</span><br><span class=\"line\">    [GROUP BY &lt;group by definition&gt;</span><br><span class=\"line\">    [HAVING &lt;expression&gt; [&#123;&lt;operator&gt; &lt;expression&gt;&#125;…]]</span><br><span class=\"line\">    [ORDER BY &lt;order by definition&gt;]</span><br><span class=\"line\">    [LIMIT[&lt;offset&gt;,] &lt;row count&gt;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，各条子句含义如下： </p>\n<ul>\n<li><code>{*|&lt;字段列名&gt;}</code>包含星号通配符的字段列表，表示查询的字段，其中字段列至少包含一个字段名称，如果要查询多个字段，多个字段之间要用逗号隔开，最后一个字段后不要加逗号。</li>\n<li><code>FROM &lt;表 1&gt;，&lt;表 2&gt;…</code>，表 1 和表 2 表示查询数据的来源，可以是单个或多个。</li>\n<li>WHERE 子句是可选项，如果选择该项，将限定查询行必须满足的查询条件。</li>\n<li><code>GROUP BY&lt; 字段 &gt;</code>，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。</li>\n<li><code>[ORDER BY&lt; 字段 &gt;]</code>，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC）。</li>\n<li><code>[LIMIT[&lt;offset&gt;，]&lt;row count&gt;]</code>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li>\n</ul>\n<h1 id=\"使用“-”查询表中的全部内容\"><a href=\"#使用“-”查询表中的全部内容\" class=\"headerlink\" title=\"使用“*”查询表中的全部内容\"></a>使用“*”查询表中的全部内容</h1><p>在 SELECT 语句中使用星号“*”通配符查询所有字段。</p>\n<p>SELECT 查询记录最简单的形式是从一个表中检索所有记录，实现的方法是使用星号“*”通配符指定查找所有列的名称，语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM 表名</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例2】查询<code>visits</code>表中的所有数据，输入的SQL语句和执行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from visits;</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">| id  | create_time         | date       | ip_counts | pv_counts | week_day |</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">| 108 | 2019-10-29 21:45:49 | 2019-10-29 |         1 |         1 | Tue      |</span><br><span class=\"line\">| 109 | 2019-10-30 08:58:54 | 2019-10-30 |         2 |        11 | Wed      |</span><br><span class=\"line\">| 110 | 2019-10-31 09:04:18 | 2019-10-31 |         2 |         8 | Thu      |</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>由执行结果可知，使用星号“*”通配符时，将返回所有列，数据列按照创建表时的顺序显示。</p>\n<h1 id=\"查询表中指定的字段\"><a href=\"#查询表中指定的字段\" class=\"headerlink\" title=\"查询表中指定的字段\"></a>查询表中指定的字段</h1><p>查询表中的某一个字段的语法格式为： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt; 列名 &gt; FROM &lt; 表名 &gt;;</span><br></pre></td></tr></table></figure></div>\n\n<p>【实例3】查询<code>visits</code>数据表中的<code>ip_counts</code>字段所有数据，输入的SQL语句和执行结果如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>如果需要查询多个字段时，中间用逗号“，”分隔开，最后一个字段后面不需要加逗号，语法格式如下： </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt;字段名1&gt;,&lt;字段名2&gt;,…,&lt;字段名n&gt; FROM &lt;表名&gt;;</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>Mysql表单查询是指从一张表的数据中查询所需的数据，主要有查询所有字段、查询指定字段、查询指定记录、查询空值、多条件的查询、对查询结果进行排序等。</p>\n<h1 id=\"MySQL-SELECT基本语法\"><a href=\"#MySQL-SELECT基本语法\" class=\"headerlink\" title=\"MySQL SELECT基本语法\"></a>MySQL SELECT基本语法</h1><p>MySQL 从数据表中查询数据的基本语句为 SELECT 语句，基本格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT </span><br><span class=\"line\">&#123;* | &lt;字段列名&gt;&#125;</span><br><span class=\"line\">[</span><br><span class=\"line\">    FROM &lt;表 1&gt;, &lt;表 2&gt;…</span><br><span class=\"line\">    [WHERE &lt;表达式&gt;</span><br><span class=\"line\">    [GROUP BY &lt;group by definition&gt;</span><br><span class=\"line\">    [HAVING &lt;expression&gt; [&#123;&lt;operator&gt; &lt;expression&gt;&#125;…]]</span><br><span class=\"line\">    [ORDER BY &lt;order by definition&gt;]</span><br><span class=\"line\">    [LIMIT[&lt;offset&gt;,] &lt;row count&gt;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>其中，各条子句含义如下： </p>\n<ul>\n<li><code>{*|&lt;字段列名&gt;}</code>包含星号通配符的字段列表，表示查询的字段，其中字段列至少包含一个字段名称，如果要查询多个字段，多个字段之间要用逗号隔开，最后一个字段后不要加逗号。</li>\n<li><code>FROM &lt;表 1&gt;，&lt;表 2&gt;…</code>，表 1 和表 2 表示查询数据的来源，可以是单个或多个。</li>\n<li>WHERE 子句是可选项，如果选择该项，将限定查询行必须满足的查询条件。</li>\n<li><code>GROUP BY&lt; 字段 &gt;</code>，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。</li>\n<li><code>[ORDER BY&lt; 字段 &gt;]</code>，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC）。</li>\n<li><code>[LIMIT[&lt;offset&gt;，]&lt;row count&gt;]</code>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li>\n</ul>\n<h1 id=\"使用“-”查询表中的全部内容\"><a href=\"#使用“-”查询表中的全部内容\" class=\"headerlink\" title=\"使用“*”查询表中的全部内容\"></a>使用“*”查询表中的全部内容</h1><p>在 SELECT 语句中使用星号“*”通配符查询所有字段。</p>\n<p>SELECT 查询记录最简单的形式是从一个表中检索所有记录，实现的方法是使用星号“*”通配符指定查找所有列的名称，语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM 表名</span><br></pre></td></tr></table></figure>\n\n<p>【实例2】查询<code>visits</code>表中的所有数据，输入的SQL语句和执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from visits;</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">| id  | create_time         | date       | ip_counts | pv_counts | week_day |</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">| 108 | 2019-10-29 21:45:49 | 2019-10-29 |         1 |         1 | Tue      |</span><br><span class=\"line\">| 109 | 2019-10-30 08:58:54 | 2019-10-30 |         2 |        11 | Wed      |</span><br><span class=\"line\">| 110 | 2019-10-31 09:04:18 | 2019-10-31 |         2 |         8 | Thu      |</span><br><span class=\"line\">+-----+---------------------+------------+-----------+-----------+----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由执行结果可知，使用星号“*”通配符时，将返回所有列，数据列按照创建表时的顺序显示。</p>\n<h1 id=\"查询表中指定的字段\"><a href=\"#查询表中指定的字段\" class=\"headerlink\" title=\"查询表中指定的字段\"></a>查询表中指定的字段</h1><p>查询表中的某一个字段的语法格式为： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt; 列名 &gt; FROM &lt; 表名 &gt;;</span><br></pre></td></tr></table></figure>\n\n<p>【实例3】查询<code>visits</code>数据表中的<code>ip_counts</code>字段所有数据，输入的SQL语句和执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ip_counts from visits;</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| ip_counts |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|         1 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">|         2 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">3 rows in set</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果需要查询多个字段时，中间用逗号“，”分隔开，最后一个字段后面不需要加逗号，语法格式如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &lt;字段名1&gt;,&lt;字段名2&gt;,…,&lt;字段名n&gt; FROM &lt;表名&gt;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"Mysql分组查询(group by)","keywords":"Mysql分组查询 group by的使用方法","description":"Mysql分组查询 group by的使用方法","abbrlink":"7add2402","date":"2020-04-07T02:04:42.000Z","cover":"https://tva1.sinaimg.cn/large/9fc55f55gy1gdl7l4difxj20sg0lcb29.jpg","top_img":null,"copyright":null,"_content":"\n在 MySQL SELECT 语句中，允许使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。\n\n基于语法格式如下：\n\n```mysql\nGROUP BY { <列名> | <表达式> | <位置> } [ASC | DESC]\n```\n\n语法说明如下：\n\n> `<列名>`：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。\n>\n> `<表达式>`：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS' 人数 ' 作为 SELECT 选择列表清单的一项。\n>\n> `<位置>`：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。\n>\n>  `ASC|DESC`：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后\n\n对于GROUP BY字句的使用，需要注意以下几点：\n\n- GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。\n- GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。\n- 除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。\n- 若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。\n\n【实例】根据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来，输入的SQL语句和执行结果如下所示。\n\n```mysql\nmysql> select dept_id,group_concat(name) as name\n    -> from tb_students_info\n    -> group by dept_id;\n+---------+------------+\n| dept_id | name       |\n+---------+------------+\n| NULL    | Susan      |\n|       1 | Dany       |\n|       2 | Jane       |\n|       3 | Henry,John |\n|       4 | Jim        |\n+---------+------------+\n5 rows in set\n\n```\n\n由运行结果可以看出，根据 dept_id 的不同分别统计了 dept_id 相同的姓名。\n\n>group_concat聚合函数的用法：\n>\n>group_concat( [DISTINCT]  要连接的字段   [Order BY 排序字段 ASC/DESC]   [Separator ‘分隔符’] )","source":"_posts/Mysql分组查询-group-by.md","raw":"---\ntitle: Mysql分组查询(group by)\ntags:\n  - Mysql\ncategories: Mysql\nkeywords: Mysql分组查询 group by的使用方法\ndescription: Mysql分组查询 group by的使用方法\nabbrlink: 7add2402\ndate: 2020-04-07 10:04:42\ncover: https://tva1.sinaimg.cn/large/9fc55f55gy1gdl7l4difxj20sg0lcb29.jpg\ntop_img:\ncopyright:\n---\n\n在 MySQL SELECT 语句中，允许使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。\n\n基于语法格式如下：\n\n```mysql\nGROUP BY { <列名> | <表达式> | <位置> } [ASC | DESC]\n```\n\n语法说明如下：\n\n> `<列名>`：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。\n>\n> `<表达式>`：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS' 人数 ' 作为 SELECT 选择列表清单的一项。\n>\n> `<位置>`：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。\n>\n>  `ASC|DESC`：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后\n\n对于GROUP BY字句的使用，需要注意以下几点：\n\n- GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。\n- GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。\n- 除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。\n- 若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。\n\n【实例】根据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来，输入的SQL语句和执行结果如下所示。\n\n```mysql\nmysql> select dept_id,group_concat(name) as name\n    -> from tb_students_info\n    -> group by dept_id;\n+---------+------------+\n| dept_id | name       |\n+---------+------------+\n| NULL    | Susan      |\n|       1 | Dany       |\n|       2 | Jane       |\n|       3 | Henry,John |\n|       4 | Jim        |\n+---------+------------+\n5 rows in set\n\n```\n\n由运行结果可以看出，根据 dept_id 的不同分别统计了 dept_id 相同的姓名。\n\n>group_concat聚合函数的用法：\n>\n>group_concat( [DISTINCT]  要连接的字段   [Order BY 排序字段 ASC/DESC]   [Separator ‘分隔符’] )","slug":"Mysql分组查询-group-by","published":1,"updated":"2020-04-07T06:56:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qkq002btvm0hmx31xqd","content":"<p>在 MySQL SELECT 语句中，允许使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。</p>\n<p>基于语法格式如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GROUP BY &#123; &lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt; &#125; [ASC | DESC]</span><br></pre></td></tr></table></figure></div>\n\n<p>语法说明如下：</p>\n<blockquote>\n<p><code>&lt;列名&gt;</code>：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。</p>\n<p><code>&lt;表达式&gt;</code>：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS’ 人数 ‘ 作为 SELECT 选择列表清单的一项。</p>\n<p><code>&lt;位置&gt;</code>：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。</p>\n<p> <code>ASC|DESC</code>：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后</p>\n</blockquote>\n<p>对于GROUP BY字句的使用，需要注意以下几点：</p>\n<ul>\n<li>GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。</li>\n<li>GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。</li>\n<li>除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。</li>\n<li>若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。</li>\n</ul>\n<p>【实例】根据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来，输入的SQL语句和执行结果如下所示。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id,group_concat(name) as name</span><br><span class=\"line\">    -&gt; from tb_students_info</span><br><span class=\"line\">    -&gt; group by dept_id;</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">| dept_id | name       |</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">| NULL    | Susan      |</span><br><span class=\"line\">|       1 | Dany       |</span><br><span class=\"line\">|       2 | Jane       |</span><br><span class=\"line\">|       3 | Henry,John |</span><br><span class=\"line\">|       4 | Jim        |</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure></div>\n\n<p>由运行结果可以看出，根据 dept_id 的不同分别统计了 dept_id 相同的姓名。</p>\n<blockquote>\n<p>group_concat聚合函数的用法：</p>\n<p>group_concat( [DISTINCT]  要连接的字段   [Order BY 排序字段 ASC/DESC]   [Separator ‘分隔符’] )</p>\n</blockquote>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在 MySQL SELECT 语句中，允许使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。</p>\n<p>基于语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GROUP BY &#123; &lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt; &#125; [ASC | DESC]</span><br></pre></td></tr></table></figure>\n\n<p>语法说明如下：</p>\n<blockquote>\n<p><code>&lt;列名&gt;</code>：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。</p>\n<p><code>&lt;表达式&gt;</code>：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS’ 人数 ‘ 作为 SELECT 选择列表清单的一项。</p>\n<p><code>&lt;位置&gt;</code>：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。</p>\n<p> <code>ASC|DESC</code>：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后</p>\n</blockquote>\n<p>对于GROUP BY字句的使用，需要注意以下几点：</p>\n<ul>\n<li>GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。</li>\n<li>GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。</li>\n<li>除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。</li>\n<li>若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。</li>\n</ul>\n<p>【实例】根据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来，输入的SQL语句和执行结果如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id,group_concat(name) as name</span><br><span class=\"line\">    -&gt; from tb_students_info</span><br><span class=\"line\">    -&gt; group by dept_id;</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">| dept_id | name       |</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">| NULL    | Susan      |</span><br><span class=\"line\">|       1 | Dany       |</span><br><span class=\"line\">|       2 | Jane       |</span><br><span class=\"line\">|       3 | Henry,John |</span><br><span class=\"line\">|       4 | Jim        |</span><br><span class=\"line\">+---------+------------+</span><br><span class=\"line\">5 rows in set</span><br></pre></td></tr></table></figure>\n\n<p>由运行结果可以看出，根据 dept_id 的不同分别统计了 dept_id 相同的姓名。</p>\n<blockquote>\n<p>group_concat聚合函数的用法：</p>\n<p>group_concat( [DISTINCT]  要连接的字段   [Order BY 排序字段 ASC/DESC]   [Separator ‘分隔符’] )</p>\n</blockquote>\n"},{"title":"OSi模型与TCP/IP模型","keywords":"OSI模型TCP/IP模型","description":"OSI模型TCP/IP模型","cover":"https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg","abbrlink":"96494195","date":"2020-03-05T13:35:46.000Z","top_img":null,"copyright":null,"_content":"\n> OSI模型和TCP/IP模型几乎应该说是网络通信领域中使用频率最高的两个术语。特别是TCP/IP，它几乎成了网络通信的代名词。从整体上先大致了解一下OSI模型和TCP/IP模型，对于深入学习各种网络通信知识，具有非常重要的指导性作用\n\n# OSI模型\n\nOSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互连模型。\n\n**OSI是一个7层功能协议模型，分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。**\n\n1. **物理层：实现物理信号的发送、接收，以及该介质的传输过程。**\n2. **数据链路层：建立逻辑意义上的数据链路，实现数据的点到点或点到多点方式直接通信。**\n3. **网络层：实现数据从任何一个节点到任何另外一个节点的整个传输过程**\n4. **传输层：建立、维护和取消一次端到端的数据传输过程，控制传输节奏的快慢，调整数据的排序**\n5. **会话层：在通信双方之间建立、管理和终止会话，确定双方是否应该开始进行某一方发起的通信。**\n6. **表示层:进行数据格式的转换，以确保一个系统生成的应用数据能够被另一个系统的应用层所识别和理解。**\n7. **应用层：向用户应用软件提供丰富的系统应用接口**\n\n![img](https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg)\n\n\n\n从OSI模型的观点来看，计算机发送数据时，数据会从高层向底层逐层传递，在传递过程中进行相应的封装，并最终通过物理层转换为光/电信号发送出去。计算机接收到数据时，数据会从底层向高层传递，在传递过程中进行相应的解封装。\n\n![img](http://p9.pstatp.com/large/pgc-image/1b6183ddc63047459ac1824d8d7a495b)\n\n\n\n \n\n# TCP/IP协议簇\n\n很多初学者误认为TCP/IP就是一种协议，其实它包含了很多的协议，只是TCP/IP是这个协议簇中的两个非常重要的协议，分别是TCP和IP。\n\n下图给出了TCP/IP模型有两个不同的版本，以及它们与OSI模型的比较。\n\n![img](http://p1.pstatp.com/large/pgc-image/bc53b3b74dc94cb39edbb2d617fe2a9b)\n\n\n\nTCP/IP模型与OSI模型再层次的划分上稍有差异，单这种层次划分的差异并不是二者之间的主要差异。TCP/IP模型与OSI模型的主要差异在于二者所使用的的具体协议不同。下图列出TCP/IP模型与OSI模型各自所使用的部分协议。\n\n![img](http://p1.pstatp.com/large/pgc-image/cc4620c319c8494dbbbaeb10d51b08e0)","source":"_posts/OSI模型与TCP-IP模型.md","raw":"---\ntitle: OSi模型与TCP/IP模型\ntags:\n  - 数通\ncategories: 数通\nkeywords: OSI模型TCP/IP模型\ndescription: OSI模型TCP/IP模型\ncover: 'https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg'\nabbrlink: '96494195'\ndate: 2020-03-05 21:35:46\ntop_img:\ncopyright:\n---\n\n> OSI模型和TCP/IP模型几乎应该说是网络通信领域中使用频率最高的两个术语。特别是TCP/IP，它几乎成了网络通信的代名词。从整体上先大致了解一下OSI模型和TCP/IP模型，对于深入学习各种网络通信知识，具有非常重要的指导性作用\n\n# OSI模型\n\nOSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互连模型。\n\n**OSI是一个7层功能协议模型，分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。**\n\n1. **物理层：实现物理信号的发送、接收，以及该介质的传输过程。**\n2. **数据链路层：建立逻辑意义上的数据链路，实现数据的点到点或点到多点方式直接通信。**\n3. **网络层：实现数据从任何一个节点到任何另外一个节点的整个传输过程**\n4. **传输层：建立、维护和取消一次端到端的数据传输过程，控制传输节奏的快慢，调整数据的排序**\n5. **会话层：在通信双方之间建立、管理和终止会话，确定双方是否应该开始进行某一方发起的通信。**\n6. **表示层:进行数据格式的转换，以确保一个系统生成的应用数据能够被另一个系统的应用层所识别和理解。**\n7. **应用层：向用户应用软件提供丰富的系统应用接口**\n\n![img](https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg)\n\n\n\n从OSI模型的观点来看，计算机发送数据时，数据会从高层向底层逐层传递，在传递过程中进行相应的封装，并最终通过物理层转换为光/电信号发送出去。计算机接收到数据时，数据会从底层向高层传递，在传递过程中进行相应的解封装。\n\n![img](http://p9.pstatp.com/large/pgc-image/1b6183ddc63047459ac1824d8d7a495b)\n\n\n\n \n\n# TCP/IP协议簇\n\n很多初学者误认为TCP/IP就是一种协议，其实它包含了很多的协议，只是TCP/IP是这个协议簇中的两个非常重要的协议，分别是TCP和IP。\n\n下图给出了TCP/IP模型有两个不同的版本，以及它们与OSI模型的比较。\n\n![img](http://p1.pstatp.com/large/pgc-image/bc53b3b74dc94cb39edbb2d617fe2a9b)\n\n\n\nTCP/IP模型与OSI模型再层次的划分上稍有差异，单这种层次划分的差异并不是二者之间的主要差异。TCP/IP模型与OSI模型的主要差异在于二者所使用的的具体协议不同。下图列出TCP/IP模型与OSI模型各自所使用的部分协议。\n\n![img](http://p1.pstatp.com/large/pgc-image/cc4620c319c8494dbbbaeb10d51b08e0)","slug":"OSI模型与TCP-IP模型","published":1,"updated":"2020-03-05T13:43:42.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qkx002dtvm0hp562jm9","content":"<blockquote>\n<p>OSI模型和TCP/IP模型几乎应该说是网络通信领域中使用频率最高的两个术语。特别是TCP/IP，它几乎成了网络通信的代名词。从整体上先大致了解一下OSI模型和TCP/IP模型，对于深入学习各种网络通信知识，具有非常重要的指导性作用</p>\n</blockquote>\n<h1 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h1><p>OSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互连模型。</p>\n<p><strong>OSI是一个7层功能协议模型，分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</strong></p>\n<ol>\n<li><strong>物理层：实现物理信号的发送、接收，以及该介质的传输过程。</strong></li>\n<li><strong>数据链路层：建立逻辑意义上的数据链路，实现数据的点到点或点到多点方式直接通信。</strong></li>\n<li><strong>网络层：实现数据从任何一个节点到任何另外一个节点的整个传输过程</strong></li>\n<li><strong>传输层：建立、维护和取消一次端到端的数据传输过程，控制传输节奏的快慢，调整数据的排序</strong></li>\n<li><strong>会话层：在通信双方之间建立、管理和终止会话，确定双方是否应该开始进行某一方发起的通信。</strong></li>\n<li><strong>表示层:进行数据格式的转换，以确保一个系统生成的应用数据能够被另一个系统的应用层所识别和理解。</strong></li>\n<li><strong>应用层：向用户应用软件提供丰富的系统应用接口</strong></li>\n</ol>\n<p><a href=\"https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg\" class=\"lazyload\"></a></p>\n<p>从OSI模型的观点来看，计算机发送数据时，数据会从高层向底层逐层传递，在传递过程中进行相应的封装，并最终通过物理层转换为光/电信号发送出去。计算机接收到数据时，数据会从底层向高层传递，在传递过程中进行相应的解封装。</p>\n<p><a href=\"http://p9.pstatp.com/large/pgc-image/1b6183ddc63047459ac1824d8d7a495b\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"http://p9.pstatp.com/large/pgc-image/1b6183ddc63047459ac1824d8d7a495b\" class=\"lazyload\"></a></p>\n<h1 id=\"TCP-IP协议簇\"><a href=\"#TCP-IP协议簇\" class=\"headerlink\" title=\"TCP/IP协议簇\"></a>TCP/IP协议簇</h1><p>很多初学者误认为TCP/IP就是一种协议，其实它包含了很多的协议，只是TCP/IP是这个协议簇中的两个非常重要的协议，分别是TCP和IP。</p>\n<p>下图给出了TCP/IP模型有两个不同的版本，以及它们与OSI模型的比较。</p>\n<p><a href=\"http://p1.pstatp.com/large/pgc-image/bc53b3b74dc94cb39edbb2d617fe2a9b\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"http://p1.pstatp.com/large/pgc-image/bc53b3b74dc94cb39edbb2d617fe2a9b\" class=\"lazyload\"></a></p>\n<p>TCP/IP模型与OSI模型再层次的划分上稍有差异，单这种层次划分的差异并不是二者之间的主要差异。TCP/IP模型与OSI模型的主要差异在于二者所使用的的具体协议不同。下图列出TCP/IP模型与OSI模型各自所使用的部分协议。</p>\n<p><a href=\"http://p1.pstatp.com/large/pgc-image/cc4620c319c8494dbbbaeb10d51b08e0\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"http://p1.pstatp.com/large/pgc-image/cc4620c319c8494dbbbaeb10d51b08e0\" class=\"lazyload\"></a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<blockquote>\n<p>OSI模型和TCP/IP模型几乎应该说是网络通信领域中使用频率最高的两个术语。特别是TCP/IP，它几乎成了网络通信的代名词。从整体上先大致了解一下OSI模型和TCP/IP模型，对于深入学习各种网络通信知识，具有非常重要的指导性作用</p>\n</blockquote>\n<h1 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h1><p>OSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互连模型。</p>\n<p><strong>OSI是一个7层功能协议模型，分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</strong></p>\n<ol>\n<li><strong>物理层：实现物理信号的发送、接收，以及该介质的传输过程。</strong></li>\n<li><strong>数据链路层：建立逻辑意义上的数据链路，实现数据的点到点或点到多点方式直接通信。</strong></li>\n<li><strong>网络层：实现数据从任何一个节点到任何另外一个节点的整个传输过程</strong></li>\n<li><strong>传输层：建立、维护和取消一次端到端的数据传输过程，控制传输节奏的快慢，调整数据的排序</strong></li>\n<li><strong>会话层：在通信双方之间建立、管理和终止会话，确定双方是否应该开始进行某一方发起的通信。</strong></li>\n<li><strong>表示层:进行数据格式的转换，以确保一个系统生成的应用数据能够被另一个系统的应用层所识别和理解。</strong></li>\n<li><strong>应用层：向用户应用软件提供丰富的系统应用接口</strong></li>\n</ol>\n<p><img src=\"https://tvax2.sinaimg.cn/large/9fc55f55gy1gcjcswe25aj20ra0esabi.jpg\" alt=\"img\"></p>\n<p>从OSI模型的观点来看，计算机发送数据时，数据会从高层向底层逐层传递，在传递过程中进行相应的封装，并最终通过物理层转换为光/电信号发送出去。计算机接收到数据时，数据会从底层向高层传递，在传递过程中进行相应的解封装。</p>\n<p><img src=\"http://p9.pstatp.com/large/pgc-image/1b6183ddc63047459ac1824d8d7a495b\" alt=\"img\"></p>\n<h1 id=\"TCP-IP协议簇\"><a href=\"#TCP-IP协议簇\" class=\"headerlink\" title=\"TCP/IP协议簇\"></a>TCP/IP协议簇</h1><p>很多初学者误认为TCP/IP就是一种协议，其实它包含了很多的协议，只是TCP/IP是这个协议簇中的两个非常重要的协议，分别是TCP和IP。</p>\n<p>下图给出了TCP/IP模型有两个不同的版本，以及它们与OSI模型的比较。</p>\n<p><img src=\"http://p1.pstatp.com/large/pgc-image/bc53b3b74dc94cb39edbb2d617fe2a9b\" alt=\"img\"></p>\n<p>TCP/IP模型与OSI模型再层次的划分上稍有差异，单这种层次划分的差异并不是二者之间的主要差异。TCP/IP模型与OSI模型的主要差异在于二者所使用的的具体协议不同。下图列出TCP/IP模型与OSI模型各自所使用的部分协议。</p>\n<p><img src=\"http://p1.pstatp.com/large/pgc-image/cc4620c319c8494dbbbaeb10d51b08e0\" alt=\"img\"></p>\n"},{"title":"TCP的三次握手与四次挥手详解","keywords":"TCP三次握手 四次挥手","description":"详解TCP三次握手与四次挥手","cover":"https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg","abbrlink":"2c9e1e4","date":"2020-03-02T01:50:37.000Z","top_img":null,"copyright":null,"_content":"\n在了解三次握手和四次挥手之前，先要知道TCP报文内部包含了那些东西。熟悉了解TCP报文对日后学习网络和排除方面有很大的帮助，所以，今天为了加深对三次握手的理解，从新去认识TCP报文格式。\n\n![TCP报文格式](https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg)\n\n### TCP报文详解\n\nTCP报文由首部和数据两部分组成。首部一般由**20-60字节(Byte)，**长度可变。其中前20B格式固定，后40B为可选。\n\n因为，TCP报文还得传给下层网络层，封装成IP包，而一个IP包最大长度为65535，同时IP包首部也包含最少20B，所以一个IP包或TCP包可以包含的数据部分最大长度为65535-20-20=65495B。\n\n> 1、源端口号(Source Port)\n>\n> ​\t\t长度为16位，指明发送数据的进程\n>\n> 2、目的端口(Destination Port)\n>\n> ​\t\t长度为16位，指明目的主机接收数据的进程\n>\n> 3、序号（Sequence Number）\n>\n> ​\t\t也称为序列号，长度为32位，序号用来标识从TCP发送端向接入端发送的数据字节流进行编号，可以理解成对字节流的计数。\n>\n> 4、确认号\n>\n> ​\t\t长度为32位，确认号包含发送确认的一端所期望收到的下一个序号。确认号只有在ACK标志为1时才有效。\n>\n> 5、首部长度\n>\n> ​\t\t长度为4位，用于表示TCP报文首部的长度。用4位（bit）表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可能有可能没有。如果TCP报文首部是20个字节，则该位应是20/4=5\n>\n> 6、保留位(Reserved)\n>\n> ​\t\t长度为6位，必须是0，它是为将来定义新用途保留的。\n>\n> 7、标志(Code Bits）\n>\n> ​\t\t长度为6位，在TCP报文中不管是握手还是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：\n>\n> ​\t\tURG：紧急标志位，说明紧急指针有效；\n>\n> ​\t\tACK：确认标志位，多数情况下空，说明确认序号有效\n>\n> ​\t\tPSH：推标志位，置位时表示接收方应立即请求将报文交给应用层\n>\n> ​\t\tRST：复位标志，用于重建一个已经混乱的连接；\n>\n> ​\t\tSYN：同步标志，该标志仅在三次握手建立TCP连接时有效\n>\n> ​\t\tFIN：结束标志，带该标志位的数据包用于结束一个TCP会话。\n>\n> 8、窗口大小(window Size)\n>\n> ​\t\t长度为16位，TCP流量控制由连接的每一端通过声明的窗口大小来提供。\n>\n> 9、检验和（Checksum）\n>\n> ​\t\t长度为16位，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。\n>\n> 10、紧急指针(Urgent Pointer)\n>\n> ​\t\t长度为16位，指向数据中优先部分的最后一个字节，通知接收方紧急数据的长度，该字段在URG标志置位时有效。\n>\n> 11、选项（Options)\n>\n> ​\t\t长度为0-40B（字节），必须以4B为单位变化，必要时可以填充0。\n>\n> 12、数据\n\n在了解TCP报文格式，通过捕捉一个TCP报文直观感受一下。\n\n![TCP报文](https://tva3.sinaimg.cn/large/9fc55f55ly1gcfco0s2poj20hs08j3z5.jpg)\n\n### 三次握手\n\n建立TCP连接时，需要客户端和服务器共发送3个包。\n\n![三次握手](https://tva3.sinaimg.cn/large/9fc55f55ly1gcfcpd1s0hj20hs08cq38.jpg)\n\n1、客户端主动打开，发送连接请求报文段，将SYN标识位置为1，Sequence Number置为x（TCP规定SYN=1时不能携带数据，x为随机产生的一个值），然后进入SYN_SEND状态。\n\n2、服务器收到SYN报文段进行确认，将SYN标识位置为1，ACK置为1，Sequence Number置为y，Acknowledgment Number置为x+1，然后进入SYN_RECV状态，这个状态被称为半连接状态。\n\n3、客户端再进行一次确认，将ACK置为1（此时不用SYN），Sequence Number置为x+1，Acknowledgment Number置为y+1发向服务器，最后客户端与服务器都进入ESTABLISHED状态\n\n为了加深对TCP三次握手的理解，抓包看一下TCP三次握手的过程。\n\n![三次握手](http://p1.pstatp.com/large/pgc-image/5c7b3a7f8a9d4edeaedb5a798b24b334)\n\n从抓包结果看来，整个过程符合TCP三次握手的预期：\n\n1. 客户端发送SYN给服务端\n2. 服务端返回SYN+ACK给客户端\n3. 客户端确认，返回ACK给服务端\n\n### TCP四次挥手\n\nTCP四次挥手则是TCP连接释放的过程**。**下面是TCP四次挥手的流程图：\n\n![四次挥手](http://p1.pstatp.com/large/pgc-image/5f70d7d11ec1474395a58959fb9cbc92)\n\n\n\n当客户端没有数据再需要发送给服务端时，就需要释放客户端的连接，这整个过程为：\n\n1、客户端发送一个报文给服务端（没有数据），其中FIN设置为1，Sequence Number置为u，客户端进入FIN_WAIT_1状态。\n\n2、服务端收到来自客户端的请求，发送一个ACK给客户端，Acknowledge置为u+1，同时发送Sequence Number为v，服务端年进入CLOSE_WAIT状态。\n\n3、服务端发送一个FIN给客户端，ACK置为1，Sequence置为w，Acknowledge置为u+1，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。\n\n4、客户端收到FIN后，进入TIME_WAIT状态，接着发送一个ACK给服务端，Acknowledge置为w+1，Sequence Number置为u+1，最后客户端和服务端都进入CLOSED状态。\n\n为了加深对TCP四次挥手的理解，抓包看一下TCP四次挥手的过程。\n\n![加深理解TCP的三次握手与四次挥手](http://p9.pstatp.com/large/pgc-image/985ff495ae6e44d5b1f2db4ee7ed7f44)\n\n\n\n### 为什么三次握手和四次挥手？\n\n三次握手时，服务器同时把ACK和SYN放在一起发送到了客户端那里。\n\n四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。","source":"_posts/TCP的三次握手与四次挥手详解.md","raw":"---\ntitle: TCP的三次握手与四次挥手详解\ntags:\n  - 数通\ncategories: 数通\nkeywords: TCP三次握手 四次挥手\ndescription: 详解TCP三次握手与四次挥手\ncover: 'https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg'\nabbrlink: 2c9e1e4\ndate: 2020-03-02 09:50:37\ntop_img:\ncopyright:\n---\n\n在了解三次握手和四次挥手之前，先要知道TCP报文内部包含了那些东西。熟悉了解TCP报文对日后学习网络和排除方面有很大的帮助，所以，今天为了加深对三次握手的理解，从新去认识TCP报文格式。\n\n![TCP报文格式](https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg)\n\n### TCP报文详解\n\nTCP报文由首部和数据两部分组成。首部一般由**20-60字节(Byte)，**长度可变。其中前20B格式固定，后40B为可选。\n\n因为，TCP报文还得传给下层网络层，封装成IP包，而一个IP包最大长度为65535，同时IP包首部也包含最少20B，所以一个IP包或TCP包可以包含的数据部分最大长度为65535-20-20=65495B。\n\n> 1、源端口号(Source Port)\n>\n> ​\t\t长度为16位，指明发送数据的进程\n>\n> 2、目的端口(Destination Port)\n>\n> ​\t\t长度为16位，指明目的主机接收数据的进程\n>\n> 3、序号（Sequence Number）\n>\n> ​\t\t也称为序列号，长度为32位，序号用来标识从TCP发送端向接入端发送的数据字节流进行编号，可以理解成对字节流的计数。\n>\n> 4、确认号\n>\n> ​\t\t长度为32位，确认号包含发送确认的一端所期望收到的下一个序号。确认号只有在ACK标志为1时才有效。\n>\n> 5、首部长度\n>\n> ​\t\t长度为4位，用于表示TCP报文首部的长度。用4位（bit）表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可能有可能没有。如果TCP报文首部是20个字节，则该位应是20/4=5\n>\n> 6、保留位(Reserved)\n>\n> ​\t\t长度为6位，必须是0，它是为将来定义新用途保留的。\n>\n> 7、标志(Code Bits）\n>\n> ​\t\t长度为6位，在TCP报文中不管是握手还是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：\n>\n> ​\t\tURG：紧急标志位，说明紧急指针有效；\n>\n> ​\t\tACK：确认标志位，多数情况下空，说明确认序号有效\n>\n> ​\t\tPSH：推标志位，置位时表示接收方应立即请求将报文交给应用层\n>\n> ​\t\tRST：复位标志，用于重建一个已经混乱的连接；\n>\n> ​\t\tSYN：同步标志，该标志仅在三次握手建立TCP连接时有效\n>\n> ​\t\tFIN：结束标志，带该标志位的数据包用于结束一个TCP会话。\n>\n> 8、窗口大小(window Size)\n>\n> ​\t\t长度为16位，TCP流量控制由连接的每一端通过声明的窗口大小来提供。\n>\n> 9、检验和（Checksum）\n>\n> ​\t\t长度为16位，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。\n>\n> 10、紧急指针(Urgent Pointer)\n>\n> ​\t\t长度为16位，指向数据中优先部分的最后一个字节，通知接收方紧急数据的长度，该字段在URG标志置位时有效。\n>\n> 11、选项（Options)\n>\n> ​\t\t长度为0-40B（字节），必须以4B为单位变化，必要时可以填充0。\n>\n> 12、数据\n\n在了解TCP报文格式，通过捕捉一个TCP报文直观感受一下。\n\n![TCP报文](https://tva3.sinaimg.cn/large/9fc55f55ly1gcfco0s2poj20hs08j3z5.jpg)\n\n### 三次握手\n\n建立TCP连接时，需要客户端和服务器共发送3个包。\n\n![三次握手](https://tva3.sinaimg.cn/large/9fc55f55ly1gcfcpd1s0hj20hs08cq38.jpg)\n\n1、客户端主动打开，发送连接请求报文段，将SYN标识位置为1，Sequence Number置为x（TCP规定SYN=1时不能携带数据，x为随机产生的一个值），然后进入SYN_SEND状态。\n\n2、服务器收到SYN报文段进行确认，将SYN标识位置为1，ACK置为1，Sequence Number置为y，Acknowledgment Number置为x+1，然后进入SYN_RECV状态，这个状态被称为半连接状态。\n\n3、客户端再进行一次确认，将ACK置为1（此时不用SYN），Sequence Number置为x+1，Acknowledgment Number置为y+1发向服务器，最后客户端与服务器都进入ESTABLISHED状态\n\n为了加深对TCP三次握手的理解，抓包看一下TCP三次握手的过程。\n\n![三次握手](http://p1.pstatp.com/large/pgc-image/5c7b3a7f8a9d4edeaedb5a798b24b334)\n\n从抓包结果看来，整个过程符合TCP三次握手的预期：\n\n1. 客户端发送SYN给服务端\n2. 服务端返回SYN+ACK给客户端\n3. 客户端确认，返回ACK给服务端\n\n### TCP四次挥手\n\nTCP四次挥手则是TCP连接释放的过程**。**下面是TCP四次挥手的流程图：\n\n![四次挥手](http://p1.pstatp.com/large/pgc-image/5f70d7d11ec1474395a58959fb9cbc92)\n\n\n\n当客户端没有数据再需要发送给服务端时，就需要释放客户端的连接，这整个过程为：\n\n1、客户端发送一个报文给服务端（没有数据），其中FIN设置为1，Sequence Number置为u，客户端进入FIN_WAIT_1状态。\n\n2、服务端收到来自客户端的请求，发送一个ACK给客户端，Acknowledge置为u+1，同时发送Sequence Number为v，服务端年进入CLOSE_WAIT状态。\n\n3、服务端发送一个FIN给客户端，ACK置为1，Sequence置为w，Acknowledge置为u+1，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。\n\n4、客户端收到FIN后，进入TIME_WAIT状态，接着发送一个ACK给服务端，Acknowledge置为w+1，Sequence Number置为u+1，最后客户端和服务端都进入CLOSED状态。\n\n为了加深对TCP四次挥手的理解，抓包看一下TCP四次挥手的过程。\n\n![加深理解TCP的三次握手与四次挥手](http://p9.pstatp.com/large/pgc-image/985ff495ae6e44d5b1f2db4ee7ed7f44)\n\n\n\n### 为什么三次握手和四次挥手？\n\n三次握手时，服务器同时把ACK和SYN放在一起发送到了客户端那里。\n\n四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。","slug":"TCP的三次握手与四次挥手详解","published":1,"updated":"2020-03-02T14:43:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7ql1002gtvm0ficx6a68","content":"<p>在了解三次握手和四次挥手之前，先要知道TCP报文内部包含了那些东西。熟悉了解TCP报文对日后学习网络和排除方面有很大的帮助，所以，今天为了加深对三次握手的理解，从新去认识TCP报文格式。</p>\n<p><a href=\"https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg\" data-fancybox=\"group\" data-caption=\"TCP报文格式\" class=\"fancybox\"><img alt=\"TCP报文格式\" title=\"TCP报文格式\" data-src=\"https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg\" class=\"lazyload\"></a></p>\n<h3 id=\"TCP报文详解\"><a href=\"#TCP报文详解\" class=\"headerlink\" title=\"TCP报文详解\"></a>TCP报文详解</h3><p>TCP报文由首部和数据两部分组成。首部一般由<strong>20-60字节(Byte)，</strong>长度可变。其中前20B格式固定，后40B为可选。</p>\n<p>因为，TCP报文还得传给下层网络层，封装成IP包，而一个IP包最大长度为65535，同时IP包首部也包含最少20B，所以一个IP包或TCP包可以包含的数据部分最大长度为65535-20-20=65495B。</p>\n<blockquote>\n<p>1、源端口号(Source Port)</p>\n<p>​        长度为16位，指明发送数据的进程</p>\n<p>2、目的端口(Destination Port)</p>\n<p>​        长度为16位，指明目的主机接收数据的进程</p>\n<p>3、序号（Sequence Number）</p>\n<p>​        也称为序列号，长度为32位，序号用来标识从TCP发送端向接入端发送的数据字节流进行编号，可以理解成对字节流的计数。</p>\n<p>4、确认号</p>\n<p>​        长度为32位，确认号包含发送确认的一端所期望收到的下一个序号。确认号只有在ACK标志为1时才有效。</p>\n<p>5、首部长度</p>\n<p>​        长度为4位，用于表示TCP报文首部的长度。用4位（bit）表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可能有可能没有。如果TCP报文首部是20个字节，则该位应是20/4=5</p>\n<p>6、保留位(Reserved)</p>\n<p>​        长度为6位，必须是0，它是为将来定义新用途保留的。</p>\n<p>7、标志(Code Bits）</p>\n<p>​        长度为6位，在TCP报文中不管是握手还是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：</p>\n<p>​        URG：紧急标志位，说明紧急指针有效；</p>\n<p>​        ACK：确认标志位，多数情况下空，说明确认序号有效</p>\n<p>​        PSH：推标志位，置位时表示接收方应立即请求将报文交给应用层</p>\n<p>​        RST：复位标志，用于重建一个已经混乱的连接；</p>\n<p>​        SYN：同步标志，该标志仅在三次握手建立TCP连接时有效</p>\n<p>​        FIN：结束标志，带该标志位的数据包用于结束一个TCP会话。</p>\n<p>8、窗口大小(window Size)</p>\n<p>​        长度为16位，TCP流量控制由连接的每一端通过声明的窗口大小来提供。</p>\n<p>9、检验和（Checksum）</p>\n<p>​        长度为16位，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。</p>\n<p>10、紧急指针(Urgent Pointer)</p>\n<p>​        长度为16位，指向数据中优先部分的最后一个字节，通知接收方紧急数据的长度，该字段在URG标志置位时有效。</p>\n<p>11、选项（Options)</p>\n<p>​        长度为0-40B（字节），必须以4B为单位变化，必要时可以填充0。</p>\n<p>12、数据</p>\n</blockquote>\n<p>在了解TCP报文格式，通过捕捉一个TCP报文直观感受一下。</p>\n<p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfco0s2poj20hs08j3z5.jpg\" data-fancybox=\"group\" data-caption=\"TCP报文\" class=\"fancybox\"><img alt=\"TCP报文\" title=\"TCP报文\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfco0s2poj20hs08j3z5.jpg\" class=\"lazyload\"></a></p>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><p>建立TCP连接时，需要客户端和服务器共发送3个包。</p>\n<p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfcpd1s0hj20hs08cq38.jpg\" data-fancybox=\"group\" data-caption=\"三次握手\" class=\"fancybox\"><img alt=\"三次握手\" title=\"三次握手\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfcpd1s0hj20hs08cq38.jpg\" class=\"lazyload\"></a></p>\n<p>1、客户端主动打开，发送连接请求报文段，将SYN标识位置为1，Sequence Number置为x（TCP规定SYN=1时不能携带数据，x为随机产生的一个值），然后进入SYN_SEND状态。</p>\n<p>2、服务器收到SYN报文段进行确认，将SYN标识位置为1，ACK置为1，Sequence Number置为y，Acknowledgment Number置为x+1，然后进入SYN_RECV状态，这个状态被称为半连接状态。</p>\n<p>3、客户端再进行一次确认，将ACK置为1（此时不用SYN），Sequence Number置为x+1，Acknowledgment Number置为y+1发向服务器，最后客户端与服务器都进入ESTABLISHED状态</p>\n<p>为了加深对TCP三次握手的理解，抓包看一下TCP三次握手的过程。</p>\n<p><a href=\"http://p1.pstatp.com/large/pgc-image/5c7b3a7f8a9d4edeaedb5a798b24b334\" data-fancybox=\"group\" data-caption=\"三次握手\" class=\"fancybox\"><img alt=\"三次握手\" title=\"三次握手\" data-src=\"http://p1.pstatp.com/large/pgc-image/5c7b3a7f8a9d4edeaedb5a798b24b334\" class=\"lazyload\"></a></p>\n<p>从抓包结果看来，整个过程符合TCP三次握手的预期：</p>\n<ol>\n<li>客户端发送SYN给服务端</li>\n<li>服务端返回SYN+ACK给客户端</li>\n<li>客户端确认，返回ACK给服务端</li>\n</ol>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p>TCP四次挥手则是TCP连接释放的过程<strong>。</strong>下面是TCP四次挥手的流程图：</p>\n<p><a href=\"http://p1.pstatp.com/large/pgc-image/5f70d7d11ec1474395a58959fb9cbc92\" data-fancybox=\"group\" data-caption=\"四次挥手\" class=\"fancybox\"><img alt=\"四次挥手\" title=\"四次挥手\" data-src=\"http://p1.pstatp.com/large/pgc-image/5f70d7d11ec1474395a58959fb9cbc92\" class=\"lazyload\"></a></p>\n<p>当客户端没有数据再需要发送给服务端时，就需要释放客户端的连接，这整个过程为：</p>\n<p>1、客户端发送一个报文给服务端（没有数据），其中FIN设置为1，Sequence Number置为u，客户端进入FIN_WAIT_1状态。</p>\n<p>2、服务端收到来自客户端的请求，发送一个ACK给客户端，Acknowledge置为u+1，同时发送Sequence Number为v，服务端年进入CLOSE_WAIT状态。</p>\n<p>3、服务端发送一个FIN给客户端，ACK置为1，Sequence置为w，Acknowledge置为u+1，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。</p>\n<p>4、客户端收到FIN后，进入TIME_WAIT状态，接着发送一个ACK给服务端，Acknowledge置为w+1，Sequence Number置为u+1，最后客户端和服务端都进入CLOSED状态。</p>\n<p>为了加深对TCP四次挥手的理解，抓包看一下TCP四次挥手的过程。</p>\n<p><a href=\"http://p9.pstatp.com/large/pgc-image/985ff495ae6e44d5b1f2db4ee7ed7f44\" data-fancybox=\"group\" data-caption=\"加深理解TCP的三次握手与四次挥手\" class=\"fancybox\"><img alt=\"加深理解TCP的三次握手与四次挥手\" title=\"加深理解TCP的三次握手与四次挥手\" data-src=\"http://p9.pstatp.com/large/pgc-image/985ff495ae6e44d5b1f2db4ee7ed7f44\" class=\"lazyload\"></a></p>\n<h3 id=\"为什么三次握手和四次挥手？\"><a href=\"#为什么三次握手和四次挥手？\" class=\"headerlink\" title=\"为什么三次握手和四次挥手？\"></a>为什么三次握手和四次挥手？</h3><p>三次握手时，服务器同时把ACK和SYN放在一起发送到了客户端那里。</p>\n<p>四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在了解三次握手和四次挥手之前，先要知道TCP报文内部包含了那些东西。熟悉了解TCP报文对日后学习网络和排除方面有很大的帮助，所以，今天为了加深对三次握手的理解，从新去认识TCP报文格式。</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/9fc55f55gy1gcdlwfmyjvj20n50f8gn4.jpg\" alt=\"TCP报文格式\"></p>\n<h3 id=\"TCP报文详解\"><a href=\"#TCP报文详解\" class=\"headerlink\" title=\"TCP报文详解\"></a>TCP报文详解</h3><p>TCP报文由首部和数据两部分组成。首部一般由<strong>20-60字节(Byte)，</strong>长度可变。其中前20B格式固定，后40B为可选。</p>\n<p>因为，TCP报文还得传给下层网络层，封装成IP包，而一个IP包最大长度为65535，同时IP包首部也包含最少20B，所以一个IP包或TCP包可以包含的数据部分最大长度为65535-20-20=65495B。</p>\n<blockquote>\n<p>1、源端口号(Source Port)</p>\n<p>​        长度为16位，指明发送数据的进程</p>\n<p>2、目的端口(Destination Port)</p>\n<p>​        长度为16位，指明目的主机接收数据的进程</p>\n<p>3、序号（Sequence Number）</p>\n<p>​        也称为序列号，长度为32位，序号用来标识从TCP发送端向接入端发送的数据字节流进行编号，可以理解成对字节流的计数。</p>\n<p>4、确认号</p>\n<p>​        长度为32位，确认号包含发送确认的一端所期望收到的下一个序号。确认号只有在ACK标志为1时才有效。</p>\n<p>5、首部长度</p>\n<p>​        长度为4位，用于表示TCP报文首部的长度。用4位（bit）表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可能有可能没有。如果TCP报文首部是20个字节，则该位应是20/4=5</p>\n<p>6、保留位(Reserved)</p>\n<p>​        长度为6位，必须是0，它是为将来定义新用途保留的。</p>\n<p>7、标志(Code Bits）</p>\n<p>​        长度为6位，在TCP报文中不管是握手还是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：</p>\n<p>​        URG：紧急标志位，说明紧急指针有效；</p>\n<p>​        ACK：确认标志位，多数情况下空，说明确认序号有效</p>\n<p>​        PSH：推标志位，置位时表示接收方应立即请求将报文交给应用层</p>\n<p>​        RST：复位标志，用于重建一个已经混乱的连接；</p>\n<p>​        SYN：同步标志，该标志仅在三次握手建立TCP连接时有效</p>\n<p>​        FIN：结束标志，带该标志位的数据包用于结束一个TCP会话。</p>\n<p>8、窗口大小(window Size)</p>\n<p>​        长度为16位，TCP流量控制由连接的每一端通过声明的窗口大小来提供。</p>\n<p>9、检验和（Checksum）</p>\n<p>​        长度为16位，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。</p>\n<p>10、紧急指针(Urgent Pointer)</p>\n<p>​        长度为16位，指向数据中优先部分的最后一个字节，通知接收方紧急数据的长度，该字段在URG标志置位时有效。</p>\n<p>11、选项（Options)</p>\n<p>​        长度为0-40B（字节），必须以4B为单位变化，必要时可以填充0。</p>\n<p>12、数据</p>\n</blockquote>\n<p>在了解TCP报文格式，通过捕捉一个TCP报文直观感受一下。</p>\n<p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfco0s2poj20hs08j3z5.jpg\" alt=\"TCP报文\"></p>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><p>建立TCP连接时，需要客户端和服务器共发送3个包。</p>\n<p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfcpd1s0hj20hs08cq38.jpg\" alt=\"三次握手\"></p>\n<p>1、客户端主动打开，发送连接请求报文段，将SYN标识位置为1，Sequence Number置为x（TCP规定SYN=1时不能携带数据，x为随机产生的一个值），然后进入SYN_SEND状态。</p>\n<p>2、服务器收到SYN报文段进行确认，将SYN标识位置为1，ACK置为1，Sequence Number置为y，Acknowledgment Number置为x+1，然后进入SYN_RECV状态，这个状态被称为半连接状态。</p>\n<p>3、客户端再进行一次确认，将ACK置为1（此时不用SYN），Sequence Number置为x+1，Acknowledgment Number置为y+1发向服务器，最后客户端与服务器都进入ESTABLISHED状态</p>\n<p>为了加深对TCP三次握手的理解，抓包看一下TCP三次握手的过程。</p>\n<p><img src=\"http://p1.pstatp.com/large/pgc-image/5c7b3a7f8a9d4edeaedb5a798b24b334\" alt=\"三次握手\"></p>\n<p>从抓包结果看来，整个过程符合TCP三次握手的预期：</p>\n<ol>\n<li>客户端发送SYN给服务端</li>\n<li>服务端返回SYN+ACK给客户端</li>\n<li>客户端确认，返回ACK给服务端</li>\n</ol>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p>TCP四次挥手则是TCP连接释放的过程<strong>。</strong>下面是TCP四次挥手的流程图：</p>\n<p><img src=\"http://p1.pstatp.com/large/pgc-image/5f70d7d11ec1474395a58959fb9cbc92\" alt=\"四次挥手\"></p>\n<p>当客户端没有数据再需要发送给服务端时，就需要释放客户端的连接，这整个过程为：</p>\n<p>1、客户端发送一个报文给服务端（没有数据），其中FIN设置为1，Sequence Number置为u，客户端进入FIN_WAIT_1状态。</p>\n<p>2、服务端收到来自客户端的请求，发送一个ACK给客户端，Acknowledge置为u+1，同时发送Sequence Number为v，服务端年进入CLOSE_WAIT状态。</p>\n<p>3、服务端发送一个FIN给客户端，ACK置为1，Sequence置为w，Acknowledge置为u+1，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。</p>\n<p>4、客户端收到FIN后，进入TIME_WAIT状态，接着发送一个ACK给服务端，Acknowledge置为w+1，Sequence Number置为u+1，最后客户端和服务端都进入CLOSED状态。</p>\n<p>为了加深对TCP四次挥手的理解，抓包看一下TCP四次挥手的过程。</p>\n<p><img src=\"http://p9.pstatp.com/large/pgc-image/985ff495ae6e44d5b1f2db4ee7ed7f44\" alt=\"加深理解TCP的三次握手与四次挥手\"></p>\n<h3 id=\"为什么三次握手和四次挥手？\"><a href=\"#为什么三次握手和四次挥手？\" class=\"headerlink\" title=\"为什么三次握手和四次挥手？\"></a>为什么三次握手和四次挥手？</h3><p>三次握手时，服务器同时把ACK和SYN放在一起发送到了客户端那里。</p>\n<p>四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。</p>\n"},{"title":"centos7安装后如何配置成国内的镜像源","keywords":"centos7配置国内yum源","description":"centos7配置国内yum源","cover":"https://tva2.sinaimg.cn/large/9fc55f55gy1gdj61d71khj20xc0ozu08.jpg","abbrlink":"1660888c","date":"2020-04-05T12:26:51.000Z","top_img":null,"copyright":null,"_content":"\n> centos 7 安装完后采用的是国外的镜像仓库，在下载或者更新软件相对慢，所以，在安装完centos 7 系统后，要把镜像源更换成国内的，相对比较好的。\n\n国内比较好的镜像源有：\n\n 1. 阿里云（http://mirrors.aliyun.com/repo/Centos-7.repo）\n 2. 网易     (http://mirrors.163.com/.help/CentOS6-Base-163.repo)\n 3. 华为（https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo ）\n\n我这里选择华为镜像源，作为例子，其他类型的。\n使用说明：\n1、备份配置文件：\n```shell\ncp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n```\n2、下载新的CentOS-Base.repo文件到/etc/yum.repos.d/目录下\n```shell\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo\n```\n3、执行yum clean all清除原有yum缓存\n```shell\nyum clean all\n```\n4、执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）。\n```shell\nyum makecache // yum repolist all\n```\n\n相关网址:\n\n[CentOS官方地址](http://www.centos.org/)：\n[CentOS邮件列表地址](http://www.centos.org/modules/tinycontent/index.php?id=16)\n[CentOS论坛地址](http://www.centos.org/modules/newbb/)\n[CentOS文档地址](http://www.centos.org/docs/)\n[CentOS Wiki地址](http://wiki.centos.org/)","source":"_posts/centos7安装后如何配置成国内的镜像源.md","raw":"---\ntitle: centos7安装后如何配置成国内的镜像源\ntags:\n  - centos7\ncategories: linux\nkeywords: centos7配置国内yum源\ndescription: centos7配置国内yum源\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55gy1gdj61d71khj20xc0ozu08.jpg'\nabbrlink: 1660888c\ndate: 2020-04-05 20:26:51\ntop_img:\ncopyright:\n---\n\n> centos 7 安装完后采用的是国外的镜像仓库，在下载或者更新软件相对慢，所以，在安装完centos 7 系统后，要把镜像源更换成国内的，相对比较好的。\n\n国内比较好的镜像源有：\n\n 1. 阿里云（http://mirrors.aliyun.com/repo/Centos-7.repo）\n 2. 网易     (http://mirrors.163.com/.help/CentOS6-Base-163.repo)\n 3. 华为（https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo ）\n\n我这里选择华为镜像源，作为例子，其他类型的。\n使用说明：\n1、备份配置文件：\n```shell\ncp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n```\n2、下载新的CentOS-Base.repo文件到/etc/yum.repos.d/目录下\n```shell\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo\n```\n3、执行yum clean all清除原有yum缓存\n```shell\nyum clean all\n```\n4、执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）。\n```shell\nyum makecache // yum repolist all\n```\n\n相关网址:\n\n[CentOS官方地址](http://www.centos.org/)：\n[CentOS邮件列表地址](http://www.centos.org/modules/tinycontent/index.php?id=16)\n[CentOS论坛地址](http://www.centos.org/modules/newbb/)\n[CentOS文档地址](http://www.centos.org/docs/)\n[CentOS Wiki地址](http://wiki.centos.org/)","slug":"centos7安装后如何配置成国内的镜像源","published":1,"updated":"2020-04-05T12:32:06.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7ql5002ktvm0b88hbxcy","content":"<blockquote>\n<p>centos 7 安装完后采用的是国外的镜像仓库，在下载或者更新软件相对慢，所以，在安装完centos 7 系统后，要把镜像源更换成国内的，相对比较好的。</p>\n</blockquote>\n<p>国内比较好的镜像源有：</p>\n<ol>\n<li>阿里云（<a href=\"http://mirrors.aliyun.com/repo/Centos-7.repo）\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/repo/Centos-7.repo）</a></li>\n<li>网易     (<a href=\"http://mirrors.163.com/.help/CentOS6-Base-163.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a>)</li>\n<li>华为（<a href=\"https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo\" target=\"_blank\" rel=\"noopener\">https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</a> ）</li>\n</ol>\n<p>我这里选择华为镜像源，作为例子，其他类型的。<br>使用说明：<br>1、备份配置文件：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure></div>\n<p>2、下载新的CentOS-Base.repo文件到/etc/yum.repos.d/目录下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span><br></pre></td></tr></table></figure></div>\n<p>3、执行yum clean all清除原有yum缓存</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure></div>\n<p>4、执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache // yum repolist all</span><br></pre></td></tr></table></figure></div>\n\n<p>相关网址:</p>\n<p><a href=\"http://www.centos.org/\" target=\"_blank\" rel=\"noopener\">CentOS官方地址</a>：<br><a href=\"http://www.centos.org/modules/tinycontent/index.php?id=16\" target=\"_blank\" rel=\"noopener\">CentOS邮件列表地址</a><br><a href=\"http://www.centos.org/modules/newbb/\" target=\"_blank\" rel=\"noopener\">CentOS论坛地址</a><br><a href=\"http://www.centos.org/docs/\" target=\"_blank\" rel=\"noopener\">CentOS文档地址</a><br><a href=\"http://wiki.centos.org/\" target=\"_blank\" rel=\"noopener\">CentOS Wiki地址</a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<blockquote>\n<p>centos 7 安装完后采用的是国外的镜像仓库，在下载或者更新软件相对慢，所以，在安装完centos 7 系统后，要把镜像源更换成国内的，相对比较好的。</p>\n</blockquote>\n<p>国内比较好的镜像源有：</p>\n<ol>\n<li>阿里云（<a href=\"http://mirrors.aliyun.com/repo/Centos-7.repo）\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/repo/Centos-7.repo）</a></li>\n<li>网易     (<a href=\"http://mirrors.163.com/.help/CentOS6-Base-163.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a>)</li>\n<li>华为（<a href=\"https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo\" target=\"_blank\" rel=\"noopener\">https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</a> ）</li>\n</ol>\n<p>我这里选择华为镜像源，作为例子，其他类型的。<br>使用说明：<br>1、备份配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>\n<p>2、下载新的CentOS-Base.repo文件到/etc/yum.repos.d/目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span><br></pre></td></tr></table></figure>\n<p>3、执行yum clean all清除原有yum缓存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure>\n<p>4、执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache // yum repolist all</span><br></pre></td></tr></table></figure>\n\n<p>相关网址:</p>\n<p><a href=\"http://www.centos.org/\" target=\"_blank\" rel=\"noopener\">CentOS官方地址</a>：<br><a href=\"http://www.centos.org/modules/tinycontent/index.php?id=16\" target=\"_blank\" rel=\"noopener\">CentOS邮件列表地址</a><br><a href=\"http://www.centos.org/modules/newbb/\" target=\"_blank\" rel=\"noopener\">CentOS论坛地址</a><br><a href=\"http://www.centos.org/docs/\" target=\"_blank\" rel=\"noopener\">CentOS文档地址</a><br><a href=\"http://wiki.centos.org/\" target=\"_blank\" rel=\"noopener\">CentOS Wiki地址</a></p>\n"},{"title":"python练习:输入一个时间,输出该时间经过5分30秒后的时间","keywords":"python小案例，输入一个时间,输出该时间经过5分30秒后的时间","description":"python小案例，输入一个时间,输出该时间经过5分30秒后的时间","cover":"https://tva3.sinaimg.cn/large/9fc55f55gy1gd3q6jfx53j20sf0iywwf.jpg","abbrlink":"f56acc9","date":"2020-03-23T03:46:34.000Z","top_img":null,"copyright":null,"_content":"\n题目：输入一个时间(时:分:秒),输出该时间经过5分30秒后的时间\n\n思考：\n\n- 判断输入的时间格式是否正确。\n- 秒满60，分加1.秒归零。分满60，时加1，分归零。时满24，时归零\n\n详细代码如下\n\n```python\ninput_time=\"24:58:59\"\ntime_list = input_time.split(':')\ntime_data = [int(x) for x in time_list]\n\nH =  time_data[0]\nM =  time_data[1]\nS = time_data[2]\n\nif ((H >= 0) and (H <24) ) and ((M>= 0) and (M <=60)) and ((S>= 0) and (S <=60)):\n\tS +=30\n\tif S >= 60:\n\t\tS = S-60\n\t\tM+=1\n\n\tM+=5\n\tif M >= 60:\n\t\tM = M-60\n\t\tH+=1\n\n\tif H ==24:\n\t\tH = 0\n\tprint ('next time:%02d:%02d:%02d'%(H,M,S))\nelse:\n\tprint ('你输入的时间格式有问题，请重新输入！')\n\n\n```\n\n\n\n","source":"_posts/python练习-输入一个时间-输出该时间经过5分30秒后的时间.md","raw":"---\ntitle: 'python练习:输入一个时间,输出该时间经过5分30秒后的时间'\ntags:\n  - python\ncategories: python\nkeywords: 'python小案例，输入一个时间,输出该时间经过5分30秒后的时间'\ndescription: 'python小案例，输入一个时间,输出该时间经过5分30秒后的时间'\ncover: 'https://tva3.sinaimg.cn/large/9fc55f55gy1gd3q6jfx53j20sf0iywwf.jpg'\nabbrlink: f56acc9\ndate: 2020-03-23 11:46:34\ntop_img:\ncopyright:\n---\n\n题目：输入一个时间(时:分:秒),输出该时间经过5分30秒后的时间\n\n思考：\n\n- 判断输入的时间格式是否正确。\n- 秒满60，分加1.秒归零。分满60，时加1，分归零。时满24，时归零\n\n详细代码如下\n\n```python\ninput_time=\"24:58:59\"\ntime_list = input_time.split(':')\ntime_data = [int(x) for x in time_list]\n\nH =  time_data[0]\nM =  time_data[1]\nS = time_data[2]\n\nif ((H >= 0) and (H <24) ) and ((M>= 0) and (M <=60)) and ((S>= 0) and (S <=60)):\n\tS +=30\n\tif S >= 60:\n\t\tS = S-60\n\t\tM+=1\n\n\tM+=5\n\tif M >= 60:\n\t\tM = M-60\n\t\tH+=1\n\n\tif H ==24:\n\t\tH = 0\n\tprint ('next time:%02d:%02d:%02d'%(H,M,S))\nelse:\n\tprint ('你输入的时间格式有问题，请重新输入！')\n\n\n```\n\n\n\n","slug":"python练习-输入一个时间-输出该时间经过5分30秒后的时间","published":1,"updated":"2020-03-23T04:01:23.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7ql7002mtvm0b3s1dshm","content":"<p>题目：输入一个时间(时:分:秒),输出该时间经过5分30秒后的时间</p>\n<p>思考：</p>\n<ul>\n<li>判断输入的时间格式是否正确。</li>\n<li>秒满60，分加1.秒归零。分满60，时加1，分归零。时满24，时归零</li>\n</ul>\n<p>详细代码如下</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">python</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_time=<span class=\"string\">\"24:58:59\"</span></span><br><span class=\"line\">time_list = input_time.split(<span class=\"string\">':'</span>)</span><br><span class=\"line\">time_data = [int(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> time_list]</span><br><span class=\"line\"></span><br><span class=\"line\">H =  time_data[<span class=\"number\">0</span>]</span><br><span class=\"line\">M =  time_data[<span class=\"number\">1</span>]</span><br><span class=\"line\">S = time_data[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((H &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (H &lt;<span class=\"number\">24</span>) ) <span class=\"keyword\">and</span> ((M&gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (M &lt;=<span class=\"number\">60</span>)) <span class=\"keyword\">and</span> ((S&gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (S &lt;=<span class=\"number\">60</span>)):</span><br><span class=\"line\">\tS +=<span class=\"number\">30</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> S &gt;= <span class=\"number\">60</span>:</span><br><span class=\"line\">\t\tS = S<span class=\"number\">-60</span></span><br><span class=\"line\">\t\tM+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tM+=<span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> M &gt;= <span class=\"number\">60</span>:</span><br><span class=\"line\">\t\tM = M<span class=\"number\">-60</span></span><br><span class=\"line\">\t\tH+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> H ==<span class=\"number\">24</span>:</span><br><span class=\"line\">\t\tH = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (<span class=\"string\">'next time:%02d:%02d:%02d'</span>%(H,M,S))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (<span class=\"string\">'你输入的时间格式有问题，请重新输入！'</span>)</span><br></pre></td></tr></table></figure></div>\n\n\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>题目：输入一个时间(时:分:秒),输出该时间经过5分30秒后的时间</p>\n<p>思考：</p>\n<ul>\n<li>判断输入的时间格式是否正确。</li>\n<li>秒满60，分加1.秒归零。分满60，时加1，分归零。时满24，时归零</li>\n</ul>\n<p>详细代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_time=<span class=\"string\">\"24:58:59\"</span></span><br><span class=\"line\">time_list = input_time.split(<span class=\"string\">':'</span>)</span><br><span class=\"line\">time_data = [int(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> time_list]</span><br><span class=\"line\"></span><br><span class=\"line\">H =  time_data[<span class=\"number\">0</span>]</span><br><span class=\"line\">M =  time_data[<span class=\"number\">1</span>]</span><br><span class=\"line\">S = time_data[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((H &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (H &lt;<span class=\"number\">24</span>) ) <span class=\"keyword\">and</span> ((M&gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (M &lt;=<span class=\"number\">60</span>)) <span class=\"keyword\">and</span> ((S&gt;= <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (S &lt;=<span class=\"number\">60</span>)):</span><br><span class=\"line\">\tS +=<span class=\"number\">30</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> S &gt;= <span class=\"number\">60</span>:</span><br><span class=\"line\">\t\tS = S<span class=\"number\">-60</span></span><br><span class=\"line\">\t\tM+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tM+=<span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> M &gt;= <span class=\"number\">60</span>:</span><br><span class=\"line\">\t\tM = M<span class=\"number\">-60</span></span><br><span class=\"line\">\t\tH+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> H ==<span class=\"number\">24</span>:</span><br><span class=\"line\">\t\tH = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (<span class=\"string\">'next time:%02d:%02d:%02d'</span>%(H,M,S))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (<span class=\"string\">'你输入的时间格式有问题，请重新输入！'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"数据结构与算法-树和二叉树","keywords":"树和二叉树  数据结构与算法","description":"数据结构与算法 树和二叉树","cover":"https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy9u7m65j20b407hmxf.jpg","abbrlink":"9363cf89","date":"2020-03-05T01:56:20.000Z","top_img":null,"copyright":null,"_content":"\n# 树\n\n树是n(nn≥0 )个结点的有限集合，n=0时称为空树，在任一非空树中\n\n- 有且仅有一个称为根的节点\n- 其余的节点可分为m(m≥0) 个互不相交的子集T1，T2，....，Tm，其中每个子集本身又是一颗树，并称为根节点的子树。\n\n## 树的基本概念\n\n- 双亲和孩子\n- 兄弟：具有相同双亲的结点互为兄弟。\n- 结点的度：一个结点的子树的个数记为该结点的度。 \n- 树的度：树中各结点的度的最大值 \n- 叶子结点：也称为终端结点，指度为零的结点。 \n- 内部结点：度不为零的结点称为分支结点或非终端结点。除根结点之外，分支结点也称为内部结点 \n- 结点的层次：根为第一层，根的孩子为第二层，依此类推。 \n- 树的高度：一棵树的最大层次数记为树的高度（或深度）。 \n- 有序（无序）树：若将树中的结点的各子树看成是从左到右具有次序的，即不能交换，则称该树为有序树，否则称为无序树。 \n- 森林：是m(m≥O)棵互不相交的树的集合 \n\n## 树的存储结构\n\n### 标准存储结构\n\n- 结点的数据\n- 指向子结点的的指针\n\n### 带逆存储结构 \n\n- 结点的数据 \n- 指向子结点的指针 \n- 指向其父结点的指针 \n\n## 树的遍历\n\n遍历是指对树中所有结点信息的访问，即依次对树中每个结点访问一次且仅访问一次\n\n### 前序遍历（先跟遍历）\n\n先访问根节点——>左边根结点——>左边子结点——>右边子结点——>右边根结点\n\n```shell\nABEFIJCDGH\n```\n\n###  后续遍历（后根遍历）\n\n先访问左边子结点——>左边根结点——>右边子结点——>右边根结点——>根结点\n\n```shell\nEFIJFBCGHDA\n```\n\n### 层次遍历\n\n逐层遍历，从左到右遍历\n\n```shell\nABCDEFGHIJ\n```\n\n\n\n ![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gcitvebupbj20hs0b3mxu.jpg)\n\n##  二叉树\n\n二叉树(BinaryTree)是n(n≥o)个结点的有限集合，它或者是空树(n=0)，或者是由一个根结点及两棵互不相交的、分别称为左子树和右子树的二叉树所组成。 \n\n### 二叉树与树的区别\n\n- 二叉树的结点的最大度为2，而树中不限制结点的度。 \n- 二叉树的结点的子树要区分左子树和右子树 \n- 二叉树可以为空，即没有结点，树至少有一个结点。 \n\n### 二叉树的性质\n\n1、二叉树第i层上的结点数目最多为2<sup>i-1</sup>(i≥1)。 \n\n> 下图第3层最多有2<sup>3-1</sup>=4\n\n2、深度为k的二叉树至多有2<sup>k</sup>-1个结点(k≥1)。 \n\n> 下图二叉树深度为4，最多有2<sup>4</sup>-1=15\n\n3、在任意一棵二叉树中，若终端结点数为n0， 度为2的结点数为n2， 则n0=n2+1。\n\n> 下图终端结点分别为6、7、8、9、10、11。度为2的节点为1、2、3、4、5。\n>\n> 终端结点数为n0=6，度为2的结点数为n2=5，n0=n2+1\n\n4、具有n个结点的完全二叉树的深度为⌊log2<sup>n</sup>」 +1。 \n\n5、对一棵有n个结点的完全二叉树的结点按层次自左至右进行编号，则对任一结点i有：\n\n- 若i=1， 则结点 i 是二叉树的根，无双亲，若i>1， 则其双亲为⌊ i/2 」 。  \n- 若 2i>n，则结点i无左孩子，否则其左孩子为 2i。 \n- 若 2i+1>n，则结点i无右孩子，否则其右孩子为 2i+1。 \n\n![图1](https://tva3.sinaimg.cn/large/9fc55f55ly1gciuyjp40aj20ek08c0ss.jpg)\n\n## 满二叉树\n\n若深度为k的二叉树有2k-1个结点，则称其为满二叉树。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcivc16wn7j20br078acc.jpg)\n\n## 完全二叉树\n\n深度为k、有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树编号从1至n的结点一一对应时，称之为完全二叉树。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcivd2nnffj20bq0740us.jpg)\n\n## 二叉树的存储结构 \n\n### 顺序存储结构 \n\n对完全二叉树既简单又节省空间，而对于一般二叉树则不适用 \n\n### 链式存储结构 \n\n由于二叉树中结点包含有数据元素、左子树根、右子树根及双亲等信息，因此可以用三叉链表或二叉链袭来存储二叉树。链表的头指针指向二叉树的根结点。 \n\n## 二叉树的遍历 \n\n### 前序遍历 \n\n```shell\n421356\n```\n\n### 中序遍历\n\n先访问左子树——>再访问根——>右子树(递归)\n\n```shell\n123456\n```\n\n### 后序遍历\n\n```shell\n132654\n```\n\n\n\n\n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gcivex58zlj20b609zgmn.jpg)\n\n\n\n> 例：已知二叉树前序遍历是ABHFDECKG， 中序遍历序列是HBDFAEKCG， 它的后序遍历序列是HDFBKGCEA\n\n## 二叉排序树 \n\n又称为二叉查找树，定义：或者是一棵空树，或者是具有下列性质的二叉树.\n\n1. 若左子树不空，则左子树上所有结点的值均小于它的根结点的值 。\n2. 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值； \n3. 左、右子树也分别为二叉排序树； \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciw8s6g6hj20az0cogmh.jpg)\n\n## 平衡二叉树 \n\n又被称为AVL树，具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 \n\n## 线索树 \n\nn个结点的二叉链表中含有n+1 (2n-(n-1)=n+1)个空指针域。利用二叉链表中的空指针域，存放指向结点在某种遍历次序下的前趋和后继结点的指针（这种附加的指针称为\"线索\"）。 \n\n## 最优二叉树 \n\n给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。 \n\n# 图\n\n图G是由两个集合V和E构成的二元组，记作G=(V， E)，其中V是图中顶点的非空有限集合， E是图中边的有限集合。 \n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gciwhxu3nqj20c50b9mxm.jpg)\n\n- 有向图： 图G中的每条边都是有方向的，顶点间的关系用<vi， vj>表示； \n\n- 无向图： 图G中的每条边都是无方向的； 顶点间的关系用(vi， vj)表示； \n\n- 完全图： 图G任意两个顶点都有一条边相连接； \n\n  > 1、有向完全图： n 个顶点的有向图有n(n-1) 条边。 \n  >\n  > 2、无向完全图： n 个顶点的无向图有 n(n-1)/2 条边。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gciwndys64j20pi0czjtr.jpg)\n\n## 度\n\n度：顶点v 的度是与它相关联的边的条数。记作TD(v)。 \n\n- 入度：是以 v 为终点的有向边的条数, 记作 ID(v); \n- 出度：是以 v 为始点的有向边的条数, 记作 OD(v)。 \n\n在有向图中, 顶点的度等于该顶点的入度与出度之和。 \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciwsgaxrdj20ds08yq3n.jpg)\n\n## 带权图 \n\n即边上带权的图。其中权是指每条边标上的具有某种含义的数值（即与边相关的数）。 \n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gciwtn5l1oj20g50eadgl.jpg)\n\n## 连通图 \n\n在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的，则称此图是连通图。无向图 G=(V,E) 是连通的，那么边的数目大于等于顶点的数目减 1 。\n\n强连通图：在有向图中，若对于每一对顶点vi和vj，都存在一条从vi到vj和从vj到vi的路径，则称此图是强连通图 。\n\n## 生成树（最小生成树） \n\n是一个极小连通子图，它含有图中全部n个顶点，但只有n-1条边。\n\n- 如果在生成树上添加1条边 ，必定构成一个环。 \n- 若图中有n个顶点， 却少于n-1条边 ，必为非连通图。  \n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gcix0fqr6mj20vi09p42g.jpg)\n\n## 图的存储结构 \n\n图的存储结构有 \n\n- 邻接矩阵 \n- 邻接表 \n- 十字链表 \n- 邻接多重表 \n\n### 邻接矩阵 \n\n对于一个具有n个结点的图，可以使用n*n的矩阵(二维数组)来表示它们间的邻接关系 \n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcixzifbi5j20my0akjvu.jpg)\n\n### 邻接表 \n\n邻接表由表头结点和表结点两部分组成 ,其中图中每个顶点均对应一个存储在数组中的表头结点。 如这个表头结点所对应的顶点存在相邻顶点，则把相邻顶点依次存放于表头结点所指向的单向链表中。\n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gciy28ycenj20tk0ej14x.jpg) \n\n## 图的遍历 \n\n### 深度优先搜索( DFS ) \n\n1. 访问起始点 v; \n2. 若v的第1个邻接点没访问过，深度遍历此邻接点； \n3. 若当前邻接点已访问过，再找v的第2个邻接点重新遍历 \n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy3ph8c3j20gb0d9go8.jpg)\n\n### 广度优先搜索( BFS ) \n\n1. 在访问了起始点v之后，依次访问 v的邻接点； \n2. 然后再依次（顺序）访问这些点（下一层）中未被访问过的邻接点； \n3. 直到所有顶点都被访问过为止。 \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciy5tjb60j20eo0e7gnf.jpg)","source":"_posts/数据结构与算法-树和二叉树.md","raw":"---\ntitle: 数据结构与算法-树和二叉树\ntags:\n  - 数据库系统工程师\ncategories: 数据库系统工程师\nkeywords: 树和二叉树  数据结构与算法\ndescription: 数据结构与算法 树和二叉树\ncover: 'https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy9u7m65j20b407hmxf.jpg'\nabbrlink: 9363cf89\ndate: 2020-03-05 09:56:20\ntop_img:\ncopyright:\n---\n\n# 树\n\n树是n(nn≥0 )个结点的有限集合，n=0时称为空树，在任一非空树中\n\n- 有且仅有一个称为根的节点\n- 其余的节点可分为m(m≥0) 个互不相交的子集T1，T2，....，Tm，其中每个子集本身又是一颗树，并称为根节点的子树。\n\n## 树的基本概念\n\n- 双亲和孩子\n- 兄弟：具有相同双亲的结点互为兄弟。\n- 结点的度：一个结点的子树的个数记为该结点的度。 \n- 树的度：树中各结点的度的最大值 \n- 叶子结点：也称为终端结点，指度为零的结点。 \n- 内部结点：度不为零的结点称为分支结点或非终端结点。除根结点之外，分支结点也称为内部结点 \n- 结点的层次：根为第一层，根的孩子为第二层，依此类推。 \n- 树的高度：一棵树的最大层次数记为树的高度（或深度）。 \n- 有序（无序）树：若将树中的结点的各子树看成是从左到右具有次序的，即不能交换，则称该树为有序树，否则称为无序树。 \n- 森林：是m(m≥O)棵互不相交的树的集合 \n\n## 树的存储结构\n\n### 标准存储结构\n\n- 结点的数据\n- 指向子结点的的指针\n\n### 带逆存储结构 \n\n- 结点的数据 \n- 指向子结点的指针 \n- 指向其父结点的指针 \n\n## 树的遍历\n\n遍历是指对树中所有结点信息的访问，即依次对树中每个结点访问一次且仅访问一次\n\n### 前序遍历（先跟遍历）\n\n先访问根节点——>左边根结点——>左边子结点——>右边子结点——>右边根结点\n\n```shell\nABEFIJCDGH\n```\n\n###  后续遍历（后根遍历）\n\n先访问左边子结点——>左边根结点——>右边子结点——>右边根结点——>根结点\n\n```shell\nEFIJFBCGHDA\n```\n\n### 层次遍历\n\n逐层遍历，从左到右遍历\n\n```shell\nABCDEFGHIJ\n```\n\n\n\n ![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gcitvebupbj20hs0b3mxu.jpg)\n\n##  二叉树\n\n二叉树(BinaryTree)是n(n≥o)个结点的有限集合，它或者是空树(n=0)，或者是由一个根结点及两棵互不相交的、分别称为左子树和右子树的二叉树所组成。 \n\n### 二叉树与树的区别\n\n- 二叉树的结点的最大度为2，而树中不限制结点的度。 \n- 二叉树的结点的子树要区分左子树和右子树 \n- 二叉树可以为空，即没有结点，树至少有一个结点。 \n\n### 二叉树的性质\n\n1、二叉树第i层上的结点数目最多为2<sup>i-1</sup>(i≥1)。 \n\n> 下图第3层最多有2<sup>3-1</sup>=4\n\n2、深度为k的二叉树至多有2<sup>k</sup>-1个结点(k≥1)。 \n\n> 下图二叉树深度为4，最多有2<sup>4</sup>-1=15\n\n3、在任意一棵二叉树中，若终端结点数为n0， 度为2的结点数为n2， 则n0=n2+1。\n\n> 下图终端结点分别为6、7、8、9、10、11。度为2的节点为1、2、3、4、5。\n>\n> 终端结点数为n0=6，度为2的结点数为n2=5，n0=n2+1\n\n4、具有n个结点的完全二叉树的深度为⌊log2<sup>n</sup>」 +1。 \n\n5、对一棵有n个结点的完全二叉树的结点按层次自左至右进行编号，则对任一结点i有：\n\n- 若i=1， 则结点 i 是二叉树的根，无双亲，若i>1， 则其双亲为⌊ i/2 」 。  \n- 若 2i>n，则结点i无左孩子，否则其左孩子为 2i。 \n- 若 2i+1>n，则结点i无右孩子，否则其右孩子为 2i+1。 \n\n![图1](https://tva3.sinaimg.cn/large/9fc55f55ly1gciuyjp40aj20ek08c0ss.jpg)\n\n## 满二叉树\n\n若深度为k的二叉树有2k-1个结点，则称其为满二叉树。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcivc16wn7j20br078acc.jpg)\n\n## 完全二叉树\n\n深度为k、有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树编号从1至n的结点一一对应时，称之为完全二叉树。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcivd2nnffj20bq0740us.jpg)\n\n## 二叉树的存储结构 \n\n### 顺序存储结构 \n\n对完全二叉树既简单又节省空间，而对于一般二叉树则不适用 \n\n### 链式存储结构 \n\n由于二叉树中结点包含有数据元素、左子树根、右子树根及双亲等信息，因此可以用三叉链表或二叉链袭来存储二叉树。链表的头指针指向二叉树的根结点。 \n\n## 二叉树的遍历 \n\n### 前序遍历 \n\n```shell\n421356\n```\n\n### 中序遍历\n\n先访问左子树——>再访问根——>右子树(递归)\n\n```shell\n123456\n```\n\n### 后序遍历\n\n```shell\n132654\n```\n\n\n\n\n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gcivex58zlj20b609zgmn.jpg)\n\n\n\n> 例：已知二叉树前序遍历是ABHFDECKG， 中序遍历序列是HBDFAEKCG， 它的后序遍历序列是HDFBKGCEA\n\n## 二叉排序树 \n\n又称为二叉查找树，定义：或者是一棵空树，或者是具有下列性质的二叉树.\n\n1. 若左子树不空，则左子树上所有结点的值均小于它的根结点的值 。\n2. 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值； \n3. 左、右子树也分别为二叉排序树； \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciw8s6g6hj20az0cogmh.jpg)\n\n## 平衡二叉树 \n\n又被称为AVL树，具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 \n\n## 线索树 \n\nn个结点的二叉链表中含有n+1 (2n-(n-1)=n+1)个空指针域。利用二叉链表中的空指针域，存放指向结点在某种遍历次序下的前趋和后继结点的指针（这种附加的指针称为\"线索\"）。 \n\n## 最优二叉树 \n\n给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。 \n\n# 图\n\n图G是由两个集合V和E构成的二元组，记作G=(V， E)，其中V是图中顶点的非空有限集合， E是图中边的有限集合。 \n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gciwhxu3nqj20c50b9mxm.jpg)\n\n- 有向图： 图G中的每条边都是有方向的，顶点间的关系用<vi， vj>表示； \n\n- 无向图： 图G中的每条边都是无方向的； 顶点间的关系用(vi， vj)表示； \n\n- 完全图： 图G任意两个顶点都有一条边相连接； \n\n  > 1、有向完全图： n 个顶点的有向图有n(n-1) 条边。 \n  >\n  > 2、无向完全图： n 个顶点的无向图有 n(n-1)/2 条边。 \n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gciwndys64j20pi0czjtr.jpg)\n\n## 度\n\n度：顶点v 的度是与它相关联的边的条数。记作TD(v)。 \n\n- 入度：是以 v 为终点的有向边的条数, 记作 ID(v); \n- 出度：是以 v 为始点的有向边的条数, 记作 OD(v)。 \n\n在有向图中, 顶点的度等于该顶点的入度与出度之和。 \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciwsgaxrdj20ds08yq3n.jpg)\n\n## 带权图 \n\n即边上带权的图。其中权是指每条边标上的具有某种含义的数值（即与边相关的数）。 \n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gciwtn5l1oj20g50eadgl.jpg)\n\n## 连通图 \n\n在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的，则称此图是连通图。无向图 G=(V,E) 是连通的，那么边的数目大于等于顶点的数目减 1 。\n\n强连通图：在有向图中，若对于每一对顶点vi和vj，都存在一条从vi到vj和从vj到vi的路径，则称此图是强连通图 。\n\n## 生成树（最小生成树） \n\n是一个极小连通子图，它含有图中全部n个顶点，但只有n-1条边。\n\n- 如果在生成树上添加1条边 ，必定构成一个环。 \n- 若图中有n个顶点， 却少于n-1条边 ，必为非连通图。  \n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gcix0fqr6mj20vi09p42g.jpg)\n\n## 图的存储结构 \n\n图的存储结构有 \n\n- 邻接矩阵 \n- 邻接表 \n- 十字链表 \n- 邻接多重表 \n\n### 邻接矩阵 \n\n对于一个具有n个结点的图，可以使用n*n的矩阵(二维数组)来表示它们间的邻接关系 \n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcixzifbi5j20my0akjvu.jpg)\n\n### 邻接表 \n\n邻接表由表头结点和表结点两部分组成 ,其中图中每个顶点均对应一个存储在数组中的表头结点。 如这个表头结点所对应的顶点存在相邻顶点，则把相邻顶点依次存放于表头结点所指向的单向链表中。\n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gciy28ycenj20tk0ej14x.jpg) \n\n## 图的遍历 \n\n### 深度优先搜索( DFS ) \n\n1. 访问起始点 v; \n2. 若v的第1个邻接点没访问过，深度遍历此邻接点； \n3. 若当前邻接点已访问过，再找v的第2个邻接点重新遍历 \n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy3ph8c3j20gb0d9go8.jpg)\n\n### 广度优先搜索( BFS ) \n\n1. 在访问了起始点v之后，依次访问 v的邻接点； \n2. 然后再依次（顺序）访问这些点（下一层）中未被访问过的邻接点； \n3. 直到所有顶点都被访问过为止。 \n\n![图片](https://tvax1.sinaimg.cn/large/9fc55f55ly1gciy5tjb60j20eo0e7gnf.jpg)","slug":"数据结构与算法-树和二叉树","published":1,"updated":"2020-03-05T13:41:37.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7ql8002ntvm0fxos8ix5","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是n(nn≥0 )个结点的有限集合，n=0时称为空树，在任一非空树中</p>\n<ul>\n<li>有且仅有一个称为根的节点</li>\n<li>其余的节点可分为m(m≥0) 个互不相交的子集T1，T2，….，Tm，其中每个子集本身又是一颗树，并称为根节点的子树。</li>\n</ul>\n<h2 id=\"树的基本概念\"><a href=\"#树的基本概念\" class=\"headerlink\" title=\"树的基本概念\"></a>树的基本概念</h2><ul>\n<li>双亲和孩子</li>\n<li>兄弟：具有相同双亲的结点互为兄弟。</li>\n<li>结点的度：一个结点的子树的个数记为该结点的度。 </li>\n<li>树的度：树中各结点的度的最大值 </li>\n<li>叶子结点：也称为终端结点，指度为零的结点。 </li>\n<li>内部结点：度不为零的结点称为分支结点或非终端结点。除根结点之外，分支结点也称为内部结点 </li>\n<li>结点的层次：根为第一层，根的孩子为第二层，依此类推。 </li>\n<li>树的高度：一棵树的最大层次数记为树的高度（或深度）。 </li>\n<li>有序（无序）树：若将树中的结点的各子树看成是从左到右具有次序的，即不能交换，则称该树为有序树，否则称为无序树。 </li>\n<li>森林：是m(m≥O)棵互不相交的树的集合 </li>\n</ul>\n<h2 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h2><h3 id=\"标准存储结构\"><a href=\"#标准存储结构\" class=\"headerlink\" title=\"标准存储结构\"></a>标准存储结构</h3><ul>\n<li>结点的数据</li>\n<li>指向子结点的的指针</li>\n</ul>\n<h3 id=\"带逆存储结构\"><a href=\"#带逆存储结构\" class=\"headerlink\" title=\"带逆存储结构\"></a>带逆存储结构</h3><ul>\n<li>结点的数据 </li>\n<li>指向子结点的指针 </li>\n<li>指向其父结点的指针 </li>\n</ul>\n<h2 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h2><p>遍历是指对树中所有结点信息的访问，即依次对树中每个结点访问一次且仅访问一次</p>\n<h3 id=\"前序遍历（先跟遍历）\"><a href=\"#前序遍历（先跟遍历）\" class=\"headerlink\" title=\"前序遍历（先跟遍历）\"></a>前序遍历（先跟遍历）</h3><p>先访问根节点——&gt;左边根结点——&gt;左边子结点——&gt;右边子结点——&gt;右边根结点</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABEFIJCDGH</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"后续遍历（后根遍历）\"><a href=\"#后续遍历（后根遍历）\" class=\"headerlink\" title=\"后续遍历（后根遍历）\"></a>后续遍历（后根遍历）</h3><p>先访问左边子结点——&gt;左边根结点——&gt;右边子结点——&gt;右边根结点——&gt;根结点</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EFIJFBCGHDA</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><p>逐层遍历，从左到右遍历</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEFGHIJ</span><br></pre></td></tr></table></figure></div>\n\n\n\n<p> <a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcitvebupbj20hs0b3mxu.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcitvebupbj20hs0b3mxu.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树(BinaryTree)是n(n≥o)个结点的有限集合，它或者是空树(n=0)，或者是由一个根结点及两棵互不相交的、分别称为左子树和右子树的二叉树所组成。 </p>\n<h3 id=\"二叉树与树的区别\"><a href=\"#二叉树与树的区别\" class=\"headerlink\" title=\"二叉树与树的区别\"></a>二叉树与树的区别</h3><ul>\n<li>二叉树的结点的最大度为2，而树中不限制结点的度。 </li>\n<li>二叉树的结点的子树要区分左子树和右子树 </li>\n<li>二叉树可以为空，即没有结点，树至少有一个结点。 </li>\n</ul>\n<h3 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h3><p>1、二叉树第i层上的结点数目最多为2<sup>i-1</sup>(i≥1)。 </p>\n<blockquote>\n<p>下图第3层最多有2<sup>3-1</sup>=4</p>\n</blockquote>\n<p>2、深度为k的二叉树至多有2<sup>k</sup>-1个结点(k≥1)。 </p>\n<blockquote>\n<p>下图二叉树深度为4，最多有2<sup>4</sup>-1=15</p>\n</blockquote>\n<p>3、在任意一棵二叉树中，若终端结点数为n0， 度为2的结点数为n2， 则n0=n2+1。</p>\n<blockquote>\n<p>下图终端结点分别为6、7、8、9、10、11。度为2的节点为1、2、3、4、5。</p>\n<p>终端结点数为n0=6，度为2的结点数为n2=5，n0=n2+1</p>\n</blockquote>\n<p>4、具有n个结点的完全二叉树的深度为⌊log2<sup>n</sup>」 +1。 </p>\n<p>5、对一棵有n个结点的完全二叉树的结点按层次自左至右进行编号，则对任一结点i有：</p>\n<ul>\n<li>若i=1， 则结点 i 是二叉树的根，无双亲，若i&gt;1， 则其双亲为⌊ i/2 」 。  </li>\n<li>若 2i&gt;n，则结点i无左孩子，否则其左孩子为 2i。 </li>\n<li>若 2i+1&gt;n，则结点i无右孩子，否则其右孩子为 2i+1。 </li>\n</ul>\n<p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciuyjp40aj20ek08c0ss.jpg\" data-fancybox=\"group\" data-caption=\"图1\" class=\"fancybox\"><img alt=\"图1\" title=\"图1\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciuyjp40aj20ek08c0ss.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h2><p>若深度为k的二叉树有2k-1个结点，则称其为满二叉树。 </p>\n<p><a href=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivc16wn7j20br078acc.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivc16wn7j20br078acc.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><p>深度为k、有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树编号从1至n的结点一一对应时，称之为完全二叉树。 </p>\n<p><a href=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivd2nnffj20bq0740us.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivd2nnffj20bq0740us.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"二叉树的存储结构\"><a href=\"#二叉树的存储结构\" class=\"headerlink\" title=\"二叉树的存储结构\"></a>二叉树的存储结构</h2><h3 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h3><p>对完全二叉树既简单又节省空间，而对于一般二叉树则不适用 </p>\n<h3 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h3><p>由于二叉树中结点包含有数据元素、左子树根、右子树根及双亲等信息，因此可以用三叉链表或二叉链袭来存储二叉树。链表的头指针指向二叉树的根结点。 </p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">421356</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>先访问左子树——&gt;再访问根——&gt;右子树(递归)</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">132654</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n<p><a href=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcivex58zlj20b609zgmn.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcivex58zlj20b609zgmn.jpg\" class=\"lazyload\"></a></p>\n<blockquote>\n<p>例：已知二叉树前序遍历是ABHFDECKG， 中序遍历序列是HBDFAEKCG， 它的后序遍历序列是HDFBKGCEA</p>\n</blockquote>\n<h2 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h2><p>又称为二叉查找树，定义：或者是一棵空树，或者是具有下列性质的二叉树.</p>\n<ol>\n<li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值 。</li>\n<li>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值； </li>\n<li>左、右子树也分别为二叉排序树； </li>\n</ol>\n<p><a href=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciw8s6g6hj20az0cogmh.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciw8s6g6hj20az0cogmh.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>又被称为AVL树，具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 </p>\n<h2 id=\"线索树\"><a href=\"#线索树\" class=\"headerlink\" title=\"线索树\"></a>线索树</h2><p>n个结点的二叉链表中含有n+1 (2n-(n-1)=n+1)个空指针域。利用二叉链表中的空指针域，存放指向结点在某种遍历次序下的前趋和后继结点的指针（这种附加的指针称为”线索”）。 </p>\n<h2 id=\"最优二叉树\"><a href=\"#最优二叉树\" class=\"headerlink\" title=\"最优二叉树\"></a>最优二叉树</h2><p>给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。 </p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图G是由两个集合V和E构成的二元组，记作G=(V， E)，其中V是图中顶点的非空有限集合， E是图中边的有限集合。 </p>\n<p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciwhxu3nqj20c50b9mxm.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciwhxu3nqj20c50b9mxm.jpg\" class=\"lazyload\"></a></p>\n<ul>\n<li><p>有向图： 图G中的每条边都是有方向的，顶点间的关系用&lt;vi， vj&gt;表示； </p>\n</li>\n<li><p>无向图： 图G中的每条边都是无方向的； 顶点间的关系用(vi， vj)表示； </p>\n</li>\n<li><p>完全图： 图G任意两个顶点都有一条边相连接； </p>\n<blockquote>\n<p>1、有向完全图： n 个顶点的有向图有n(n-1) 条边。 </p>\n<p>2、无向完全图： n 个顶点的无向图有 n(n-1)/2 条边。 </p>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gciwndys64j20pi0czjtr.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gciwndys64j20pi0czjtr.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"度\"><a href=\"#度\" class=\"headerlink\" title=\"度\"></a>度</h2><p>度：顶点v 的度是与它相关联的边的条数。记作TD(v)。 </p>\n<ul>\n<li>入度：是以 v 为终点的有向边的条数, 记作 ID(v); </li>\n<li>出度：是以 v 为始点的有向边的条数, 记作 OD(v)。 </li>\n</ul>\n<p>在有向图中, 顶点的度等于该顶点的入度与出度之和。 </p>\n<p><a href=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciwsgaxrdj20ds08yq3n.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciwsgaxrdj20ds08yq3n.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"带权图\"><a href=\"#带权图\" class=\"headerlink\" title=\"带权图\"></a>带权图</h2><p>即边上带权的图。其中权是指每条边标上的具有某种含义的数值（即与边相关的数）。 </p>\n<p><a href=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gciwtn5l1oj20g50eadgl.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gciwtn5l1oj20g50eadgl.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h2><p>在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的，则称此图是连通图。无向图 G=(V,E) 是连通的，那么边的数目大于等于顶点的数目减 1 。</p>\n<p>强连通图：在有向图中，若对于每一对顶点vi和vj，都存在一条从vi到vj和从vj到vi的路径，则称此图是强连通图 。</p>\n<h2 id=\"生成树（最小生成树）\"><a href=\"#生成树（最小生成树）\" class=\"headerlink\" title=\"生成树（最小生成树）\"></a>生成树（最小生成树）</h2><p>是一个极小连通子图，它含有图中全部n个顶点，但只有n-1条边。</p>\n<ul>\n<li>如果在生成树上添加1条边 ，必定构成一个环。 </li>\n<li>若图中有n个顶点， 却少于n-1条边 ，必为非连通图。  </li>\n</ul>\n<p><a href=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcix0fqr6mj20vi09p42g.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcix0fqr6mj20vi09p42g.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"图的存储结构\"><a href=\"#图的存储结构\" class=\"headerlink\" title=\"图的存储结构\"></a>图的存储结构</h2><p>图的存储结构有 </p>\n<ul>\n<li>邻接矩阵 </li>\n<li>邻接表 </li>\n<li>十字链表 </li>\n<li>邻接多重表 </li>\n</ul>\n<h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>对于一个具有n个结点的图，可以使用n*n的矩阵(二维数组)来表示它们间的邻接关系 </p>\n<p><a href=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcixzifbi5j20my0akjvu.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcixzifbi5j20my0akjvu.jpg\" class=\"lazyload\"></a></p>\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>邻接表由表头结点和表结点两部分组成 ,其中图中每个顶点均对应一个存储在数组中的表头结点。 如这个表头结点所对应的顶点存在相邻顶点，则把相邻顶点依次存放于表头结点所指向的单向链表中。</p>\n<p><a href=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gciy28ycenj20tk0ej14x.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gciy28ycenj20tk0ej14x.jpg\" class=\"lazyload\"></a> </p>\n<h2 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h2><h3 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索( DFS )\"></a>深度优先搜索( DFS )</h3><ol>\n<li>访问起始点 v; </li>\n<li>若v的第1个邻接点没访问过，深度遍历此邻接点； </li>\n<li>若当前邻接点已访问过，再找v的第2个邻接点重新遍历 </li>\n</ol>\n<p><a href=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy3ph8c3j20gb0d9go8.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy3ph8c3j20gb0d9go8.jpg\" class=\"lazyload\"></a></p>\n<h3 id=\"广度优先搜索-BFS\"><a href=\"#广度优先搜索-BFS\" class=\"headerlink\" title=\"广度优先搜索( BFS )\"></a>广度优先搜索( BFS )</h3><ol>\n<li>在访问了起始点v之后，依次访问 v的邻接点； </li>\n<li>然后再依次（顺序）访问这些点（下一层）中未被访问过的邻接点； </li>\n<li>直到所有顶点都被访问过为止。 </li>\n</ol>\n<p><a href=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciy5tjb60j20eo0e7gnf.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciy5tjb60j20eo0e7gnf.jpg\" class=\"lazyload\"></a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是n(nn≥0 )个结点的有限集合，n=0时称为空树，在任一非空树中</p>\n<ul>\n<li>有且仅有一个称为根的节点</li>\n<li>其余的节点可分为m(m≥0) 个互不相交的子集T1，T2，….，Tm，其中每个子集本身又是一颗树，并称为根节点的子树。</li>\n</ul>\n<h2 id=\"树的基本概念\"><a href=\"#树的基本概念\" class=\"headerlink\" title=\"树的基本概念\"></a>树的基本概念</h2><ul>\n<li>双亲和孩子</li>\n<li>兄弟：具有相同双亲的结点互为兄弟。</li>\n<li>结点的度：一个结点的子树的个数记为该结点的度。 </li>\n<li>树的度：树中各结点的度的最大值 </li>\n<li>叶子结点：也称为终端结点，指度为零的结点。 </li>\n<li>内部结点：度不为零的结点称为分支结点或非终端结点。除根结点之外，分支结点也称为内部结点 </li>\n<li>结点的层次：根为第一层，根的孩子为第二层，依此类推。 </li>\n<li>树的高度：一棵树的最大层次数记为树的高度（或深度）。 </li>\n<li>有序（无序）树：若将树中的结点的各子树看成是从左到右具有次序的，即不能交换，则称该树为有序树，否则称为无序树。 </li>\n<li>森林：是m(m≥O)棵互不相交的树的集合 </li>\n</ul>\n<h2 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h2><h3 id=\"标准存储结构\"><a href=\"#标准存储结构\" class=\"headerlink\" title=\"标准存储结构\"></a>标准存储结构</h3><ul>\n<li>结点的数据</li>\n<li>指向子结点的的指针</li>\n</ul>\n<h3 id=\"带逆存储结构\"><a href=\"#带逆存储结构\" class=\"headerlink\" title=\"带逆存储结构\"></a>带逆存储结构</h3><ul>\n<li>结点的数据 </li>\n<li>指向子结点的指针 </li>\n<li>指向其父结点的指针 </li>\n</ul>\n<h2 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h2><p>遍历是指对树中所有结点信息的访问，即依次对树中每个结点访问一次且仅访问一次</p>\n<h3 id=\"前序遍历（先跟遍历）\"><a href=\"#前序遍历（先跟遍历）\" class=\"headerlink\" title=\"前序遍历（先跟遍历）\"></a>前序遍历（先跟遍历）</h3><p>先访问根节点——&gt;左边根结点——&gt;左边子结点——&gt;右边子结点——&gt;右边根结点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABEFIJCDGH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后续遍历（后根遍历）\"><a href=\"#后续遍历（后根遍历）\" class=\"headerlink\" title=\"后续遍历（后根遍历）\"></a>后续遍历（后根遍历）</h3><p>先访问左边子结点——&gt;左边根结点——&gt;右边子结点——&gt;右边根结点——&gt;根结点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EFIJFBCGHDA</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><p>逐层遍历，从左到右遍历</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEFGHIJ</span><br></pre></td></tr></table></figure>\n\n\n\n<p> <img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcitvebupbj20hs0b3mxu.jpg\" alt=\"图片\"></p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树(BinaryTree)是n(n≥o)个结点的有限集合，它或者是空树(n=0)，或者是由一个根结点及两棵互不相交的、分别称为左子树和右子树的二叉树所组成。 </p>\n<h3 id=\"二叉树与树的区别\"><a href=\"#二叉树与树的区别\" class=\"headerlink\" title=\"二叉树与树的区别\"></a>二叉树与树的区别</h3><ul>\n<li>二叉树的结点的最大度为2，而树中不限制结点的度。 </li>\n<li>二叉树的结点的子树要区分左子树和右子树 </li>\n<li>二叉树可以为空，即没有结点，树至少有一个结点。 </li>\n</ul>\n<h3 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h3><p>1、二叉树第i层上的结点数目最多为2<sup>i-1</sup>(i≥1)。 </p>\n<blockquote>\n<p>下图第3层最多有2<sup>3-1</sup>=4</p>\n</blockquote>\n<p>2、深度为k的二叉树至多有2<sup>k</sup>-1个结点(k≥1)。 </p>\n<blockquote>\n<p>下图二叉树深度为4，最多有2<sup>4</sup>-1=15</p>\n</blockquote>\n<p>3、在任意一棵二叉树中，若终端结点数为n0， 度为2的结点数为n2， 则n0=n2+1。</p>\n<blockquote>\n<p>下图终端结点分别为6、7、8、9、10、11。度为2的节点为1、2、3、4、5。</p>\n<p>终端结点数为n0=6，度为2的结点数为n2=5，n0=n2+1</p>\n</blockquote>\n<p>4、具有n个结点的完全二叉树的深度为⌊log2<sup>n</sup>」 +1。 </p>\n<p>5、对一棵有n个结点的完全二叉树的结点按层次自左至右进行编号，则对任一结点i有：</p>\n<ul>\n<li>若i=1， 则结点 i 是二叉树的根，无双亲，若i&gt;1， 则其双亲为⌊ i/2 」 。  </li>\n<li>若 2i&gt;n，则结点i无左孩子，否则其左孩子为 2i。 </li>\n<li>若 2i+1&gt;n，则结点i无右孩子，否则其右孩子为 2i+1。 </li>\n</ul>\n<p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciuyjp40aj20ek08c0ss.jpg\" alt=\"图1\"></p>\n<h2 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h2><p>若深度为k的二叉树有2k-1个结点，则称其为满二叉树。 </p>\n<p><img src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivc16wn7j20br078acc.jpg\" alt=\"图片\"></p>\n<h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><p>深度为k、有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树编号从1至n的结点一一对应时，称之为完全二叉树。 </p>\n<p><img src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcivd2nnffj20bq0740us.jpg\" alt=\"图片\"></p>\n<h2 id=\"二叉树的存储结构\"><a href=\"#二叉树的存储结构\" class=\"headerlink\" title=\"二叉树的存储结构\"></a>二叉树的存储结构</h2><h3 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h3><p>对完全二叉树既简单又节省空间，而对于一般二叉树则不适用 </p>\n<h3 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h3><p>由于二叉树中结点包含有数据元素、左子树根、右子树根及双亲等信息，因此可以用三叉链表或二叉链袭来存储二叉树。链表的头指针指向二叉树的根结点。 </p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">421356</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>先访问左子树——&gt;再访问根——&gt;右子树(递归)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">132654</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcivex58zlj20b609zgmn.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>例：已知二叉树前序遍历是ABHFDECKG， 中序遍历序列是HBDFAEKCG， 它的后序遍历序列是HDFBKGCEA</p>\n</blockquote>\n<h2 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h2><p>又称为二叉查找树，定义：或者是一棵空树，或者是具有下列性质的二叉树.</p>\n<ol>\n<li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值 。</li>\n<li>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值； </li>\n<li>左、右子树也分别为二叉排序树； </li>\n</ol>\n<p><img src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciw8s6g6hj20az0cogmh.jpg\" alt=\"图片\"></p>\n<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>又被称为AVL树，具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 </p>\n<h2 id=\"线索树\"><a href=\"#线索树\" class=\"headerlink\" title=\"线索树\"></a>线索树</h2><p>n个结点的二叉链表中含有n+1 (2n-(n-1)=n+1)个空指针域。利用二叉链表中的空指针域，存放指向结点在某种遍历次序下的前趋和后继结点的指针（这种附加的指针称为”线索”）。 </p>\n<h2 id=\"最优二叉树\"><a href=\"#最优二叉树\" class=\"headerlink\" title=\"最优二叉树\"></a>最优二叉树</h2><p>给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。 </p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图G是由两个集合V和E构成的二元组，记作G=(V， E)，其中V是图中顶点的非空有限集合， E是图中边的有限集合。 </p>\n<p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gciwhxu3nqj20c50b9mxm.jpg\" alt=\"图片\"></p>\n<ul>\n<li><p>有向图： 图G中的每条边都是有方向的，顶点间的关系用&lt;vi， vj&gt;表示； </p>\n</li>\n<li><p>无向图： 图G中的每条边都是无方向的； 顶点间的关系用(vi， vj)表示； </p>\n</li>\n<li><p>完全图： 图G任意两个顶点都有一条边相连接； </p>\n<blockquote>\n<p>1、有向完全图： n 个顶点的有向图有n(n-1) 条边。 </p>\n<p>2、无向完全图： n 个顶点的无向图有 n(n-1)/2 条边。 </p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gciwndys64j20pi0czjtr.jpg\" alt=\"图片\"></p>\n<h2 id=\"度\"><a href=\"#度\" class=\"headerlink\" title=\"度\"></a>度</h2><p>度：顶点v 的度是与它相关联的边的条数。记作TD(v)。 </p>\n<ul>\n<li>入度：是以 v 为终点的有向边的条数, 记作 ID(v); </li>\n<li>出度：是以 v 为始点的有向边的条数, 记作 OD(v)。 </li>\n</ul>\n<p>在有向图中, 顶点的度等于该顶点的入度与出度之和。 </p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciwsgaxrdj20ds08yq3n.jpg\" alt=\"图片\"></p>\n<h2 id=\"带权图\"><a href=\"#带权图\" class=\"headerlink\" title=\"带权图\"></a>带权图</h2><p>即边上带权的图。其中权是指每条边标上的具有某种含义的数值（即与边相关的数）。 </p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gciwtn5l1oj20g50eadgl.jpg\" alt=\"图片\"></p>\n<h2 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h2><p>在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的，则称此图是连通图。无向图 G=(V,E) 是连通的，那么边的数目大于等于顶点的数目减 1 。</p>\n<p>强连通图：在有向图中，若对于每一对顶点vi和vj，都存在一条从vi到vj和从vj到vi的路径，则称此图是强连通图 。</p>\n<h2 id=\"生成树（最小生成树）\"><a href=\"#生成树（最小生成树）\" class=\"headerlink\" title=\"生成树（最小生成树）\"></a>生成树（最小生成树）</h2><p>是一个极小连通子图，它含有图中全部n个顶点，但只有n-1条边。</p>\n<ul>\n<li>如果在生成树上添加1条边 ，必定构成一个环。 </li>\n<li>若图中有n个顶点， 却少于n-1条边 ，必为非连通图。  </li>\n</ul>\n<p><img src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcix0fqr6mj20vi09p42g.jpg\" alt=\"图片\"></p>\n<h2 id=\"图的存储结构\"><a href=\"#图的存储结构\" class=\"headerlink\" title=\"图的存储结构\"></a>图的存储结构</h2><p>图的存储结构有 </p>\n<ul>\n<li>邻接矩阵 </li>\n<li>邻接表 </li>\n<li>十字链表 </li>\n<li>邻接多重表 </li>\n</ul>\n<h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>对于一个具有n个结点的图，可以使用n*n的矩阵(二维数组)来表示它们间的邻接关系 </p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcixzifbi5j20my0akjvu.jpg\" alt=\"图片\"></p>\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>邻接表由表头结点和表结点两部分组成 ,其中图中每个顶点均对应一个存储在数组中的表头结点。 如这个表头结点所对应的顶点存在相邻顶点，则把相邻顶点依次存放于表头结点所指向的单向链表中。</p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gciy28ycenj20tk0ej14x.jpg\" alt=\"图片\"> </p>\n<h2 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h2><h3 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索( DFS )\"></a>深度优先搜索( DFS )</h3><ol>\n<li>访问起始点 v; </li>\n<li>若v的第1个邻接点没访问过，深度遍历此邻接点； </li>\n<li>若当前邻接点已访问过，再找v的第2个邻接点重新遍历 </li>\n</ol>\n<p><img src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gciy3ph8c3j20gb0d9go8.jpg\" alt=\"图片\"></p>\n<h3 id=\"广度优先搜索-BFS\"><a href=\"#广度优先搜索-BFS\" class=\"headerlink\" title=\"广度优先搜索( BFS )\"></a>广度优先搜索( BFS )</h3><ol>\n<li>在访问了起始点v之后，依次访问 v的邻接点； </li>\n<li>然后再依次（顺序）访问这些点（下一层）中未被访问过的邻接点； </li>\n<li>直到所有顶点都被访问过为止。 </li>\n</ol>\n<p><img src=\"https://tvax1.sinaimg.cn/large/9fc55f55ly1gciy5tjb60j20eo0e7gnf.jpg\" alt=\"图片\"></p>\n"},{"title":"数据结构与算法-线性结构","keywords":"数据结构与算法 线性结构 数据库系统工程师","description":"数据结构与算法 线性结构 数据库系统工程师","cover":"https://tva1.sinaimg.cn/large/9fc55f55ly1gci7qpd07ij20dw0af3yi.jpg","abbrlink":"dd39da98","date":"2020-03-04T09:13:39.000Z","top_img":null,"copyright":null,"_content":"\n# 线性表\n\n## 线性表定义\n\n线性表是n个元素的有限序列，通常记为(a1,a2,...,an)。\n\n特点\n\n存在唯一的表头和表尾。\n\n- 除了表头外，表中的每一个元素均只有唯一的直接前驱。\n- 除了表尾外，表中的每一个元素均只有唯一的直接后继。 \n\n## 线性表的存储结构\n\n### 顺序存储\n\n是用一组地址连续的存储单元依次存储线性表中的数据元素， 从而使得逻辑关系相邻的两个元素在物理位置上也相邻 。\n\n- 优点：可以随机存取表中的元素 \n- 缺点：插入和删除操作需要移动大量的元素。\n\n在线性表的顺序存储结构中，第i个元素ai的存储位置为：\n\n```shell\nLOC(ai) = LOC(a1) + (i-1)*L\n```\n\n> 其中LOC(a1)是表中第一个元素的存储位置， L是表中每个元素所占空间的大小。 \n\n###  链式存储\n\n链式存储是指用结点来存储数据元素，结点的空间可以是连续的，也可以是不连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。 \n\n结点空间只有在需要的时候才申请，无须事先分配。 \n\n- 优点：插入和删除操作不需要移动元素，操作方便 。\n- 缺点：增加了存储空间开销，不能随机访问任一结点。 \n\n其他几种链表结构\n\n1. 双向链表：每个结点包含两个指针，指明直接前驱和直接后继元素，可在两个方向上遍历链表。 \n2. 循环链表：表尾结点的指针指向表中的第一个结点，可在任何位置上开始遍历整个链表。 \n3. 静态链表：借助数组来描述线性表的链式存储结构。 \n\n## 线性表的插入和删除运算\n\n### 基于顺序存储结构的运算\n\n插入元素前要移动元素以挪出空的存储单元，然后再插入元素 ；删除元素时同样需要移动元素，以填充被删除出来的存储单元。 \n\n### 基于链式存储结构的运算\n\n在链式存储结构下进行插入和删除，其实质是对相关指针的修改。 \n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gci6or1z5uj219v09w0wu.jpg)\n\n# 栈\n\n栈是只能通过一端来实现数据存储和检索的一种线性表。\n\n 栈进行插入和删除操作的一端称为栈顶，另一端称为栈底。\n\n 栈的修改是按先进后出的原则进行的。又称为**先进后出**的线性表。 \n\n### 栈的存储结构\n\n栈的存储结构有顺序存储和链式存储。 \n\n- 栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素， 同时附设指针top指示栈顶元素的位置 。\n- 用链表作为存储结构的栈也称为链栈。由于栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头结点，链表的头指针就是栈顶指针。 \n\n# 队列\n\n队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素 。\n\n在队列中，允许插入元素的一端称为队尾(rear)，允许删除元素的一端称为队头(front)。 \n\n##  队列的存储结构\n\n队列的存储结构有顺序存储和链式存储两种。 \n\n1. 队列的顺序存储结构是利用一组地址连续的存储单元存放队列中的元素。由于队列中元素的插入和删除限定在队列的两端进行，因此设置队头指针和队尾指针，分别指示当前的队首元素和队尾元素。 \n2. 用链表表示的队列简称为链队列。 \n3. 为了便于操作，给链队列添加一个头结点，并令头指针指向头结点。队列为空的判定条件是：头指针和尾指针的值相同，且均指向头结点。 \n\n# 串\n\n串是仅由字符构成的有限序列，是取值范围受限的线性表 。\n\n一般记为S=‘a1 a2...an’，其中S是串名， a1a2…an是串值。 \n\n串的几个基本概念 \n\n空串：长度为零的串，空串不包含任何字符。 \n\n空格串：由一个或多个空格组成的串。 \n\n子串：由串中任意长度的连续字符构成的序列。 含有子串的串称为主串。子串在主串中的位置指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。 \n\n- 主串： abcbcc \n- 子串： cb \n\n- 串相等：指两个串长度相等且对应位置上的字符也相同。\n- 串比较：两个串比较大小时以字符的 ASCII码值作为依据。比较操作从两个串的\n  第一个字符开始进行，字符的ASCII码值大者所在的串为大，若其中一个串先结束，则以串长较大者为大。 \n\n## 串的存储结构 \n\n每个字符串的最后要增加个串结束标志 \\0 。 \n\n### 串的顺序存储 \n\n用一组地址连续的存储单元来存储串值的字符序列。 \n\n### 串的链式存储 \n\n当用链表存储串中的字符时，每个结点中可以存储一个字符，也可以存储多个字符，要考虑存储密度问题。 ","source":"_posts/数据结构与算法-线性结构.md","raw":"---\ntitle: 数据结构与算法-线性结构\ntags:\n  - 数据库系统工程师\ncategories: 数据库系统工程师\nkeywords: 数据结构与算法 线性结构 数据库系统工程师\ndescription: 数据结构与算法 线性结构 数据库系统工程师\ncover: 'https://tva1.sinaimg.cn/large/9fc55f55ly1gci7qpd07ij20dw0af3yi.jpg'\nabbrlink: dd39da98\ndate: 2020-03-04 17:13:39\ntop_img:\ncopyright:\n---\n\n# 线性表\n\n## 线性表定义\n\n线性表是n个元素的有限序列，通常记为(a1,a2,...,an)。\n\n特点\n\n存在唯一的表头和表尾。\n\n- 除了表头外，表中的每一个元素均只有唯一的直接前驱。\n- 除了表尾外，表中的每一个元素均只有唯一的直接后继。 \n\n## 线性表的存储结构\n\n### 顺序存储\n\n是用一组地址连续的存储单元依次存储线性表中的数据元素， 从而使得逻辑关系相邻的两个元素在物理位置上也相邻 。\n\n- 优点：可以随机存取表中的元素 \n- 缺点：插入和删除操作需要移动大量的元素。\n\n在线性表的顺序存储结构中，第i个元素ai的存储位置为：\n\n```shell\nLOC(ai) = LOC(a1) + (i-1)*L\n```\n\n> 其中LOC(a1)是表中第一个元素的存储位置， L是表中每个元素所占空间的大小。 \n\n###  链式存储\n\n链式存储是指用结点来存储数据元素，结点的空间可以是连续的，也可以是不连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。 \n\n结点空间只有在需要的时候才申请，无须事先分配。 \n\n- 优点：插入和删除操作不需要移动元素，操作方便 。\n- 缺点：增加了存储空间开销，不能随机访问任一结点。 \n\n其他几种链表结构\n\n1. 双向链表：每个结点包含两个指针，指明直接前驱和直接后继元素，可在两个方向上遍历链表。 \n2. 循环链表：表尾结点的指针指向表中的第一个结点，可在任何位置上开始遍历整个链表。 \n3. 静态链表：借助数组来描述线性表的链式存储结构。 \n\n## 线性表的插入和删除运算\n\n### 基于顺序存储结构的运算\n\n插入元素前要移动元素以挪出空的存储单元，然后再插入元素 ；删除元素时同样需要移动元素，以填充被删除出来的存储单元。 \n\n### 基于链式存储结构的运算\n\n在链式存储结构下进行插入和删除，其实质是对相关指针的修改。 \n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gci6or1z5uj219v09w0wu.jpg)\n\n# 栈\n\n栈是只能通过一端来实现数据存储和检索的一种线性表。\n\n 栈进行插入和删除操作的一端称为栈顶，另一端称为栈底。\n\n 栈的修改是按先进后出的原则进行的。又称为**先进后出**的线性表。 \n\n### 栈的存储结构\n\n栈的存储结构有顺序存储和链式存储。 \n\n- 栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素， 同时附设指针top指示栈顶元素的位置 。\n- 用链表作为存储结构的栈也称为链栈。由于栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头结点，链表的头指针就是栈顶指针。 \n\n# 队列\n\n队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素 。\n\n在队列中，允许插入元素的一端称为队尾(rear)，允许删除元素的一端称为队头(front)。 \n\n##  队列的存储结构\n\n队列的存储结构有顺序存储和链式存储两种。 \n\n1. 队列的顺序存储结构是利用一组地址连续的存储单元存放队列中的元素。由于队列中元素的插入和删除限定在队列的两端进行，因此设置队头指针和队尾指针，分别指示当前的队首元素和队尾元素。 \n2. 用链表表示的队列简称为链队列。 \n3. 为了便于操作，给链队列添加一个头结点，并令头指针指向头结点。队列为空的判定条件是：头指针和尾指针的值相同，且均指向头结点。 \n\n# 串\n\n串是仅由字符构成的有限序列，是取值范围受限的线性表 。\n\n一般记为S=‘a1 a2...an’，其中S是串名， a1a2…an是串值。 \n\n串的几个基本概念 \n\n空串：长度为零的串，空串不包含任何字符。 \n\n空格串：由一个或多个空格组成的串。 \n\n子串：由串中任意长度的连续字符构成的序列。 含有子串的串称为主串。子串在主串中的位置指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。 \n\n- 主串： abcbcc \n- 子串： cb \n\n- 串相等：指两个串长度相等且对应位置上的字符也相同。\n- 串比较：两个串比较大小时以字符的 ASCII码值作为依据。比较操作从两个串的\n  第一个字符开始进行，字符的ASCII码值大者所在的串为大，若其中一个串先结束，则以串长较大者为大。 \n\n## 串的存储结构 \n\n每个字符串的最后要增加个串结束标志 \\0 。 \n\n### 串的顺序存储 \n\n用一组地址连续的存储单元来存储串值的字符序列。 \n\n### 串的链式存储 \n\n当用链表存储串中的字符时，每个结点中可以存储一个字符，也可以存储多个字符，要考虑存储密度问题。 ","slug":"数据结构与算法-线性结构","published":1,"updated":"2020-03-04T13:25:34.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qlb002rtvm074vwf9ay","content":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><h2 id=\"线性表定义\"><a href=\"#线性表定义\" class=\"headerlink\" title=\"线性表定义\"></a>线性表定义</h2><p>线性表是n个元素的有限序列，通常记为(a1,a2,…,an)。</p>\n<p>特点</p>\n<p>存在唯一的表头和表尾。</p>\n<ul>\n<li>除了表头外，表中的每一个元素均只有唯一的直接前驱。</li>\n<li>除了表尾外，表中的每一个元素均只有唯一的直接后继。 </li>\n</ul>\n<h2 id=\"线性表的存储结构\"><a href=\"#线性表的存储结构\" class=\"headerlink\" title=\"线性表的存储结构\"></a>线性表的存储结构</h2><h3 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h3><p>是用一组地址连续的存储单元依次存储线性表中的数据元素， 从而使得逻辑关系相邻的两个元素在物理位置上也相邻 。</p>\n<ul>\n<li>优点：可以随机存取表中的元素 </li>\n<li>缺点：插入和删除操作需要移动大量的元素。</li>\n</ul>\n<p>在线性表的顺序存储结构中，第i个元素ai的存储位置为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOC(ai) = LOC(a1) + (i-1)*L</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>其中LOC(a1)是表中第一个元素的存储位置， L是表中每个元素所占空间的大小。 </p>\n</blockquote>\n<h3 id=\"链式存储\"><a href=\"#链式存储\" class=\"headerlink\" title=\"链式存储\"></a>链式存储</h3><p>链式存储是指用结点来存储数据元素，结点的空间可以是连续的，也可以是不连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。 </p>\n<p>结点空间只有在需要的时候才申请，无须事先分配。 </p>\n<ul>\n<li>优点：插入和删除操作不需要移动元素，操作方便 。</li>\n<li>缺点：增加了存储空间开销，不能随机访问任一结点。 </li>\n</ul>\n<p>其他几种链表结构</p>\n<ol>\n<li>双向链表：每个结点包含两个指针，指明直接前驱和直接后继元素，可在两个方向上遍历链表。 </li>\n<li>循环链表：表尾结点的指针指向表中的第一个结点，可在任何位置上开始遍历整个链表。 </li>\n<li>静态链表：借助数组来描述线性表的链式存储结构。 </li>\n</ol>\n<h2 id=\"线性表的插入和删除运算\"><a href=\"#线性表的插入和删除运算\" class=\"headerlink\" title=\"线性表的插入和删除运算\"></a>线性表的插入和删除运算</h2><h3 id=\"基于顺序存储结构的运算\"><a href=\"#基于顺序存储结构的运算\" class=\"headerlink\" title=\"基于顺序存储结构的运算\"></a>基于顺序存储结构的运算</h3><p>插入元素前要移动元素以挪出空的存储单元，然后再插入元素 ；删除元素时同样需要移动元素，以填充被删除出来的存储单元。 </p>\n<h3 id=\"基于链式存储结构的运算\"><a href=\"#基于链式存储结构的运算\" class=\"headerlink\" title=\"基于链式存储结构的运算\"></a>基于链式存储结构的运算</h3><p>在链式存储结构下进行插入和删除，其实质是对相关指针的修改。 </p>\n<p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gci6or1z5uj219v09w0wu.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gci6or1z5uj219v09w0wu.jpg\" class=\"lazyload\"></a></p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈是只能通过一端来实现数据存储和检索的一种线性表。</p>\n<p> 栈进行插入和删除操作的一端称为栈顶，另一端称为栈底。</p>\n<p> 栈的修改是按先进后出的原则进行的。又称为<strong>先进后出</strong>的线性表。 </p>\n<h3 id=\"栈的存储结构\"><a href=\"#栈的存储结构\" class=\"headerlink\" title=\"栈的存储结构\"></a>栈的存储结构</h3><p>栈的存储结构有顺序存储和链式存储。 </p>\n<ul>\n<li>栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素， 同时附设指针top指示栈顶元素的位置 。</li>\n<li>用链表作为存储结构的栈也称为链栈。由于栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头结点，链表的头指针就是栈顶指针。 </li>\n</ul>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素 。</p>\n<p>在队列中，允许插入元素的一端称为队尾(rear)，允许删除元素的一端称为队头(front)。 </p>\n<h2 id=\"队列的存储结构\"><a href=\"#队列的存储结构\" class=\"headerlink\" title=\"队列的存储结构\"></a>队列的存储结构</h2><p>队列的存储结构有顺序存储和链式存储两种。 </p>\n<ol>\n<li>队列的顺序存储结构是利用一组地址连续的存储单元存放队列中的元素。由于队列中元素的插入和删除限定在队列的两端进行，因此设置队头指针和队尾指针，分别指示当前的队首元素和队尾元素。 </li>\n<li>用链表表示的队列简称为链队列。 </li>\n<li>为了便于操作，给链队列添加一个头结点，并令头指针指向头结点。队列为空的判定条件是：头指针和尾指针的值相同，且均指向头结点。 </li>\n</ol>\n<h1 id=\"串\"><a href=\"#串\" class=\"headerlink\" title=\"串\"></a>串</h1><p>串是仅由字符构成的有限序列，是取值范围受限的线性表 。</p>\n<p>一般记为S=‘a1 a2…an’，其中S是串名， a1a2…an是串值。 </p>\n<p>串的几个基本概念 </p>\n<p>空串：长度为零的串，空串不包含任何字符。 </p>\n<p>空格串：由一个或多个空格组成的串。 </p>\n<p>子串：由串中任意长度的连续字符构成的序列。 含有子串的串称为主串。子串在主串中的位置指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。 </p>\n<ul>\n<li><p>主串： abcbcc </p>\n</li>\n<li><p>子串： cb </p>\n</li>\n<li><p>串相等：指两个串长度相等且对应位置上的字符也相同。</p>\n</li>\n<li><p>串比较：两个串比较大小时以字符的 ASCII码值作为依据。比较操作从两个串的<br>第一个字符开始进行，字符的ASCII码值大者所在的串为大，若其中一个串先结束，则以串长较大者为大。 </p>\n</li>\n</ul>\n<h2 id=\"串的存储结构\"><a href=\"#串的存储结构\" class=\"headerlink\" title=\"串的存储结构\"></a>串的存储结构</h2><p>每个字符串的最后要增加个串结束标志 \\0 。 </p>\n<h3 id=\"串的顺序存储\"><a href=\"#串的顺序存储\" class=\"headerlink\" title=\"串的顺序存储\"></a>串的顺序存储</h3><p>用一组地址连续的存储单元来存储串值的字符序列。 </p>\n<h3 id=\"串的链式存储\"><a href=\"#串的链式存储\" class=\"headerlink\" title=\"串的链式存储\"></a>串的链式存储</h3><p>当用链表存储串中的字符时，每个结点中可以存储一个字符，也可以存储多个字符，要考虑存储密度问题。 </p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><h2 id=\"线性表定义\"><a href=\"#线性表定义\" class=\"headerlink\" title=\"线性表定义\"></a>线性表定义</h2><p>线性表是n个元素的有限序列，通常记为(a1,a2,…,an)。</p>\n<p>特点</p>\n<p>存在唯一的表头和表尾。</p>\n<ul>\n<li>除了表头外，表中的每一个元素均只有唯一的直接前驱。</li>\n<li>除了表尾外，表中的每一个元素均只有唯一的直接后继。 </li>\n</ul>\n<h2 id=\"线性表的存储结构\"><a href=\"#线性表的存储结构\" class=\"headerlink\" title=\"线性表的存储结构\"></a>线性表的存储结构</h2><h3 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h3><p>是用一组地址连续的存储单元依次存储线性表中的数据元素， 从而使得逻辑关系相邻的两个元素在物理位置上也相邻 。</p>\n<ul>\n<li>优点：可以随机存取表中的元素 </li>\n<li>缺点：插入和删除操作需要移动大量的元素。</li>\n</ul>\n<p>在线性表的顺序存储结构中，第i个元素ai的存储位置为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOC(ai) = LOC(a1) + (i-1)*L</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中LOC(a1)是表中第一个元素的存储位置， L是表中每个元素所占空间的大小。 </p>\n</blockquote>\n<h3 id=\"链式存储\"><a href=\"#链式存储\" class=\"headerlink\" title=\"链式存储\"></a>链式存储</h3><p>链式存储是指用结点来存储数据元素，结点的空间可以是连续的，也可以是不连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。 </p>\n<p>结点空间只有在需要的时候才申请，无须事先分配。 </p>\n<ul>\n<li>优点：插入和删除操作不需要移动元素，操作方便 。</li>\n<li>缺点：增加了存储空间开销，不能随机访问任一结点。 </li>\n</ul>\n<p>其他几种链表结构</p>\n<ol>\n<li>双向链表：每个结点包含两个指针，指明直接前驱和直接后继元素，可在两个方向上遍历链表。 </li>\n<li>循环链表：表尾结点的指针指向表中的第一个结点，可在任何位置上开始遍历整个链表。 </li>\n<li>静态链表：借助数组来描述线性表的链式存储结构。 </li>\n</ol>\n<h2 id=\"线性表的插入和删除运算\"><a href=\"#线性表的插入和删除运算\" class=\"headerlink\" title=\"线性表的插入和删除运算\"></a>线性表的插入和删除运算</h2><h3 id=\"基于顺序存储结构的运算\"><a href=\"#基于顺序存储结构的运算\" class=\"headerlink\" title=\"基于顺序存储结构的运算\"></a>基于顺序存储结构的运算</h3><p>插入元素前要移动元素以挪出空的存储单元，然后再插入元素 ；删除元素时同样需要移动元素，以填充被删除出来的存储单元。 </p>\n<h3 id=\"基于链式存储结构的运算\"><a href=\"#基于链式存储结构的运算\" class=\"headerlink\" title=\"基于链式存储结构的运算\"></a>基于链式存储结构的运算</h3><p>在链式存储结构下进行插入和删除，其实质是对相关指针的修改。 </p>\n<p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gci6or1z5uj219v09w0wu.jpg\" alt=\"图片\"></p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈是只能通过一端来实现数据存储和检索的一种线性表。</p>\n<p> 栈进行插入和删除操作的一端称为栈顶，另一端称为栈底。</p>\n<p> 栈的修改是按先进后出的原则进行的。又称为<strong>先进后出</strong>的线性表。 </p>\n<h3 id=\"栈的存储结构\"><a href=\"#栈的存储结构\" class=\"headerlink\" title=\"栈的存储结构\"></a>栈的存储结构</h3><p>栈的存储结构有顺序存储和链式存储。 </p>\n<ul>\n<li>栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素， 同时附设指针top指示栈顶元素的位置 。</li>\n<li>用链表作为存储结构的栈也称为链栈。由于栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头结点，链表的头指针就是栈顶指针。 </li>\n</ul>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素 。</p>\n<p>在队列中，允许插入元素的一端称为队尾(rear)，允许删除元素的一端称为队头(front)。 </p>\n<h2 id=\"队列的存储结构\"><a href=\"#队列的存储结构\" class=\"headerlink\" title=\"队列的存储结构\"></a>队列的存储结构</h2><p>队列的存储结构有顺序存储和链式存储两种。 </p>\n<ol>\n<li>队列的顺序存储结构是利用一组地址连续的存储单元存放队列中的元素。由于队列中元素的插入和删除限定在队列的两端进行，因此设置队头指针和队尾指针，分别指示当前的队首元素和队尾元素。 </li>\n<li>用链表表示的队列简称为链队列。 </li>\n<li>为了便于操作，给链队列添加一个头结点，并令头指针指向头结点。队列为空的判定条件是：头指针和尾指针的值相同，且均指向头结点。 </li>\n</ol>\n<h1 id=\"串\"><a href=\"#串\" class=\"headerlink\" title=\"串\"></a>串</h1><p>串是仅由字符构成的有限序列，是取值范围受限的线性表 。</p>\n<p>一般记为S=‘a1 a2…an’，其中S是串名， a1a2…an是串值。 </p>\n<p>串的几个基本概念 </p>\n<p>空串：长度为零的串，空串不包含任何字符。 </p>\n<p>空格串：由一个或多个空格组成的串。 </p>\n<p>子串：由串中任意长度的连续字符构成的序列。 含有子串的串称为主串。子串在主串中的位置指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。 </p>\n<ul>\n<li><p>主串： abcbcc </p>\n</li>\n<li><p>子串： cb </p>\n</li>\n<li><p>串相等：指两个串长度相等且对应位置上的字符也相同。</p>\n</li>\n<li><p>串比较：两个串比较大小时以字符的 ASCII码值作为依据。比较操作从两个串的<br>第一个字符开始进行，字符的ASCII码值大者所在的串为大，若其中一个串先结束，则以串长较大者为大。 </p>\n</li>\n</ul>\n<h2 id=\"串的存储结构\"><a href=\"#串的存储结构\" class=\"headerlink\" title=\"串的存储结构\"></a>串的存储结构</h2><p>每个字符串的最后要增加个串结束标志 \\0 。 </p>\n<h3 id=\"串的顺序存储\"><a href=\"#串的顺序存储\" class=\"headerlink\" title=\"串的顺序存储\"></a>串的顺序存储</h3><p>用一组地址连续的存储单元来存储串值的字符序列。 </p>\n<h3 id=\"串的链式存储\"><a href=\"#串的链式存储\" class=\"headerlink\" title=\"串的链式存储\"></a>串的链式存储</h3><p>当用链表存储串中的字符时，每个结点中可以存储一个字符，也可以存储多个字符，要考虑存储密度问题。 </p>\n"},{"title":"案例分享:华为防火墙配置点到点IPSEC VPN","keywords":":华为防火墙 IPSEC VPN 点到点","description":"华为防火墙 IPSEC VPN 点到点","cover":"https://tva2.sinaimg.cn/large/9fc55f55gy1gd9jjzqibfj20sg0lc4qp.jpg","abbrlink":"f1eed45f","date":"2020-03-28T04:37:57.000Z","top_img":null,"copyright":null,"_content":"\n# 实验目的\n本文通过一个案例简单来了解一下Site-to-Site IPSec VPN 的工作原理及详细配置。\n# 组网设备\nUSG6630防火墙两台，AR2220路由一台，PC机两台\n# 实验拓扑\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328121820384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n# 实验步骤\n## 步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。\n1、配置FW1接口IP地址，并且把GE1/0/1加入到untrust区域，GE1/0/6加入到trust。\n```shell\n[FW1] interface GigabitEthernet 1/0/1\n[FW1-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0\n[FW1-GigabitEthernet1/0/1] service-manage ping permit\n[FW1] interface GigabitEthernet 1/0/6\n[FW1-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0\n[FW1-GigabitEthernet1/0/6] service-manage ping permit\n[FW1] firewall zone untrust\n[FW1-zone-untrust] add interface GigabitEthernet 1/0/1\n[FW1] firewall zone trust\n[FW1-zone-trust] add interface GigabitEthernet 1/0/6\n```\n2、配置 FW2 接口 IP 地址，并且 GE1/0/2 加入 Untrust 区域，GE1/0/6 加入Trust 区域。\n```shell\n[FW2] interface GigabitEthernet 1/0/1\n[FW2-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0\n[FW2-GigabitEthernet1/0/1] service-manage ping permit\n[FW2] interface GigabitEthernet 1/0/6\n[FW2-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0\n[FW2-GigabitEthernet1/0/6] service-manage ping permit\n[FW2] firewall zone untrust\n[FW2-zone-untrust] add interface GigabitEthernet 1/0/1\n[FW2] firewall zone trust\n[FW2-zone-trust] add interface GigabitEthernet 1/0/6\n```\n## 步骤2：FW1 和FW2 配置到达对端的路由。\n配置FW1和FW2的默认路由。\n```shell\n[FW1] ip route-static 0.0.0.0 0.0.0.0 202.1.2.1\n[FW2] ip route-static 0.0.0.0 0.0.0.0 202.1.1.1 \n```\n## 配置 FW1和FW2 的 IPSec 隧道。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122321409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)1）、定义需要保护的数据流\n```shell\n[FW1]acl number 3000\n[FW1-acl-adv-3000] rule 5 permit ip source 10.91.74.0 0.0.0.255 destination 10.91.65.0 0.0.0.255\n```\n2）、配置 IKE 安全提议\n```shell\n[FW1]ike proposal 1 #采用默认配置，\n[FW1-ike-proposal-1] display this #查看默认的加密算法\n```\n\n3）、配置 IKE 对等体\n```shell\n[FW1]ike peer FW1\n[FW1-ike-peer-FW1]exchange-mode auto\n[FW1-ike-peer-FW1]pre-shared-key  huawei@123 #定义域共享密钥，两边要一样的\n[FW1-ike-peer-FW1]ike-proposal 1  #关联IKE安全提议\n[FW1-ike-peer-FW1]remote-address 202.1.2.1 #配置对端全局地址\n```\n4）、配置 IPSec 安全提议\n```shell\n[FW1]ipsec proposal 10 #采用默认值\n```\n5）、配置 IPSec 策略\n```shell\n[FW1]ipsec policy FW1 1 isakmp \n[FW1-ipsec-policy-isakmp-FW1-1]security acl 3000\n[FW1-ipsec-policy-isakmp-FW1-1] proposal 10\n[FW1-ipsec-policy-isakmp-FW1-1] ike-peer FW1\n```\n6）、应用 IPSec 安全策略到出接口\n```shell\n[FW1]interface GigabitEthernet 1/0/1\n[FW1-GigabitEthernet1/0/1]ipsec policy  FW1\n```\n>防火墙FW2也是按照上面的步骤配置，中间只需要修改一下IKE 对等体的`remote-address IP地址`。\n\n## 步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。\n1）、配置从 Trust 到 Untrust 的域间策略\n```shell\n防火墙FW1\n[FW1-policy-security]rule name trust_untrust\n[FW1-policy-security-rule-trust_untrust]source-zone trust \n[FW1-policy-security-rule-trust_untrust]destination-zone untrust \n[FW1-policy-security-rule-trust_untrust]source-address 10.91.74.0 24\n[FW1-policy-security-rule-trust_untrust]destination-address 10.91.65.0 24\n[FW1-policy-security-rule-trust_untrust]action permit\n\n防火墙FW2\n[FW2-policy-security]rule name trust_untrust\n[FW2-policy-security-rule-trust_untrust]source-zone trust\n[FW2-policy-security-rule-trust_untrust]destination-zone untrust\n[FW2-policy-security-rule-trust_untrust]source-address 10.91.65.0 24\n[FW2-policy-security-rule-trust_untrust]destination-address 10.91.74.0 24\n```\n2)、配置从 Untrust 到Trust 的域间策略\n```shell\n防火墙FW1\n[FW1-policy-security]rule name untrust_trust\n[FW1-policy-security-rule-untrust_trust]source-zone untrust \n[FW1-policy-security-rule-untrust_trust]destination-zone trust \n[FW1-policy-security-rule-untrust_trust]source-address 10.91.65.0 24\n[FW1-policy-security-rule-untrust_trust]destination-address 10.91.74.0 24\n[FW1-policy-security-rule-untrust_trust]action permit\n\n防火墙FW2\n[FW2-policy-security]rule name untrust_trust\n[FW2-policy-security-rule-untrust_trust]source-zone untrust \n[FW2-policy-security-rule-untrust_trust]destination-zone trust \n[FW2-policy-security-rule-untrust_trust]source-address 10.91.74.0 24\n[FW2-policy-security-rule-untrust_trust]destination-address 10.91.65.0 24\n[FW2-policy-security-rule-untrust_trust]action permit \n```\n到此两台防火墙已经放通了从Trust 到 Untrust和从Untrust到 trust的域间策略，现在从PC1发ping包看看吧。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032812285657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图看到PC1和PC2是不能连通的，这是为啥呢？首先，在FW1防护墙上看看会话表，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122913397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图看到FW1防火墙上出现了会话表，但是，数据包只有出去方向的，回来的数据包却没有。我们再到FW2看看是否有会话表项。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122927343.png)\n从上图可以看到FW2上没有发现会话表项。说明数据包没有到达FW2上。这是为什么呢？\n**因为我们只放通了业务上策略，而没有放通ipsec VPN协商所需要的策略。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123000674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)从上图看到IPsec VPN没有协商成功，导致数据包没有发送到FW2上。\n\n## 步骤5:配置IPsec VPN 的域间策略\n1)、定义服务集\n```shell\n[FW1]ip service-set  ike type object\n[FW1-object-service-set-ike]service 0 protocol udp destination-port 500\n[FW2]ip service-set  ike type object\n[FW2-object-service-set-ike]service 0 protocol udp destination-port 500\n```\n2)、在防火墙上放通策略\n```shell\n[FW1-policy-security]rule name ike_out\n[FW1-policy-security-rule-ike_out] source-zone local\n[FW1-policy-security-rule-ike_out] destination-zone  untrust\n[FW1-policy-security-rule-ike_out] source-address 202.1.1.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out] destination-address 202.1.2.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out]service ike\n[FW1-policy-security-rule-ike_out]service esp\n[FW1-policy-security-rule-ike_out] action permit\n\n[FW1-policy-security]rule name ike_in\n[FW1-policy-security-rule-ike_in] source-zone untrust\n[FW1-policy-security-rule-ike_in] destination-zone local\n[FW1-policy-security-rule-ike_in] source-address 202.1.2.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_in] destination-address 202.1.1.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out]service ike\n[FW1-policy-security-rule-ike_out]service esp\n[FW1-policy-security-rule-ike_in] action permit\n\n[FW2-policy-security] rule name ike_out\n[FW2-policy-security-rule-ike_out]source-zone local\n[FW2-policy-security-rule-ike_out]source-zone untrust\n[FW2-policy-security-rule-ike_out] destination-address 202.1.1.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out] source-address 202.1.2.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out]service ike\n[FW2-policy-security-rule-ike_out]service esp\n[FW2-policy-security-rule-ike_out] action permit\n\n[FW2-policy-security]rule name ike_in\n[FW2-policy-security-rule-ike_in] source-zone untrust\n[FW2-policy-security-rule-ike_in] destination-zone local\n[FW2-policy-security-rule-ike_in] source-address 202.1.1.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_in] destination-address 202.1.2.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out]service ike\n[FW2-policy-security-rule-ike_out]service esp\n[FW2-policy-security-rule-ike_in] action permit\n```\n到此，所有需要的策略都放通了，接着来验证一下吧，首先还是从PC1发起PING包，接着，在FW1查看会话表项，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032812323797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图可以看到，FW1上的会话表项数据包已经出现有去有回的，再看看IKE协商情况吧，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123251587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)从上图可以看到，FW1上的IKE已经协商成功了。再看看FW2防火墙上的会话表项吧，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123303501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图可看到，FW2上的会话表项也出现了PING包，证明了PC1到PC2已经连通了，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123316242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n更多精彩内容请关注我的[头条号](https://www.toutiao.com/c/user/68783357974/#mid=1609422238702596)","source":"_posts/案例分享-华为防火墙配置点到点IPSEC-VPN.md","raw":"---\ntitle: '案例分享:华为防火墙配置点到点IPSEC VPN'\ntags:\n  - IPSec VPN\ncategories: 数通\nkeywords: ':华为防火墙 IPSEC VPN 点到点'\ndescription: 华为防火墙 IPSEC VPN 点到点\ncover: 'https://tva2.sinaimg.cn/large/9fc55f55gy1gd9jjzqibfj20sg0lc4qp.jpg'\nabbrlink: f1eed45f\ndate: 2020-03-28 12:37:57\ntop_img:\ncopyright:\n---\n\n# 实验目的\n本文通过一个案例简单来了解一下Site-to-Site IPSec VPN 的工作原理及详细配置。\n# 组网设备\nUSG6630防火墙两台，AR2220路由一台，PC机两台\n# 实验拓扑\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328121820384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n# 实验步骤\n## 步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。\n1、配置FW1接口IP地址，并且把GE1/0/1加入到untrust区域，GE1/0/6加入到trust。\n```shell\n[FW1] interface GigabitEthernet 1/0/1\n[FW1-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0\n[FW1-GigabitEthernet1/0/1] service-manage ping permit\n[FW1] interface GigabitEthernet 1/0/6\n[FW1-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0\n[FW1-GigabitEthernet1/0/6] service-manage ping permit\n[FW1] firewall zone untrust\n[FW1-zone-untrust] add interface GigabitEthernet 1/0/1\n[FW1] firewall zone trust\n[FW1-zone-trust] add interface GigabitEthernet 1/0/6\n```\n2、配置 FW2 接口 IP 地址，并且 GE1/0/2 加入 Untrust 区域，GE1/0/6 加入Trust 区域。\n```shell\n[FW2] interface GigabitEthernet 1/0/1\n[FW2-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0\n[FW2-GigabitEthernet1/0/1] service-manage ping permit\n[FW2] interface GigabitEthernet 1/0/6\n[FW2-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0\n[FW2-GigabitEthernet1/0/6] service-manage ping permit\n[FW2] firewall zone untrust\n[FW2-zone-untrust] add interface GigabitEthernet 1/0/1\n[FW2] firewall zone trust\n[FW2-zone-trust] add interface GigabitEthernet 1/0/6\n```\n## 步骤2：FW1 和FW2 配置到达对端的路由。\n配置FW1和FW2的默认路由。\n```shell\n[FW1] ip route-static 0.0.0.0 0.0.0.0 202.1.2.1\n[FW2] ip route-static 0.0.0.0 0.0.0.0 202.1.1.1 \n```\n## 配置 FW1和FW2 的 IPSec 隧道。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122321409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)1）、定义需要保护的数据流\n```shell\n[FW1]acl number 3000\n[FW1-acl-adv-3000] rule 5 permit ip source 10.91.74.0 0.0.0.255 destination 10.91.65.0 0.0.0.255\n```\n2）、配置 IKE 安全提议\n```shell\n[FW1]ike proposal 1 #采用默认配置，\n[FW1-ike-proposal-1] display this #查看默认的加密算法\n```\n\n3）、配置 IKE 对等体\n```shell\n[FW1]ike peer FW1\n[FW1-ike-peer-FW1]exchange-mode auto\n[FW1-ike-peer-FW1]pre-shared-key  huawei@123 #定义域共享密钥，两边要一样的\n[FW1-ike-peer-FW1]ike-proposal 1  #关联IKE安全提议\n[FW1-ike-peer-FW1]remote-address 202.1.2.1 #配置对端全局地址\n```\n4）、配置 IPSec 安全提议\n```shell\n[FW1]ipsec proposal 10 #采用默认值\n```\n5）、配置 IPSec 策略\n```shell\n[FW1]ipsec policy FW1 1 isakmp \n[FW1-ipsec-policy-isakmp-FW1-1]security acl 3000\n[FW1-ipsec-policy-isakmp-FW1-1] proposal 10\n[FW1-ipsec-policy-isakmp-FW1-1] ike-peer FW1\n```\n6）、应用 IPSec 安全策略到出接口\n```shell\n[FW1]interface GigabitEthernet 1/0/1\n[FW1-GigabitEthernet1/0/1]ipsec policy  FW1\n```\n>防火墙FW2也是按照上面的步骤配置，中间只需要修改一下IKE 对等体的`remote-address IP地址`。\n\n## 步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。\n1）、配置从 Trust 到 Untrust 的域间策略\n```shell\n防火墙FW1\n[FW1-policy-security]rule name trust_untrust\n[FW1-policy-security-rule-trust_untrust]source-zone trust \n[FW1-policy-security-rule-trust_untrust]destination-zone untrust \n[FW1-policy-security-rule-trust_untrust]source-address 10.91.74.0 24\n[FW1-policy-security-rule-trust_untrust]destination-address 10.91.65.0 24\n[FW1-policy-security-rule-trust_untrust]action permit\n\n防火墙FW2\n[FW2-policy-security]rule name trust_untrust\n[FW2-policy-security-rule-trust_untrust]source-zone trust\n[FW2-policy-security-rule-trust_untrust]destination-zone untrust\n[FW2-policy-security-rule-trust_untrust]source-address 10.91.65.0 24\n[FW2-policy-security-rule-trust_untrust]destination-address 10.91.74.0 24\n```\n2)、配置从 Untrust 到Trust 的域间策略\n```shell\n防火墙FW1\n[FW1-policy-security]rule name untrust_trust\n[FW1-policy-security-rule-untrust_trust]source-zone untrust \n[FW1-policy-security-rule-untrust_trust]destination-zone trust \n[FW1-policy-security-rule-untrust_trust]source-address 10.91.65.0 24\n[FW1-policy-security-rule-untrust_trust]destination-address 10.91.74.0 24\n[FW1-policy-security-rule-untrust_trust]action permit\n\n防火墙FW2\n[FW2-policy-security]rule name untrust_trust\n[FW2-policy-security-rule-untrust_trust]source-zone untrust \n[FW2-policy-security-rule-untrust_trust]destination-zone trust \n[FW2-policy-security-rule-untrust_trust]source-address 10.91.74.0 24\n[FW2-policy-security-rule-untrust_trust]destination-address 10.91.65.0 24\n[FW2-policy-security-rule-untrust_trust]action permit \n```\n到此两台防火墙已经放通了从Trust 到 Untrust和从Untrust到 trust的域间策略，现在从PC1发ping包看看吧。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032812285657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图看到PC1和PC2是不能连通的，这是为啥呢？首先，在FW1防护墙上看看会话表，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122913397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图看到FW1防火墙上出现了会话表，但是，数据包只有出去方向的，回来的数据包却没有。我们再到FW2看看是否有会话表项。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328122927343.png)\n从上图可以看到FW2上没有发现会话表项。说明数据包没有到达FW2上。这是为什么呢？\n**因为我们只放通了业务上策略，而没有放通ipsec VPN协商所需要的策略。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123000674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)从上图看到IPsec VPN没有协商成功，导致数据包没有发送到FW2上。\n\n## 步骤5:配置IPsec VPN 的域间策略\n1)、定义服务集\n```shell\n[FW1]ip service-set  ike type object\n[FW1-object-service-set-ike]service 0 protocol udp destination-port 500\n[FW2]ip service-set  ike type object\n[FW2-object-service-set-ike]service 0 protocol udp destination-port 500\n```\n2)、在防火墙上放通策略\n```shell\n[FW1-policy-security]rule name ike_out\n[FW1-policy-security-rule-ike_out] source-zone local\n[FW1-policy-security-rule-ike_out] destination-zone  untrust\n[FW1-policy-security-rule-ike_out] source-address 202.1.1.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out] destination-address 202.1.2.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out]service ike\n[FW1-policy-security-rule-ike_out]service esp\n[FW1-policy-security-rule-ike_out] action permit\n\n[FW1-policy-security]rule name ike_in\n[FW1-policy-security-rule-ike_in] source-zone untrust\n[FW1-policy-security-rule-ike_in] destination-zone local\n[FW1-policy-security-rule-ike_in] source-address 202.1.2.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_in] destination-address 202.1.1.1 mask 255.255.255.255\n[FW1-policy-security-rule-ike_out]service ike\n[FW1-policy-security-rule-ike_out]service esp\n[FW1-policy-security-rule-ike_in] action permit\n\n[FW2-policy-security] rule name ike_out\n[FW2-policy-security-rule-ike_out]source-zone local\n[FW2-policy-security-rule-ike_out]source-zone untrust\n[FW2-policy-security-rule-ike_out] destination-address 202.1.1.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out] source-address 202.1.2.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out]service ike\n[FW2-policy-security-rule-ike_out]service esp\n[FW2-policy-security-rule-ike_out] action permit\n\n[FW2-policy-security]rule name ike_in\n[FW2-policy-security-rule-ike_in] source-zone untrust\n[FW2-policy-security-rule-ike_in] destination-zone local\n[FW2-policy-security-rule-ike_in] source-address 202.1.1.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_in] destination-address 202.1.2.1 mask 255.255.255.255\n[FW2-policy-security-rule-ike_out]service ike\n[FW2-policy-security-rule-ike_out]service esp\n[FW2-policy-security-rule-ike_in] action permit\n```\n到此，所有需要的策略都放通了，接着来验证一下吧，首先还是从PC1发起PING包，接着，在FW1查看会话表项，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032812323797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图可以看到，FW1上的会话表项数据包已经出现有去有回的，再看看IKE协商情况吧，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123251587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)从上图可以看到，FW1上的IKE已经协商成功了。再看看FW2防火墙上的会话表项吧，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123303501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n从上图可看到，FW2上的会话表项也出现了PING包，证明了PC1到PC2已经连通了，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200328123316242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70)\n更多精彩内容请关注我的[头条号](https://www.toutiao.com/c/user/68783357974/#mid=1609422238702596)","slug":"案例分享-华为防火墙配置点到点IPSEC-VPN","published":1,"updated":"2020-03-28T04:44:05.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qlc002stvm06cps6bb3","content":"<h1 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h1><p>本文通过一个案例简单来了解一下Site-to-Site IPSec VPN 的工作原理及详细配置。</p>\n<h1 id=\"组网设备\"><a href=\"#组网设备\" class=\"headerlink\" title=\"组网设备\"></a>组网设备</h1><p>USG6630防火墙两台，AR2220路由一台，PC机两台</p>\n<h1 id=\"实验拓扑\"><a href=\"#实验拓扑\" class=\"headerlink\" title=\"实验拓扑\"></a>实验拓扑</h1><p><a href=\"https://img-blog.csdnimg.cn/20200328121820384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328121820384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a></p>\n<h1 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h1><h2 id=\"步骤1：FW1-和-FW2-配置接口-IP-地址和安全区域，完成网络基本参数配置-。\"><a href=\"#步骤1：FW1-和-FW2-配置接口-IP-地址和安全区域，完成网络基本参数配置-。\" class=\"headerlink\" title=\"步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。\"></a>步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。</h2><p>1、配置FW1接口IP地址，并且把GE1/0/1加入到untrust区域，GE1/0/6加入到trust。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1] interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1] service-manage ping permit</span><br><span class=\"line\">[FW1] interface GigabitEthernet 1/0/6</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/6] service-manage ping permit</span><br><span class=\"line\">[FW1] firewall zone untrust</span><br><span class=\"line\">[FW1-zone-untrust] add interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1] firewall zone trust</span><br><span class=\"line\">[FW1-zone-trust] add interface GigabitEthernet 1/0/6</span><br></pre></td></tr></table></figure></div>\n<p>2、配置 FW2 接口 IP 地址，并且 GE1/0/2 加入 Untrust 区域，GE1/0/6 加入Trust 区域。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2] interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1] service-manage ping permit</span><br><span class=\"line\">[FW2] interface GigabitEthernet 1/0/6</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/6] service-manage ping permit</span><br><span class=\"line\">[FW2] firewall zone untrust</span><br><span class=\"line\">[FW2-zone-untrust] add interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW2] firewall zone trust</span><br><span class=\"line\">[FW2-zone-trust] add interface GigabitEthernet 1/0/6</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"步骤2：FW1-和FW2-配置到达对端的路由。\"><a href=\"#步骤2：FW1-和FW2-配置到达对端的路由。\" class=\"headerlink\" title=\"步骤2：FW1 和FW2 配置到达对端的路由。\"></a>步骤2：FW1 和FW2 配置到达对端的路由。</h2><p>配置FW1和FW2的默认路由。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1] ip route-static 0.0.0.0 0.0.0.0 202.1.2.1</span><br><span class=\"line\">[FW2] ip route-static 0.0.0.0 0.0.0.0 202.1.1.1</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"配置-FW1和FW2-的-IPSec-隧道。\"><a href=\"#配置-FW1和FW2-的-IPSec-隧道。\" class=\"headerlink\" title=\"配置 FW1和FW2 的 IPSec 隧道。\"></a>配置 FW1和FW2 的 IPSec 隧道。</h2><p><a href=\"https://img-blog.csdnimg.cn/20200328122321409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328122321409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a>1）、定义需要保护的数据流</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]acl number 3000</span><br><span class=\"line\">[FW1-acl-adv-3000] rule 5 permit ip source 10.91.74.0 0.0.0.255 destination 10.91.65.0 0.0.0.255</span><br></pre></td></tr></table></figure></div>\n<p>2）、配置 IKE 安全提议</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ike proposal 1 #采用默认配置，</span><br><span class=\"line\">[FW1-ike-proposal-1] display this #查看默认的加密算法</span><br></pre></td></tr></table></figure></div>\n\n<p>3）、配置 IKE 对等体</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ike peer FW1</span><br><span class=\"line\">[FW1-ike-peer-FW1]exchange-mode auto</span><br><span class=\"line\">[FW1-ike-peer-FW1]pre-shared-key  huawei@123 #定义域共享密钥，两边要一样的</span><br><span class=\"line\">[FW1-ike-peer-FW1]ike-proposal 1  #关联IKE安全提议</span><br><span class=\"line\">[FW1-ike-peer-FW1]remote-address 202.1.2.1 #配置对端全局地址</span><br></pre></td></tr></table></figure></div>\n<p>4）、配置 IPSec 安全提议</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ipsec proposal 10 #采用默认值</span><br></pre></td></tr></table></figure></div>\n<p>5）、配置 IPSec 策略</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ipsec policy FW1 1 isakmp </span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1]security acl 3000</span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1] proposal 10</span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1] ike-peer FW1</span><br></pre></td></tr></table></figure></div>\n<p>6）、应用 IPSec 安全策略到出接口</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]ipsec policy  FW1</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>防火墙FW2也是按照上面的步骤配置，中间只需要修改一下IKE 对等体的<code>remote-address IP地址</code>。</p>\n</blockquote>\n<h2 id=\"步骤4：FW1和FW2-配置安全策略，允许私网指定网段进行报文交互-。\"><a href=\"#步骤4：FW1和FW2-配置安全策略，允许私网指定网段进行报文交互-。\" class=\"headerlink\" title=\"步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。\"></a>步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。</h2><p>1）、配置从 Trust 到 Untrust 的域间策略</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙FW1</span><br><span class=\"line\">[FW1-policy-security]rule name trust_untrust</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]source-address 10.91.74.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]destination-address 10.91.65.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]action permit</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙FW2</span><br><span class=\"line\">[FW2-policy-security]rule name trust_untrust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]source-zone trust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]destination-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]source-address 10.91.65.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]destination-address 10.91.74.0 24</span><br></pre></td></tr></table></figure></div>\n<p>2)、配置从 Untrust 到Trust 的域间策略</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙FW1</span><br><span class=\"line\">[FW1-policy-security]rule name untrust_trust</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]source-zone untrust </span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]destination-zone trust </span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]source-address 10.91.65.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]destination-address 10.91.74.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]action permit</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙FW2</span><br><span class=\"line\">[FW2-policy-security]rule name untrust_trust</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]source-zone untrust </span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]destination-zone trust </span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]source-address 10.91.74.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]destination-address 10.91.65.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]action permit</span><br></pre></td></tr></table></figure></div>\n<p>到此两台防火墙已经放通了从Trust 到 Untrust和从Untrust到 trust的域间策略，现在从PC1发ping包看看吧。<br><a href=\"https://img-blog.csdnimg.cn/2020032812285657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/2020032812285657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a><br>从上图看到PC1和PC2是不能连通的，这是为啥呢？首先，在FW1防护墙上看看会话表，如下图<br><a href=\"https://img-blog.csdnimg.cn/20200328122913397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328122913397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a><br>从上图看到FW1防火墙上出现了会话表，但是，数据包只有出去方向的，回来的数据包却没有。我们再到FW2看看是否有会话表项。<br><a href=\"https://img-blog.csdnimg.cn/20200328122927343.png\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328122927343.png\" class=\"lazyload\"></a><br>从上图可以看到FW2上没有发现会话表项。说明数据包没有到达FW2上。这是为什么呢？<br><strong>因为我们只放通了业务上策略，而没有放通ipsec VPN协商所需要的策略。</strong><br><a href=\"https://img-blog.csdnimg.cn/20200328123000674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328123000674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a>从上图看到IPsec VPN没有协商成功，导致数据包没有发送到FW2上。</p>\n<h2 id=\"步骤5-配置IPsec-VPN-的域间策略\"><a href=\"#步骤5-配置IPsec-VPN-的域间策略\" class=\"headerlink\" title=\"步骤5:配置IPsec VPN 的域间策略\"></a>步骤5:配置IPsec VPN 的域间策略</h2><p>1)、定义服务集</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ip service-set  ike type object</span><br><span class=\"line\">[FW1-object-service-set-ike]service 0 protocol udp destination-port 500</span><br><span class=\"line\">[FW2]ip service-set  ike type object</span><br><span class=\"line\">[FW2-object-service-set-ike]service 0 protocol udp destination-port 500</span><br></pre></td></tr></table></figure></div>\n<p>2)、在防火墙上放通策略</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">shell</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1-policy-security]rule name ike_out</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] source-zone local</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] destination-zone  untrust</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] source-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] destination-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW1-policy-security]rule name ike_in</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] source-zone untrust</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] destination-zone local</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] source-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] destination-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW2-policy-security] rule name ike_out</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]source-zone local</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]source-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] destination-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] source-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW2-policy-security]rule name ike_in</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] source-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] destination-zone local</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] source-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] destination-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] action permit</span><br></pre></td></tr></table></figure></div>\n<p>到此，所有需要的策略都放通了，接着来验证一下吧，首先还是从PC1发起PING包，接着，在FW1查看会话表项，如下图<br><a href=\"https://img-blog.csdnimg.cn/2020032812323797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/2020032812323797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a><br>从上图可以看到，FW1上的会话表项数据包已经出现有去有回的，再看看IKE协商情况吧，如下图<br><a href=\"https://img-blog.csdnimg.cn/20200328123251587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328123251587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a>从上图可以看到，FW1上的IKE已经协商成功了。再看看FW2防火墙上的会话表项吧，如下图<br><a href=\"https://img-blog.csdnimg.cn/20200328123303501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328123303501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a><br>从上图可看到，FW2上的会话表项也出现了PING包，证明了PC1到PC2已经连通了，如下图<br><a href=\"https://img-blog.csdnimg.cn/20200328123316242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" data-fancybox=\"group\" data-caption=\"在这里插入图片描述\" class=\"fancybox\"><img alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" data-src=\"https://img-blog.csdnimg.cn/20200328123316242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" class=\"lazyload\"></a><br>更多精彩内容请关注我的<a href=\"https://www.toutiao.com/c/user/68783357974/#mid=1609422238702596\" target=\"_blank\" rel=\"noopener\">头条号</a></p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h1><p>本文通过一个案例简单来了解一下Site-to-Site IPSec VPN 的工作原理及详细配置。</p>\n<h1 id=\"组网设备\"><a href=\"#组网设备\" class=\"headerlink\" title=\"组网设备\"></a>组网设备</h1><p>USG6630防火墙两台，AR2220路由一台，PC机两台</p>\n<h1 id=\"实验拓扑\"><a href=\"#实验拓扑\" class=\"headerlink\" title=\"实验拓扑\"></a>实验拓扑</h1><p><img src=\"https://img-blog.csdnimg.cn/20200328121820384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h1><h2 id=\"步骤1：FW1-和-FW2-配置接口-IP-地址和安全区域，完成网络基本参数配置-。\"><a href=\"#步骤1：FW1-和-FW2-配置接口-IP-地址和安全区域，完成网络基本参数配置-。\" class=\"headerlink\" title=\"步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。\"></a>步骤1：FW1 和 FW2 配置接口 IP 地址和安全区域，完成网络基本参数配置 。</h2><p>1、配置FW1接口IP地址，并且把GE1/0/1加入到untrust区域，GE1/0/6加入到trust。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1] interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1] service-manage ping permit</span><br><span class=\"line\">[FW1] interface GigabitEthernet 1/0/6</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/6] service-manage ping permit</span><br><span class=\"line\">[FW1] firewall zone untrust</span><br><span class=\"line\">[FW1-zone-untrust] add interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1] firewall zone trust</span><br><span class=\"line\">[FW1-zone-trust] add interface GigabitEthernet 1/0/6</span><br></pre></td></tr></table></figure>\n<p>2、配置 FW2 接口 IP 地址，并且 GE1/0/2 加入 Untrust 区域，GE1/0/6 加入Trust 区域。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2] interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1] ip address 202.1.1.1 255.255.255.0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1] service-manage ping permit</span><br><span class=\"line\">[FW2] interface GigabitEthernet 1/0/6</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/6] ip address 10.91.74.254 255.255.255.0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/6] service-manage ping permit</span><br><span class=\"line\">[FW2] firewall zone untrust</span><br><span class=\"line\">[FW2-zone-untrust] add interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW2] firewall zone trust</span><br><span class=\"line\">[FW2-zone-trust] add interface GigabitEthernet 1/0/6</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤2：FW1-和FW2-配置到达对端的路由。\"><a href=\"#步骤2：FW1-和FW2-配置到达对端的路由。\" class=\"headerlink\" title=\"步骤2：FW1 和FW2 配置到达对端的路由。\"></a>步骤2：FW1 和FW2 配置到达对端的路由。</h2><p>配置FW1和FW2的默认路由。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1] ip route-static 0.0.0.0 0.0.0.0 202.1.2.1</span><br><span class=\"line\">[FW2] ip route-static 0.0.0.0 0.0.0.0 202.1.1.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-FW1和FW2-的-IPSec-隧道。\"><a href=\"#配置-FW1和FW2-的-IPSec-隧道。\" class=\"headerlink\" title=\"配置 FW1和FW2 的 IPSec 隧道。\"></a>配置 FW1和FW2 的 IPSec 隧道。</h2><p><img src=\"https://img-blog.csdnimg.cn/20200328122321409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">1）、定义需要保护的数据流</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]acl number 3000</span><br><span class=\"line\">[FW1-acl-adv-3000] rule 5 permit ip source 10.91.74.0 0.0.0.255 destination 10.91.65.0 0.0.0.255</span><br></pre></td></tr></table></figure>\n<p>2）、配置 IKE 安全提议</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ike proposal 1 #采用默认配置，</span><br><span class=\"line\">[FW1-ike-proposal-1] display this #查看默认的加密算法</span><br></pre></td></tr></table></figure>\n\n<p>3）、配置 IKE 对等体</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ike peer FW1</span><br><span class=\"line\">[FW1-ike-peer-FW1]exchange-mode auto</span><br><span class=\"line\">[FW1-ike-peer-FW1]pre-shared-key  huawei@123 #定义域共享密钥，两边要一样的</span><br><span class=\"line\">[FW1-ike-peer-FW1]ike-proposal 1  #关联IKE安全提议</span><br><span class=\"line\">[FW1-ike-peer-FW1]remote-address 202.1.2.1 #配置对端全局地址</span><br></pre></td></tr></table></figure>\n<p>4）、配置 IPSec 安全提议</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ipsec proposal 10 #采用默认值</span><br></pre></td></tr></table></figure>\n<p>5）、配置 IPSec 策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ipsec policy FW1 1 isakmp </span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1]security acl 3000</span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1] proposal 10</span><br><span class=\"line\">[FW1-ipsec-policy-isakmp-FW1-1] ike-peer FW1</span><br></pre></td></tr></table></figure>\n<p>6）、应用 IPSec 安全策略到出接口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]interface GigabitEthernet 1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]ipsec policy  FW1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>防火墙FW2也是按照上面的步骤配置，中间只需要修改一下IKE 对等体的<code>remote-address IP地址</code>。</p>\n</blockquote>\n<h2 id=\"步骤4：FW1和FW2-配置安全策略，允许私网指定网段进行报文交互-。\"><a href=\"#步骤4：FW1和FW2-配置安全策略，允许私网指定网段进行报文交互-。\" class=\"headerlink\" title=\"步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。\"></a>步骤4：FW1和FW2 配置安全策略，允许私网指定网段进行报文交互 。</h2><p>1）、配置从 Trust 到 Untrust 的域间策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙FW1</span><br><span class=\"line\">[FW1-policy-security]rule name trust_untrust</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]source-address 10.91.74.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]destination-address 10.91.65.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-trust_untrust]action permit</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙FW2</span><br><span class=\"line\">[FW2-policy-security]rule name trust_untrust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]source-zone trust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]destination-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]source-address 10.91.65.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-trust_untrust]destination-address 10.91.74.0 24</span><br></pre></td></tr></table></figure>\n<p>2)、配置从 Untrust 到Trust 的域间策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">防火墙FW1</span><br><span class=\"line\">[FW1-policy-security]rule name untrust_trust</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]source-zone untrust </span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]destination-zone trust </span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]source-address 10.91.65.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]destination-address 10.91.74.0 24</span><br><span class=\"line\">[FW1-policy-security-rule-untrust_trust]action permit</span><br><span class=\"line\"></span><br><span class=\"line\">防火墙FW2</span><br><span class=\"line\">[FW2-policy-security]rule name untrust_trust</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]source-zone untrust </span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]destination-zone trust </span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]source-address 10.91.74.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]destination-address 10.91.65.0 24</span><br><span class=\"line\">[FW2-policy-security-rule-untrust_trust]action permit</span><br></pre></td></tr></table></figure>\n<p>到此两台防火墙已经放通了从Trust 到 Untrust和从Untrust到 trust的域间策略，现在从PC1发ping包看看吧。<br><img src=\"https://img-blog.csdnimg.cn/2020032812285657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>从上图看到PC1和PC2是不能连通的，这是为啥呢？首先，在FW1防护墙上看看会话表，如下图<br><img src=\"https://img-blog.csdnimg.cn/20200328122913397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>从上图看到FW1防火墙上出现了会话表，但是，数据包只有出去方向的，回来的数据包却没有。我们再到FW2看看是否有会话表项。<br><img src=\"https://img-blog.csdnimg.cn/20200328122927343.png\" alt=\"在这里插入图片描述\"><br>从上图可以看到FW2上没有发现会话表项。说明数据包没有到达FW2上。这是为什么呢？<br><strong>因为我们只放通了业务上策略，而没有放通ipsec VPN协商所需要的策略。</strong><br><img src=\"https://img-blog.csdnimg.cn/20200328123000674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">从上图看到IPsec VPN没有协商成功，导致数据包没有发送到FW2上。</p>\n<h2 id=\"步骤5-配置IPsec-VPN-的域间策略\"><a href=\"#步骤5-配置IPsec-VPN-的域间策略\" class=\"headerlink\" title=\"步骤5:配置IPsec VPN 的域间策略\"></a>步骤5:配置IPsec VPN 的域间策略</h2><p>1)、定义服务集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ip service-set  ike type object</span><br><span class=\"line\">[FW1-object-service-set-ike]service 0 protocol udp destination-port 500</span><br><span class=\"line\">[FW2]ip service-set  ike type object</span><br><span class=\"line\">[FW2-object-service-set-ike]service 0 protocol udp destination-port 500</span><br></pre></td></tr></table></figure>\n<p>2)、在防火墙上放通策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1-policy-security]rule name ike_out</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] source-zone local</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] destination-zone  untrust</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] source-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] destination-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW1-policy-security]rule name ike_in</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] source-zone untrust</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] destination-zone local</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] source-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] destination-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW1-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW1-policy-security-rule-ike_in] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW2-policy-security] rule name ike_out</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]source-zone local</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]source-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] destination-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] source-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out] action permit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW2-policy-security]rule name ike_in</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] source-zone untrust</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] destination-zone local</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] source-address 202.1.1.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] destination-address 202.1.2.1 mask 255.255.255.255</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service ike</span><br><span class=\"line\">[FW2-policy-security-rule-ike_out]service esp</span><br><span class=\"line\">[FW2-policy-security-rule-ike_in] action permit</span><br></pre></td></tr></table></figure>\n<p>到此，所有需要的策略都放通了，接着来验证一下吧，首先还是从PC1发起PING包，接着，在FW1查看会话表项，如下图<br><img src=\"https://img-blog.csdnimg.cn/2020032812323797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>从上图可以看到，FW1上的会话表项数据包已经出现有去有回的，再看看IKE协商情况吧，如下图<br><img src=\"https://img-blog.csdnimg.cn/20200328123251587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">从上图可以看到，FW1上的IKE已经协商成功了。再看看FW2防火墙上的会话表项吧，如下图<br><img src=\"https://img-blog.csdnimg.cn/20200328123303501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>从上图可看到，FW2上的会话表项也出现了PING包，证明了PC1到PC2已经连通了，如下图<br><img src=\"https://img-blog.csdnimg.cn/20200328123316242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI4NTIxNDg3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>更多精彩内容请关注我的<a href=\"https://www.toutiao.com/c/user/68783357974/#mid=1609422238702596\" target=\"_blank\" rel=\"noopener\">头条号</a></p>\n"},{"title":"网络通信基础","keywords":"网络类型、局域网、广域网、网络拓扑形态、通信介质、通信方式","description":"网络类型、局域网、广域网、网络拓扑形态、通信介质、通信方式","cover":"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg","abbrlink":"5888fee2","date":"2020-03-08T15:25:08.000Z","top_img":null,"copyright":null,"_content":"\n> 我们常常听说局域网、广域网、私网、公网、内网、外网、电路交换网络。包交换网络、环型网、星型网、光网络等数不胜数的网络术语，它们都与网络有关。\n\n![图片](https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg)\n\n# 局域网和广域网\n\n按照地理覆盖范围来划分，则网络可以分为局域网和广域网。局域网和广域网分别有哪些技术？\n\n## 局域网\n\n局域网常用技术如下：\n\n-  **令牌总线（Token Bus）**\n-  **令牌环（Token Ring）**\n-  **光纤分布式数据接口(FDDI)**\n-  **以太网（Ethernet）**\n-  **无线局域网(WLAN)**\n\n## 广域网\n\n广域网常用技术如下：\n\n-  **T**1/E1、T3/E3**\n- ​    **X.25**\n- ​    **高级数据链路控制（HDLC）**\n- ​    **点对点协议（PPP）**\n- ​    **综合业务数字网（ISDN）**\n- ​    **帧中继（FR）**\n- ​    **异步传输模式(ATM)**\n- ​    同步数字体系（SDH）**\n\n# 网络拓扑形态\n\n除了可以根据地理覆盖范围划分网络类型以外，还可以根据网络的拓扑形态来划分网络类型。网络拓扑是网络结构的一种图形化展示方式。常用的网络拓扑形态有如下：\n\n## 星型网络\n\n所有节点通过一个中心节点连接到一起。如下图\n\n![图片](https://tva2.sinaimg.cn/large/9fc55f55ly1gcmxwerhrkj20hs0bv7a8.jpg)\n\n优点：很容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络监控。\n\n缺点：中心节点的故障会影响到整个网络的通信。\n\n## 总线型网络\n\n所有的节点通过一条总线(如同轴电缆)连接在一起。\n\n![image](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxxoazmyj20ql08cq3d.jpg)\n\n优点：安装简单、节省线缆。某一节点故障一般不会影响到整个网络的通信。\n\n缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点收到，安全性低。\n\n## 环型网络\n\n所有节点连接成一个封闭的环型\n\n![图片](https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxyg6655j20hs0bvdpx.jpg)\n\n优点：节省线缆\n\n缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点已形成新的环。\n\n## 树型网络\n\n树型结构实际上是一种层次化的星型结构。\n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxzdrat3j20hs0ak0vr.jpg)\n\n优点：能够快速将多个星型网络连接在一起，易于扩充网络规模\n\n缺点：层级越高的节点故障导致的网络问题越严重\n\n# 传输介质\n\n现代通信技术所用的物理信号主要是光、电信号，所使用的传输介质主要有空间、金属导线和玻璃纤维三大类。\n\n## 同轴电缆\n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcmy118kx8j20hs06ydhz.jpg)\n\n早期的以太网是总线型网络，所使用的总线便是同轴电缆。目前，以太网已经演化成一种新型网络，不再使用同轴电缆，而是使用双绞线或者光纤。\n\n## 双绞线\n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gcmy1ccpwyj20hs0gaaii.jpg)\n\n双绞线可以分为屏蔽双绞线(STP)和无屏蔽双绞线(UTP)两种。根据材料及规格的不同，双绞线分为不同的类别，如三类双绞线、五类双绞线、超五类型双绞线等。为了保证信号在传输过程中的衰减不至于太大，其最大允许的传输距离均规定为100m。\n\n## 光纤\n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gcmy1qph6qj20hs0bvjxi.jpg)\n\n在光网络通信系统中，光纤中传递的是一种波长在红外波段的、肉眼不可见的红外光。根据组成结构的差异，光纤可以分为单模和多模光纤。单模光纤纤芯较细，覆盖较厚；多模光纤的纤芯较粗，覆盖较薄。多模光纤多用于局域网网络，传输距离较小(一般在几公里之内)；单模光纤多用于广域网，传输距离较大(可长达上千公里)。\n\n# 通信方式\n\n## 串行通信和并行通信\n\n串行通信是指在一条数据通道上，将数据一位一位地依次传输的通信方式。串行通信一次只能传输一个“0”或一个“1”。\n\n并行传输是指一组数据通道上，将数据一组一组地依次传输的通信方式。并行通信一次能够传输多个“0”和“1”。\n\n## 单工、半双工、全双工通信方式\n\n单工方式中、信息的流向只能由一方指向另一方。广播通信系统、传统的模拟电视系统等都是单工通信方式。\n\n半双工方式中，信息的流向可以从A到B，也可以从B到A，但信息不能同时在两个方向上进行传递。对讲机系统就是半双工通信方式。\n\n全双工方式中，信息可以同时在两个方向上进行传递。也就是说，A，B双方可以同时发送并接收数据","source":"_posts/网络通信基础.md","raw":"---\ntitle: 网络通信基础\ntags:\n  - 数通\ncategories: 数通\nkeywords: 网络类型、局域网、广域网、网络拓扑形态、通信介质、通信方式\ndescription: 网络类型、局域网、广域网、网络拓扑形态、通信介质、通信方式\ncover: 'https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg'\nabbrlink: 5888fee2\ndate: 2020-03-08 23:25:08\ntop_img:\ncopyright:\n---\n\n> 我们常常听说局域网、广域网、私网、公网、内网、外网、电路交换网络。包交换网络、环型网、星型网、光网络等数不胜数的网络术语，它们都与网络有关。\n\n![图片](https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg)\n\n# 局域网和广域网\n\n按照地理覆盖范围来划分，则网络可以分为局域网和广域网。局域网和广域网分别有哪些技术？\n\n## 局域网\n\n局域网常用技术如下：\n\n-  **令牌总线（Token Bus）**\n-  **令牌环（Token Ring）**\n-  **光纤分布式数据接口(FDDI)**\n-  **以太网（Ethernet）**\n-  **无线局域网(WLAN)**\n\n## 广域网\n\n广域网常用技术如下：\n\n-  **T**1/E1、T3/E3**\n- ​    **X.25**\n- ​    **高级数据链路控制（HDLC）**\n- ​    **点对点协议（PPP）**\n- ​    **综合业务数字网（ISDN）**\n- ​    **帧中继（FR）**\n- ​    **异步传输模式(ATM)**\n- ​    同步数字体系（SDH）**\n\n# 网络拓扑形态\n\n除了可以根据地理覆盖范围划分网络类型以外，还可以根据网络的拓扑形态来划分网络类型。网络拓扑是网络结构的一种图形化展示方式。常用的网络拓扑形态有如下：\n\n## 星型网络\n\n所有节点通过一个中心节点连接到一起。如下图\n\n![图片](https://tva2.sinaimg.cn/large/9fc55f55ly1gcmxwerhrkj20hs0bv7a8.jpg)\n\n优点：很容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络监控。\n\n缺点：中心节点的故障会影响到整个网络的通信。\n\n## 总线型网络\n\n所有的节点通过一条总线(如同轴电缆)连接在一起。\n\n![image](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxxoazmyj20ql08cq3d.jpg)\n\n优点：安装简单、节省线缆。某一节点故障一般不会影响到整个网络的通信。\n\n缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点收到，安全性低。\n\n## 环型网络\n\n所有节点连接成一个封闭的环型\n\n![图片](https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxyg6655j20hs0bvdpx.jpg)\n\n优点：节省线缆\n\n缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点已形成新的环。\n\n## 树型网络\n\n树型结构实际上是一种层次化的星型结构。\n\n![图片](https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxzdrat3j20hs0ak0vr.jpg)\n\n优点：能够快速将多个星型网络连接在一起，易于扩充网络规模\n\n缺点：层级越高的节点故障导致的网络问题越严重\n\n# 传输介质\n\n现代通信技术所用的物理信号主要是光、电信号，所使用的传输介质主要有空间、金属导线和玻璃纤维三大类。\n\n## 同轴电缆\n\n![图片](https://tva4.sinaimg.cn/large/9fc55f55ly1gcmy118kx8j20hs06ydhz.jpg)\n\n早期的以太网是总线型网络，所使用的总线便是同轴电缆。目前，以太网已经演化成一种新型网络，不再使用同轴电缆，而是使用双绞线或者光纤。\n\n## 双绞线\n\n![图片](https://tvax3.sinaimg.cn/large/9fc55f55ly1gcmy1ccpwyj20hs0gaaii.jpg)\n\n双绞线可以分为屏蔽双绞线(STP)和无屏蔽双绞线(UTP)两种。根据材料及规格的不同，双绞线分为不同的类别，如三类双绞线、五类双绞线、超五类型双绞线等。为了保证信号在传输过程中的衰减不至于太大，其最大允许的传输距离均规定为100m。\n\n## 光纤\n\n![图片](https://tva3.sinaimg.cn/large/9fc55f55ly1gcmy1qph6qj20hs0bvjxi.jpg)\n\n在光网络通信系统中，光纤中传递的是一种波长在红外波段的、肉眼不可见的红外光。根据组成结构的差异，光纤可以分为单模和多模光纤。单模光纤纤芯较细，覆盖较厚；多模光纤的纤芯较粗，覆盖较薄。多模光纤多用于局域网网络，传输距离较小(一般在几公里之内)；单模光纤多用于广域网，传输距离较大(可长达上千公里)。\n\n# 通信方式\n\n## 串行通信和并行通信\n\n串行通信是指在一条数据通道上，将数据一位一位地依次传输的通信方式。串行通信一次只能传输一个“0”或一个“1”。\n\n并行传输是指一组数据通道上，将数据一组一组地依次传输的通信方式。并行通信一次能够传输多个“0”和“1”。\n\n## 单工、半双工、全双工通信方式\n\n单工方式中、信息的流向只能由一方指向另一方。广播通信系统、传统的模拟电视系统等都是单工通信方式。\n\n半双工方式中，信息的流向可以从A到B，也可以从B到A，但信息不能同时在两个方向上进行传递。对讲机系统就是半双工通信方式。\n\n全双工方式中，信息可以同时在两个方向上进行传递。也就是说，A，B双方可以同时发送并接收数据","slug":"网络通信基础","published":1,"updated":"2020-03-08T15:41:48.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qle002xtvm0bis2cdro","content":"<blockquote>\n<p>我们常常听说局域网、广域网、私网、公网、内网、外网、电路交换网络。包交换网络、环型网、星型网、光网络等数不胜数的网络术语，它们都与网络有关。</p>\n</blockquote>\n<p><a href=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg\" class=\"lazyload\"></a></p>\n<h1 id=\"局域网和广域网\"><a href=\"#局域网和广域网\" class=\"headerlink\" title=\"局域网和广域网\"></a>局域网和广域网</h1><p>按照地理覆盖范围来划分，则网络可以分为局域网和广域网。局域网和广域网分别有哪些技术？</p>\n<h2 id=\"局域网\"><a href=\"#局域网\" class=\"headerlink\" title=\"局域网\"></a>局域网</h2><p>局域网常用技术如下：</p>\n<ul>\n<li><strong>令牌总线（Token Bus）</strong></li>\n<li><strong>令牌环（Token Ring）</strong></li>\n<li><strong>光纤分布式数据接口(FDDI)</strong></li>\n<li><strong>以太网（Ethernet）</strong></li>\n<li><strong>无线局域网(WLAN)</strong></li>\n</ul>\n<h2 id=\"广域网\"><a href=\"#广域网\" class=\"headerlink\" title=\"广域网\"></a>广域网</h2><p>广域网常用技术如下：</p>\n<ul>\n<li><strong>T</strong>1/E1、T3/E3**</li>\n<li>​    <strong>X.25</strong></li>\n<li>​    <strong>高级数据链路控制（HDLC）</strong></li>\n<li>​    <strong>点对点协议（PPP）</strong></li>\n<li>​    <strong>综合业务数字网（ISDN）</strong></li>\n<li>​    <strong>帧中继（FR）</strong></li>\n<li>​    <strong>异步传输模式(ATM)</strong></li>\n<li>​    同步数字体系（SDH）**</li>\n</ul>\n<h1 id=\"网络拓扑形态\"><a href=\"#网络拓扑形态\" class=\"headerlink\" title=\"网络拓扑形态\"></a>网络拓扑形态</h1><p>除了可以根据地理覆盖范围划分网络类型以外，还可以根据网络的拓扑形态来划分网络类型。网络拓扑是网络结构的一种图形化展示方式。常用的网络拓扑形态有如下：</p>\n<h2 id=\"星型网络\"><a href=\"#星型网络\" class=\"headerlink\" title=\"星型网络\"></a>星型网络</h2><p>所有节点通过一个中心节点连接到一起。如下图</p>\n<p><a href=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcmxwerhrkj20hs0bv7a8.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcmxwerhrkj20hs0bv7a8.jpg\" class=\"lazyload\"></a></p>\n<p>优点：很容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络监控。</p>\n<p>缺点：中心节点的故障会影响到整个网络的通信。</p>\n<h2 id=\"总线型网络\"><a href=\"#总线型网络\" class=\"headerlink\" title=\"总线型网络\"></a>总线型网络</h2><p>所有的节点通过一条总线(如同轴电缆)连接在一起。</p>\n<p><a href=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxxoazmyj20ql08cq3d.jpg\" data-fancybox=\"group\" data-caption=\"image\" class=\"fancybox\"><img alt=\"image\" title=\"image\" data-src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxxoazmyj20ql08cq3d.jpg\" class=\"lazyload\"></a></p>\n<p>优点：安装简单、节省线缆。某一节点故障一般不会影响到整个网络的通信。</p>\n<p>缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点收到，安全性低。</p>\n<h2 id=\"环型网络\"><a href=\"#环型网络\" class=\"headerlink\" title=\"环型网络\"></a>环型网络</h2><p>所有节点连接成一个封闭的环型</p>\n<p><a href=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxyg6655j20hs0bvdpx.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxyg6655j20hs0bvdpx.jpg\" class=\"lazyload\"></a></p>\n<p>优点：节省线缆</p>\n<p>缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点已形成新的环。</p>\n<h2 id=\"树型网络\"><a href=\"#树型网络\" class=\"headerlink\" title=\"树型网络\"></a>树型网络</h2><p>树型结构实际上是一种层次化的星型结构。</p>\n<p><a href=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxzdrat3j20hs0ak0vr.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxzdrat3j20hs0ak0vr.jpg\" class=\"lazyload\"></a></p>\n<p>优点：能够快速将多个星型网络连接在一起，易于扩充网络规模</p>\n<p>缺点：层级越高的节点故障导致的网络问题越严重</p>\n<h1 id=\"传输介质\"><a href=\"#传输介质\" class=\"headerlink\" title=\"传输介质\"></a>传输介质</h1><p>现代通信技术所用的物理信号主要是光、电信号，所使用的传输介质主要有空间、金属导线和玻璃纤维三大类。</p>\n<h2 id=\"同轴电缆\"><a href=\"#同轴电缆\" class=\"headerlink\" title=\"同轴电缆\"></a>同轴电缆</h2><p><a href=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcmy118kx8j20hs06ydhz.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcmy118kx8j20hs06ydhz.jpg\" class=\"lazyload\"></a></p>\n<p>早期的以太网是总线型网络，所使用的总线便是同轴电缆。目前，以太网已经演化成一种新型网络，不再使用同轴电缆，而是使用双绞线或者光纤。</p>\n<h2 id=\"双绞线\"><a href=\"#双绞线\" class=\"headerlink\" title=\"双绞线\"></a>双绞线</h2><p><a href=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcmy1ccpwyj20hs0gaaii.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcmy1ccpwyj20hs0gaaii.jpg\" class=\"lazyload\"></a></p>\n<p>双绞线可以分为屏蔽双绞线(STP)和无屏蔽双绞线(UTP)两种。根据材料及规格的不同，双绞线分为不同的类别，如三类双绞线、五类双绞线、超五类型双绞线等。为了保证信号在传输过程中的衰减不至于太大，其最大允许的传输距离均规定为100m。</p>\n<h2 id=\"光纤\"><a href=\"#光纤\" class=\"headerlink\" title=\"光纤\"></a>光纤</h2><p><a href=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcmy1qph6qj20hs0bvjxi.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcmy1qph6qj20hs0bvjxi.jpg\" class=\"lazyload\"></a></p>\n<p>在光网络通信系统中，光纤中传递的是一种波长在红外波段的、肉眼不可见的红外光。根据组成结构的差异，光纤可以分为单模和多模光纤。单模光纤纤芯较细，覆盖较厚；多模光纤的纤芯较粗，覆盖较薄。多模光纤多用于局域网网络，传输距离较小(一般在几公里之内)；单模光纤多用于广域网，传输距离较大(可长达上千公里)。</p>\n<h1 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h1><h2 id=\"串行通信和并行通信\"><a href=\"#串行通信和并行通信\" class=\"headerlink\" title=\"串行通信和并行通信\"></a>串行通信和并行通信</h2><p>串行通信是指在一条数据通道上，将数据一位一位地依次传输的通信方式。串行通信一次只能传输一个“0”或一个“1”。</p>\n<p>并行传输是指一组数据通道上，将数据一组一组地依次传输的通信方式。并行通信一次能够传输多个“0”和“1”。</p>\n<h2 id=\"单工、半双工、全双工通信方式\"><a href=\"#单工、半双工、全双工通信方式\" class=\"headerlink\" title=\"单工、半双工、全双工通信方式\"></a>单工、半双工、全双工通信方式</h2><p>单工方式中、信息的流向只能由一方指向另一方。广播通信系统、传统的模拟电视系统等都是单工通信方式。</p>\n<p>半双工方式中，信息的流向可以从A到B，也可以从B到A，但信息不能同时在两个方向上进行传递。对讲机系统就是半双工通信方式。</p>\n<p>全双工方式中，信息可以同时在两个方向上进行传递。也就是说，A，B双方可以同时发送并接收数据</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<blockquote>\n<p>我们常常听说局域网、广域网、私网、公网、内网、外网、电路交换网络。包交换网络、环型网、星型网、光网络等数不胜数的网络术语，它们都与网络有关。</p>\n</blockquote>\n<p><img src=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxrtvkndj20hs0clwfq.jpg\" alt=\"图片\"></p>\n<h1 id=\"局域网和广域网\"><a href=\"#局域网和广域网\" class=\"headerlink\" title=\"局域网和广域网\"></a>局域网和广域网</h1><p>按照地理覆盖范围来划分，则网络可以分为局域网和广域网。局域网和广域网分别有哪些技术？</p>\n<h2 id=\"局域网\"><a href=\"#局域网\" class=\"headerlink\" title=\"局域网\"></a>局域网</h2><p>局域网常用技术如下：</p>\n<ul>\n<li><strong>令牌总线（Token Bus）</strong></li>\n<li><strong>令牌环（Token Ring）</strong></li>\n<li><strong>光纤分布式数据接口(FDDI)</strong></li>\n<li><strong>以太网（Ethernet）</strong></li>\n<li><strong>无线局域网(WLAN)</strong></li>\n</ul>\n<h2 id=\"广域网\"><a href=\"#广域网\" class=\"headerlink\" title=\"广域网\"></a>广域网</h2><p>广域网常用技术如下：</p>\n<ul>\n<li><strong>T</strong>1/E1、T3/E3**</li>\n<li>​    <strong>X.25</strong></li>\n<li>​    <strong>高级数据链路控制（HDLC）</strong></li>\n<li>​    <strong>点对点协议（PPP）</strong></li>\n<li>​    <strong>综合业务数字网（ISDN）</strong></li>\n<li>​    <strong>帧中继（FR）</strong></li>\n<li>​    <strong>异步传输模式(ATM)</strong></li>\n<li>​    同步数字体系（SDH）**</li>\n</ul>\n<h1 id=\"网络拓扑形态\"><a href=\"#网络拓扑形态\" class=\"headerlink\" title=\"网络拓扑形态\"></a>网络拓扑形态</h1><p>除了可以根据地理覆盖范围划分网络类型以外，还可以根据网络的拓扑形态来划分网络类型。网络拓扑是网络结构的一种图形化展示方式。常用的网络拓扑形态有如下：</p>\n<h2 id=\"星型网络\"><a href=\"#星型网络\" class=\"headerlink\" title=\"星型网络\"></a>星型网络</h2><p>所有节点通过一个中心节点连接到一起。如下图</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/9fc55f55ly1gcmxwerhrkj20hs0bv7a8.jpg\" alt=\"图片\"></p>\n<p>优点：很容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络监控。</p>\n<p>缺点：中心节点的故障会影响到整个网络的通信。</p>\n<h2 id=\"总线型网络\"><a href=\"#总线型网络\" class=\"headerlink\" title=\"总线型网络\"></a>总线型网络</h2><p>所有的节点通过一条总线(如同轴电缆)连接在一起。</p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxxoazmyj20ql08cq3d.jpg\" alt=\"image\"></p>\n<p>优点：安装简单、节省线缆。某一节点故障一般不会影响到整个网络的通信。</p>\n<p>缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点收到，安全性低。</p>\n<h2 id=\"环型网络\"><a href=\"#环型网络\" class=\"headerlink\" title=\"环型网络\"></a>环型网络</h2><p>所有节点连接成一个封闭的环型</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/9fc55f55ly1gcmxyg6655j20hs0bvdpx.jpg\" alt=\"图片\"></p>\n<p>优点：节省线缆</p>\n<p>缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点已形成新的环。</p>\n<h2 id=\"树型网络\"><a href=\"#树型网络\" class=\"headerlink\" title=\"树型网络\"></a>树型网络</h2><p>树型结构实际上是一种层次化的星型结构。</p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/9fc55f55ly1gcmxzdrat3j20hs0ak0vr.jpg\" alt=\"图片\"></p>\n<p>优点：能够快速将多个星型网络连接在一起，易于扩充网络规模</p>\n<p>缺点：层级越高的节点故障导致的网络问题越严重</p>\n<h1 id=\"传输介质\"><a href=\"#传输介质\" class=\"headerlink\" title=\"传输介质\"></a>传输介质</h1><p>现代通信技术所用的物理信号主要是光、电信号，所使用的传输介质主要有空间、金属导线和玻璃纤维三大类。</p>\n<h2 id=\"同轴电缆\"><a href=\"#同轴电缆\" class=\"headerlink\" title=\"同轴电缆\"></a>同轴电缆</h2><p><img src=\"https://tva4.sinaimg.cn/large/9fc55f55ly1gcmy118kx8j20hs06ydhz.jpg\" alt=\"图片\"></p>\n<p>早期的以太网是总线型网络，所使用的总线便是同轴电缆。目前，以太网已经演化成一种新型网络，不再使用同轴电缆，而是使用双绞线或者光纤。</p>\n<h2 id=\"双绞线\"><a href=\"#双绞线\" class=\"headerlink\" title=\"双绞线\"></a>双绞线</h2><p><img src=\"https://tvax3.sinaimg.cn/large/9fc55f55ly1gcmy1ccpwyj20hs0gaaii.jpg\" alt=\"图片\"></p>\n<p>双绞线可以分为屏蔽双绞线(STP)和无屏蔽双绞线(UTP)两种。根据材料及规格的不同，双绞线分为不同的类别，如三类双绞线、五类双绞线、超五类型双绞线等。为了保证信号在传输过程中的衰减不至于太大，其最大允许的传输距离均规定为100m。</p>\n<h2 id=\"光纤\"><a href=\"#光纤\" class=\"headerlink\" title=\"光纤\"></a>光纤</h2><p><img src=\"https://tva3.sinaimg.cn/large/9fc55f55ly1gcmy1qph6qj20hs0bvjxi.jpg\" alt=\"图片\"></p>\n<p>在光网络通信系统中，光纤中传递的是一种波长在红外波段的、肉眼不可见的红外光。根据组成结构的差异，光纤可以分为单模和多模光纤。单模光纤纤芯较细，覆盖较厚；多模光纤的纤芯较粗，覆盖较薄。多模光纤多用于局域网网络，传输距离较小(一般在几公里之内)；单模光纤多用于广域网，传输距离较大(可长达上千公里)。</p>\n<h1 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h1><h2 id=\"串行通信和并行通信\"><a href=\"#串行通信和并行通信\" class=\"headerlink\" title=\"串行通信和并行通信\"></a>串行通信和并行通信</h2><p>串行通信是指在一条数据通道上，将数据一位一位地依次传输的通信方式。串行通信一次只能传输一个“0”或一个“1”。</p>\n<p>并行传输是指一组数据通道上，将数据一组一组地依次传输的通信方式。并行通信一次能够传输多个“0”和“1”。</p>\n<h2 id=\"单工、半双工、全双工通信方式\"><a href=\"#单工、半双工、全双工通信方式\" class=\"headerlink\" title=\"单工、半双工、全双工通信方式\"></a>单工、半双工、全双工通信方式</h2><p>单工方式中、信息的流向只能由一方指向另一方。广播通信系统、传统的模拟电视系统等都是单工通信方式。</p>\n<p>半双工方式中，信息的流向可以从A到B，也可以从B到A，但信息不能同时在两个方向上进行传递。对讲机系统就是半双工通信方式。</p>\n<p>全双工方式中，信息可以同时在两个方向上进行传递。也就是说，A，B双方可以同时发送并接收数据</p>\n"},{"title":"计算机系统知识","keywords":"数据库系统工程师 计算机系统知识","description":"数据库系统工程师 计算机系统知识","cover":"https://tva3.sinaimg.cn/large/9fc55f55ly1gcfyaomzexj20e60803zy.jpg","abbrlink":"985d18d8","date":"2020-03-02T13:23:19.000Z","top_img":null,"copyright":null,"_content":"\n# 一、计算机的组成\n\n计算机硬件五大部件构成：**控制器、运算器、存储器、输入设备和输出设备**。\n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gcfwli3ldwj20q30dvgwf.jpg)\n\n## （1）运算器\n\n也称算术逻辑单元(ALU)，对数据进行算术运算和逻辑运算。\n\n- 加法强(累加器)\n\n  专门存放算术或逻辑运算的操作数和运算结果的寄存器。\n\n- 程序状态寄存器\n\n  PSW用来存放两类信息：\n\n  一类是体现当前指令执行结果的各种状态信息，如有无进位（CY位），有无溢出（OV位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（P位）等；另一类是存放控制信息，如允许中断(IF位)，跟踪标志（TF位）等  。\n\n## （2）控制器\n\n是分析和执行指令的部件\n\n- 指令寄存器\n- 指令译码器\n- 程序计数器\n- 定时与控制电路\n- 堆栈和堆栈指针\n\n# 二、 数据表示和检验\n\n##  2.1、数的进制\n\n- 十进制\n- 二进制\n- 八进制\n- 十六进制\n\n## 2.2、进制转换\n\n### 十进制转换二进制\n\n把被转换的十进制整数反复地除以2，直到商为0，所得的余数(从末位读起)就是这个数的二进制表示。简称“除2取余法”。\n\n(221)<sub>10</sub> =(11011101)<sub>2</sub>\n\n### 二进制转十进制\n\n方法是：二进制数按权展开求和。\n\n例：(10110)<sub>2</sub>转换成十进制数 (22) <sub>10</sub>\n\n> 0\\*2<sup>0</sup> + 1\\*2<sup>1</sup> + 1\\*2<sup>2</sup>+ 0\\*2<sup>3</sup> + 1\\*2<sup>4</sup> =22\n\n# 三、源码、反码、补码、移码\n\n## 3.1、带符号数的表示\n\n通常的做法是约定一个数的最高位为符号，若该位为0，则表示正数；若该位为1，则表示负数。\n\n\n## 3.2、原码\n\n用最高位表示 符号位，数值部分用二进制绝对值表示，这就是源码的表示方法。\n\n> 例如： +11的原码：0 0001011  -11的原码是：1 0001011\n\n## 3.3、反码\n\n原码变反码规则：正数的反码和其原码形式相同，负数的反码是除符号位，其他各位逐位取反(即0变1,1变为0 )。\n\n> ​             +11的原码：0 0001011  -11的原码是：1 0001011\n>\n> 例如： +11的反码：0 0001011  -11的反码是：1 1110100\n\n\n\n## 3.4、补码\n\n补码规则为：正数的补码和其原码形式相同，负数的补码是原码除符号位以外逐位取反(即0变1,1变为0)，最后在末尾加1.\n\n> ​             +11的原码：0 0001011  -11的原码是：1 0001011\n>\n> 例如： +11的补码：0 0001011  -11的反码是：1 1110101\n>\n> ​           将补码转换为真值：[[X]<sub>补</sub>]<sub>补</sub> =[X]<sub>原</sub>\n\n## 3.5、移码(增码)\n\n无论正数、负数，在补码的基础上对符号位取反，一般用做浮点数的阶码，引入的目的是为了保证浮点的机器码为全0。\n\n> ​            +11的补码：0 0001011  -11的反码是：1 1110101\n>\n> 例如：+11的移码：1 0001011  -11的移码是：0 1110101\n\n# 四、定点数和浮点数\n\n计算机中，通常是用定点数来表示整数和纯小数，分别称为定点整数和定点小数。对于既有整数部分、又有小数部分的数，一般用浮点数表示。 \n\n## 4.1、定点数 \n\n- 定点整数：小数点的位置固定在最低位的右边，不占位 。\n- 定点小数：小数点的位置固定在符号位与最高数值位之间，表示一个纯小数 。\n\n## 4.2、浮点数 \n\n用类似科学计数法来表达，即 \n\n**N =  M \\*R<sup>e</sup>**\n\nM称为尾数， R称为基数， e为阶码（指数） \n\n> 例如 1001.101 的规范浮点数表达为 1.001101 × 23 \n\n浮点数利用指数达到了浮动小数点的效果， 从而灵活地表达更大范围的实数。 ","source":"_posts/计算机系统知识.md","raw":"---\ntitle: 计算机系统知识\ntags:\n  - 数据库系统工程师\ncategories: 数据库系统工程师\nkeywords: 数据库系统工程师 计算机系统知识\ndescription: 数据库系统工程师 计算机系统知识\ncover: 'https://tva3.sinaimg.cn/large/9fc55f55ly1gcfyaomzexj20e60803zy.jpg'\nabbrlink: 985d18d8\ndate: 2020-03-02 21:23:19\ntop_img:\ncopyright:\n---\n\n# 一、计算机的组成\n\n计算机硬件五大部件构成：**控制器、运算器、存储器、输入设备和输出设备**。\n\n![图片](https://tvax4.sinaimg.cn/large/9fc55f55ly1gcfwli3ldwj20q30dvgwf.jpg)\n\n## （1）运算器\n\n也称算术逻辑单元(ALU)，对数据进行算术运算和逻辑运算。\n\n- 加法强(累加器)\n\n  专门存放算术或逻辑运算的操作数和运算结果的寄存器。\n\n- 程序状态寄存器\n\n  PSW用来存放两类信息：\n\n  一类是体现当前指令执行结果的各种状态信息，如有无进位（CY位），有无溢出（OV位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（P位）等；另一类是存放控制信息，如允许中断(IF位)，跟踪标志（TF位）等  。\n\n## （2）控制器\n\n是分析和执行指令的部件\n\n- 指令寄存器\n- 指令译码器\n- 程序计数器\n- 定时与控制电路\n- 堆栈和堆栈指针\n\n# 二、 数据表示和检验\n\n##  2.1、数的进制\n\n- 十进制\n- 二进制\n- 八进制\n- 十六进制\n\n## 2.2、进制转换\n\n### 十进制转换二进制\n\n把被转换的十进制整数反复地除以2，直到商为0，所得的余数(从末位读起)就是这个数的二进制表示。简称“除2取余法”。\n\n(221)<sub>10</sub> =(11011101)<sub>2</sub>\n\n### 二进制转十进制\n\n方法是：二进制数按权展开求和。\n\n例：(10110)<sub>2</sub>转换成十进制数 (22) <sub>10</sub>\n\n> 0\\*2<sup>0</sup> + 1\\*2<sup>1</sup> + 1\\*2<sup>2</sup>+ 0\\*2<sup>3</sup> + 1\\*2<sup>4</sup> =22\n\n# 三、源码、反码、补码、移码\n\n## 3.1、带符号数的表示\n\n通常的做法是约定一个数的最高位为符号，若该位为0，则表示正数；若该位为1，则表示负数。\n\n\n## 3.2、原码\n\n用最高位表示 符号位，数值部分用二进制绝对值表示，这就是源码的表示方法。\n\n> 例如： +11的原码：0 0001011  -11的原码是：1 0001011\n\n## 3.3、反码\n\n原码变反码规则：正数的反码和其原码形式相同，负数的反码是除符号位，其他各位逐位取反(即0变1,1变为0 )。\n\n> ​             +11的原码：0 0001011  -11的原码是：1 0001011\n>\n> 例如： +11的反码：0 0001011  -11的反码是：1 1110100\n\n\n\n## 3.4、补码\n\n补码规则为：正数的补码和其原码形式相同，负数的补码是原码除符号位以外逐位取反(即0变1,1变为0)，最后在末尾加1.\n\n> ​             +11的原码：0 0001011  -11的原码是：1 0001011\n>\n> 例如： +11的补码：0 0001011  -11的反码是：1 1110101\n>\n> ​           将补码转换为真值：[[X]<sub>补</sub>]<sub>补</sub> =[X]<sub>原</sub>\n\n## 3.5、移码(增码)\n\n无论正数、负数，在补码的基础上对符号位取反，一般用做浮点数的阶码，引入的目的是为了保证浮点的机器码为全0。\n\n> ​            +11的补码：0 0001011  -11的反码是：1 1110101\n>\n> 例如：+11的移码：1 0001011  -11的移码是：0 1110101\n\n# 四、定点数和浮点数\n\n计算机中，通常是用定点数来表示整数和纯小数，分别称为定点整数和定点小数。对于既有整数部分、又有小数部分的数，一般用浮点数表示。 \n\n## 4.1、定点数 \n\n- 定点整数：小数点的位置固定在最低位的右边，不占位 。\n- 定点小数：小数点的位置固定在符号位与最高数值位之间，表示一个纯小数 。\n\n## 4.2、浮点数 \n\n用类似科学计数法来表达，即 \n\n**N =  M \\*R<sup>e</sup>**\n\nM称为尾数， R称为基数， e为阶码（指数） \n\n> 例如 1001.101 的规范浮点数表达为 1.001101 × 23 \n\n浮点数利用指数达到了浮动小数点的效果， 从而灵活地表达更大范围的实数。 ","slug":"计算机系统知识","published":1,"updated":"2020-03-02T14:37:45.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8qp7qlf002ytvm075ku1x41","content":"<h1 id=\"一、计算机的组成\"><a href=\"#一、计算机的组成\" class=\"headerlink\" title=\"一、计算机的组成\"></a>一、计算机的组成</h1><p>计算机硬件五大部件构成：<strong>控制器、运算器、存储器、输入设备和输出设备</strong>。</p>\n<p><a href=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcfwli3ldwj20q30dvgwf.jpg\" data-fancybox=\"group\" data-caption=\"图片\" class=\"fancybox\"><img alt=\"图片\" title=\"图片\" data-src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcfwli3ldwj20q30dvgwf.jpg\" class=\"lazyload\"></a></p>\n<h2 id=\"（1）运算器\"><a href=\"#（1）运算器\" class=\"headerlink\" title=\"（1）运算器\"></a>（1）运算器</h2><p>也称算术逻辑单元(ALU)，对数据进行算术运算和逻辑运算。</p>\n<ul>\n<li><p>加法强(累加器)</p>\n<p>专门存放算术或逻辑运算的操作数和运算结果的寄存器。</p>\n</li>\n<li><p>程序状态寄存器</p>\n<p>PSW用来存放两类信息：</p>\n<p>一类是体现当前指令执行结果的各种状态信息，如有无进位（CY位），有无溢出（OV位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（P位）等；另一类是存放控制信息，如允许中断(IF位)，跟踪标志（TF位）等  。</p>\n</li>\n</ul>\n<h2 id=\"（2）控制器\"><a href=\"#（2）控制器\" class=\"headerlink\" title=\"（2）控制器\"></a>（2）控制器</h2><p>是分析和执行指令的部件</p>\n<ul>\n<li>指令寄存器</li>\n<li>指令译码器</li>\n<li>程序计数器</li>\n<li>定时与控制电路</li>\n<li>堆栈和堆栈指针</li>\n</ul>\n<h1 id=\"二、-数据表示和检验\"><a href=\"#二、-数据表示和检验\" class=\"headerlink\" title=\"二、 数据表示和检验\"></a>二、 数据表示和检验</h1><h2 id=\"2-1、数的进制\"><a href=\"#2-1、数的进制\" class=\"headerlink\" title=\"2.1、数的进制\"></a>2.1、数的进制</h2><ul>\n<li>十进制</li>\n<li>二进制</li>\n<li>八进制</li>\n<li>十六进制</li>\n</ul>\n<h2 id=\"2-2、进制转换\"><a href=\"#2-2、进制转换\" class=\"headerlink\" title=\"2.2、进制转换\"></a>2.2、进制转换</h2><h3 id=\"十进制转换二进制\"><a href=\"#十进制转换二进制\" class=\"headerlink\" title=\"十进制转换二进制\"></a>十进制转换二进制</h3><p>把被转换的十进制整数反复地除以2，直到商为0，所得的余数(从末位读起)就是这个数的二进制表示。简称“除2取余法”。</p>\n<p>(221)<sub>10</sub> =(11011101)<sub>2</sub></p>\n<h3 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h3><p>方法是：二进制数按权展开求和。</p>\n<p>例：(10110)<sub>2</sub>转换成十进制数 (22) <sub>10</sub></p>\n<blockquote>\n<p>0*2<sup>0</sup> + 1*2<sup>1</sup> + 1*2<sup>2</sup>+ 0*2<sup>3</sup> + 1*2<sup>4</sup> =22</p>\n</blockquote>\n<h1 id=\"三、源码、反码、补码、移码\"><a href=\"#三、源码、反码、补码、移码\" class=\"headerlink\" title=\"三、源码、反码、补码、移码\"></a>三、源码、反码、补码、移码</h1><h2 id=\"3-1、带符号数的表示\"><a href=\"#3-1、带符号数的表示\" class=\"headerlink\" title=\"3.1、带符号数的表示\"></a>3.1、带符号数的表示</h2><p>通常的做法是约定一个数的最高位为符号，若该位为0，则表示正数；若该位为1，则表示负数。</p>\n<h2 id=\"3-2、原码\"><a href=\"#3-2、原码\" class=\"headerlink\" title=\"3.2、原码\"></a>3.2、原码</h2><p>用最高位表示 符号位，数值部分用二进制绝对值表示，这就是源码的表示方法。</p>\n<blockquote>\n<p>例如： +11的原码：0 0001011  -11的原码是：1 0001011</p>\n</blockquote>\n<h2 id=\"3-3、反码\"><a href=\"#3-3、反码\" class=\"headerlink\" title=\"3.3、反码\"></a>3.3、反码</h2><p>原码变反码规则：正数的反码和其原码形式相同，负数的反码是除符号位，其他各位逐位取反(即0变1,1变为0 )。</p>\n<blockquote>\n<p>​             +11的原码：0 0001011  -11的原码是：1 0001011</p>\n<p>例如： +11的反码：0 0001011  -11的反码是：1 1110100</p>\n</blockquote>\n<h2 id=\"3-4、补码\"><a href=\"#3-4、补码\" class=\"headerlink\" title=\"3.4、补码\"></a>3.4、补码</h2><p>补码规则为：正数的补码和其原码形式相同，负数的补码是原码除符号位以外逐位取反(即0变1,1变为0)，最后在末尾加1.</p>\n<blockquote>\n<p>​             +11的原码：0 0001011  -11的原码是：1 0001011</p>\n<p>例如： +11的补码：0 0001011  -11的反码是：1 1110101</p>\n<p>​           将补码转换为真值：[[X]<sub>补</sub>]<sub>补</sub> =[X]<sub>原</sub></p>\n</blockquote>\n<h2 id=\"3-5、移码-增码\"><a href=\"#3-5、移码-增码\" class=\"headerlink\" title=\"3.5、移码(增码)\"></a>3.5、移码(增码)</h2><p>无论正数、负数，在补码的基础上对符号位取反，一般用做浮点数的阶码，引入的目的是为了保证浮点的机器码为全0。</p>\n<blockquote>\n<p>​            +11的补码：0 0001011  -11的反码是：1 1110101</p>\n<p>例如：+11的移码：1 0001011  -11的移码是：0 1110101</p>\n</blockquote>\n<h1 id=\"四、定点数和浮点数\"><a href=\"#四、定点数和浮点数\" class=\"headerlink\" title=\"四、定点数和浮点数\"></a>四、定点数和浮点数</h1><p>计算机中，通常是用定点数来表示整数和纯小数，分别称为定点整数和定点小数。对于既有整数部分、又有小数部分的数，一般用浮点数表示。 </p>\n<h2 id=\"4-1、定点数\"><a href=\"#4-1、定点数\" class=\"headerlink\" title=\"4.1、定点数\"></a>4.1、定点数</h2><ul>\n<li>定点整数：小数点的位置固定在最低位的右边，不占位 。</li>\n<li>定点小数：小数点的位置固定在符号位与最高数值位之间，表示一个纯小数 。</li>\n</ul>\n<h2 id=\"4-2、浮点数\"><a href=\"#4-2、浮点数\" class=\"headerlink\" title=\"4.2、浮点数\"></a>4.2、浮点数</h2><p>用类似科学计数法来表达，即 </p>\n<p><strong>N =  M *R<sup>e</sup></strong></p>\n<p>M称为尾数， R称为基数， e为阶码（指数） </p>\n<blockquote>\n<p>例如 1001.101 的规范浮点数表达为 1.001101 × 23 </p>\n</blockquote>\n<p>浮点数利用指数达到了浮动小数点的效果， 从而灵活地表达更大范围的实数。 </p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"佛山康卫虫控","link":"http://www.kwpmp.com/","avatar":"http://www.kwpmp.com/Templates/CompanyDefault/images/ewm.jpg","descr":"康卫虫控致力于有害生物管理服务。"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"一、计算机的组成\"><a href=\"#一、计算机的组成\" class=\"headerlink\" title=\"一、计算机的组成\"></a>一、计算机的组成</h1><p>计算机硬件五大部件构成：<strong>控制器、运算器、存储器、输入设备和输出设备</strong>。</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/9fc55f55ly1gcfwli3ldwj20q30dvgwf.jpg\" alt=\"图片\"></p>\n<h2 id=\"（1）运算器\"><a href=\"#（1）运算器\" class=\"headerlink\" title=\"（1）运算器\"></a>（1）运算器</h2><p>也称算术逻辑单元(ALU)，对数据进行算术运算和逻辑运算。</p>\n<ul>\n<li><p>加法强(累加器)</p>\n<p>专门存放算术或逻辑运算的操作数和运算结果的寄存器。</p>\n</li>\n<li><p>程序状态寄存器</p>\n<p>PSW用来存放两类信息：</p>\n<p>一类是体现当前指令执行结果的各种状态信息，如有无进位（CY位），有无溢出（OV位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（P位）等；另一类是存放控制信息，如允许中断(IF位)，跟踪标志（TF位）等  。</p>\n</li>\n</ul>\n<h2 id=\"（2）控制器\"><a href=\"#（2）控制器\" class=\"headerlink\" title=\"（2）控制器\"></a>（2）控制器</h2><p>是分析和执行指令的部件</p>\n<ul>\n<li>指令寄存器</li>\n<li>指令译码器</li>\n<li>程序计数器</li>\n<li>定时与控制电路</li>\n<li>堆栈和堆栈指针</li>\n</ul>\n<h1 id=\"二、-数据表示和检验\"><a href=\"#二、-数据表示和检验\" class=\"headerlink\" title=\"二、 数据表示和检验\"></a>二、 数据表示和检验</h1><h2 id=\"2-1、数的进制\"><a href=\"#2-1、数的进制\" class=\"headerlink\" title=\"2.1、数的进制\"></a>2.1、数的进制</h2><ul>\n<li>十进制</li>\n<li>二进制</li>\n<li>八进制</li>\n<li>十六进制</li>\n</ul>\n<h2 id=\"2-2、进制转换\"><a href=\"#2-2、进制转换\" class=\"headerlink\" title=\"2.2、进制转换\"></a>2.2、进制转换</h2><h3 id=\"十进制转换二进制\"><a href=\"#十进制转换二进制\" class=\"headerlink\" title=\"十进制转换二进制\"></a>十进制转换二进制</h3><p>把被转换的十进制整数反复地除以2，直到商为0，所得的余数(从末位读起)就是这个数的二进制表示。简称“除2取余法”。</p>\n<p>(221)<sub>10</sub> =(11011101)<sub>2</sub></p>\n<h3 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h3><p>方法是：二进制数按权展开求和。</p>\n<p>例：(10110)<sub>2</sub>转换成十进制数 (22) <sub>10</sub></p>\n<blockquote>\n<p>0*2<sup>0</sup> + 1*2<sup>1</sup> + 1*2<sup>2</sup>+ 0*2<sup>3</sup> + 1*2<sup>4</sup> =22</p>\n</blockquote>\n<h1 id=\"三、源码、反码、补码、移码\"><a href=\"#三、源码、反码、补码、移码\" class=\"headerlink\" title=\"三、源码、反码、补码、移码\"></a>三、源码、反码、补码、移码</h1><h2 id=\"3-1、带符号数的表示\"><a href=\"#3-1、带符号数的表示\" class=\"headerlink\" title=\"3.1、带符号数的表示\"></a>3.1、带符号数的表示</h2><p>通常的做法是约定一个数的最高位为符号，若该位为0，则表示正数；若该位为1，则表示负数。</p>\n<h2 id=\"3-2、原码\"><a href=\"#3-2、原码\" class=\"headerlink\" title=\"3.2、原码\"></a>3.2、原码</h2><p>用最高位表示 符号位，数值部分用二进制绝对值表示，这就是源码的表示方法。</p>\n<blockquote>\n<p>例如： +11的原码：0 0001011  -11的原码是：1 0001011</p>\n</blockquote>\n<h2 id=\"3-3、反码\"><a href=\"#3-3、反码\" class=\"headerlink\" title=\"3.3、反码\"></a>3.3、反码</h2><p>原码变反码规则：正数的反码和其原码形式相同，负数的反码是除符号位，其他各位逐位取反(即0变1,1变为0 )。</p>\n<blockquote>\n<p>​             +11的原码：0 0001011  -11的原码是：1 0001011</p>\n<p>例如： +11的反码：0 0001011  -11的反码是：1 1110100</p>\n</blockquote>\n<h2 id=\"3-4、补码\"><a href=\"#3-4、补码\" class=\"headerlink\" title=\"3.4、补码\"></a>3.4、补码</h2><p>补码规则为：正数的补码和其原码形式相同，负数的补码是原码除符号位以外逐位取反(即0变1,1变为0)，最后在末尾加1.</p>\n<blockquote>\n<p>​             +11的原码：0 0001011  -11的原码是：1 0001011</p>\n<p>例如： +11的补码：0 0001011  -11的反码是：1 1110101</p>\n<p>​           将补码转换为真值：[[X]<sub>补</sub>]<sub>补</sub> =[X]<sub>原</sub></p>\n</blockquote>\n<h2 id=\"3-5、移码-增码\"><a href=\"#3-5、移码-增码\" class=\"headerlink\" title=\"3.5、移码(增码)\"></a>3.5、移码(增码)</h2><p>无论正数、负数，在补码的基础上对符号位取反，一般用做浮点数的阶码，引入的目的是为了保证浮点的机器码为全0。</p>\n<blockquote>\n<p>​            +11的补码：0 0001011  -11的反码是：1 1110101</p>\n<p>例如：+11的移码：1 0001011  -11的移码是：0 1110101</p>\n</blockquote>\n<h1 id=\"四、定点数和浮点数\"><a href=\"#四、定点数和浮点数\" class=\"headerlink\" title=\"四、定点数和浮点数\"></a>四、定点数和浮点数</h1><p>计算机中，通常是用定点数来表示整数和纯小数，分别称为定点整数和定点小数。对于既有整数部分、又有小数部分的数，一般用浮点数表示。 </p>\n<h2 id=\"4-1、定点数\"><a href=\"#4-1、定点数\" class=\"headerlink\" title=\"4.1、定点数\"></a>4.1、定点数</h2><ul>\n<li>定点整数：小数点的位置固定在最低位的右边，不占位 。</li>\n<li>定点小数：小数点的位置固定在符号位与最高数值位之间，表示一个纯小数 。</li>\n</ul>\n<h2 id=\"4-2、浮点数\"><a href=\"#4-2、浮点数\" class=\"headerlink\" title=\"4.2、浮点数\"></a>4.2、浮点数</h2><p>用类似科学计数法来表达，即 </p>\n<p><strong>N =  M *R<sup>e</sup></strong></p>\n<p>M称为尾数， R称为基数， e为阶码（指数） </p>\n<blockquote>\n<p>例如 1001.101 的规范浮点数表达为 1.001101 × 23 </p>\n</blockquote>\n<p>浮点数利用指数达到了浮动小数点的效果， 从而灵活地表达更大范围的实数。 </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8qp7mto0001tvm0conj0mww","category_id":"ck8qp7mtt0003tvm02z8w9veu","_id":"ck8qp7mu4000dtvm0659w28dr"},{"post_id":"ck8qp7mu1000btvm07j764yst","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mua000ktvm0cau56h7c"},{"post_id":"ck8qp7mtr0002tvm0b5ijghsn","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7muc000ptvm0ha0w4v13"},{"post_id":"ck8qp7mu4000ctvm07tha9cx8","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mui000stvm03l2zhqfg"},{"post_id":"ck8qp7mu7000htvm0hp111w41","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7muk000xtvm0cxtf6ytv"},{"post_id":"ck8qp7mtw0005tvm06eo12z56","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mum0010tvm04o2rdbvz"},{"post_id":"ck8qp7mu9000jtvm0cg3288l8","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7muo0013tvm0erh82mb8"},{"post_id":"ck8qp7muc000otvm0gii5hzv8","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mup0016tvm07uct8ndf"},{"post_id":"ck8qp7mtx0006tvm079j391q9","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mur0019tvm08po17zeh"},{"post_id":"ck8qp7mud000rtvm05wwmamxu","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mus001ctvm0ac1earyq"},{"post_id":"ck8qp7muk000wtvm0d3bucsiu","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7muu001ftvm0h2a61rq3"},{"post_id":"ck8qp7mtz0007tvm02tjd8b1t","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7muv001itvm079ah4he7"},{"post_id":"ck8qp7mul000ztvm0fyrlbut3","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mva001ltvm025ds3lqv"},{"post_id":"ck8qp7mun0012tvm018vk86vi","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvc001otvm05eiq7d1l"},{"post_id":"ck8qp7mup0015tvm09j614h10","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvd001rtvm0dz8c8p6i"},{"post_id":"ck8qp7muq0018tvm0elti8fem","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mve001utvm0g9d00xer"},{"post_id":"ck8qp7mur001btvm0atb50rjb","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvg001xtvm0a233egbj"},{"post_id":"ck8qp7mut001etvm009x53bzu","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvg001ztvm0bu2x8ma9"},{"post_id":"ck8qp7muu001htvm0dc2lha71","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvh0021tvm008679n73"},{"post_id":"ck8qp7muv001ktvm0b2zdhhb7","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvi0023tvm09wgpa1om"},{"post_id":"ck8qp7mvb001ntvm08rqigjzb","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvi0025tvm0bzqj92kv"},{"post_id":"ck8qp7mvc001qtvm0ac644bsl","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvj0027tvm01casgfk4"},{"post_id":"ck8qp7mve001ttvm025k71um5","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvj0029tvm0fply9iei"},{"post_id":"ck8qp7mvf001wtvm07iyjgjej","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7mvk002atvm06gdrefvb"},{"post_id":"ck8qp7qkq002btvm0hmx31xqd","category_id":"ck8qp7mtz0008tvm051gs2je6","_id":"ck8qp7ql6002ltvm0gmdia1wj"},{"post_id":"ck8qp7qkx002dtvm0hp562jm9","category_id":"ck8qp7ql3002itvm0bb4234ed","_id":"ck8qp7qld002utvm0hk2421io"},{"post_id":"ck8qp7ql1002gtvm0ficx6a68","category_id":"ck8qp7ql3002itvm0bb4234ed","_id":"ck8qp7qlg002ztvm0cors3cy2"},{"post_id":"ck8qp7qlc002stvm06cps6bb3","category_id":"ck8qp7ql3002itvm0bb4234ed","_id":"ck8qp7qlh0033tvm06a8393x9"},{"post_id":"ck8qp7qle002xtvm0bis2cdro","category_id":"ck8qp7ql3002itvm0bb4234ed","_id":"ck8qp7qli0035tvm0bqxkezum"},{"post_id":"ck8qp7ql5002ktvm0b88hbxcy","category_id":"ck8qp7qld002ttvm02aynfsgg","_id":"ck8qp7qlj0038tvm07p4jaoep"},{"post_id":"ck8qp7ql7002mtvm0b3s1dshm","category_id":"ck8qp7qlg0030tvm03syd4gzm","_id":"ck8qp7qlj003atvm006uo3gql"},{"post_id":"ck8qp7ql8002ntvm0fxos8ix5","category_id":"ck8qp7qli0036tvm05sns5ey4","_id":"ck8qp7qll003ftvm0cy75d8aa"},{"post_id":"ck8qp7qlb002rtvm074vwf9ay","category_id":"ck8qp7qli0036tvm05sns5ey4","_id":"ck8qp7qlm003itvm04014f1uh"},{"post_id":"ck8qp7qlf002ytvm075ku1x41","category_id":"ck8qp7qli0036tvm05sns5ey4","_id":"ck8qp7qln003ltvm01fmy8wdx"}],"PostTag":[{"post_id":"ck8qp7mto0001tvm0conj0mww","tag_id":"ck8qp7mtv0004tvm092nihu1l","_id":"ck8qp7mu1000atvm01bvb0c0k"},{"post_id":"ck8qp7mu1000btvm07j764yst","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mu7000gtvm06xezbynf"},{"post_id":"ck8qp7mtr0002tvm0b5ijghsn","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mu8000itvm029udeyhw"},{"post_id":"ck8qp7mu4000ctvm07tha9cx8","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mub000ntvm0c8wj8pp8"},{"post_id":"ck8qp7mu7000htvm0hp111w41","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mud000qtvm0gjf2en1l"},{"post_id":"ck8qp7mtw0005tvm06eo12z56","tag_id":"ck8qp7mu5000ftvm085t4529b","_id":"ck8qp7muj000vtvm08cl63fc8"},{"post_id":"ck8qp7mu9000jtvm0cg3288l8","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mul000ytvm08boz9i1g"},{"post_id":"ck8qp7muc000otvm0gii5hzv8","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mun0011tvm02g8c8gh8"},{"post_id":"ck8qp7mtx0006tvm079j391q9","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7muo0014tvm09fc6dpui"},{"post_id":"ck8qp7mud000rtvm05wwmamxu","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7muq0017tvm0gsi09b89"},{"post_id":"ck8qp7muk000wtvm0d3bucsiu","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mur001atvm0hmhy8p3s"},{"post_id":"ck8qp7mtz0007tvm02tjd8b1t","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mut001dtvm0c2po1wy5"},{"post_id":"ck8qp7mul000ztvm0fyrlbut3","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7muu001gtvm0hxbea236"},{"post_id":"ck8qp7mun0012tvm018vk86vi","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7muv001jtvm0ay7a4fkt"},{"post_id":"ck8qp7mup0015tvm09j614h10","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvb001mtvm00ctp328v"},{"post_id":"ck8qp7muq0018tvm0elti8fem","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvc001ptvm09sr684ee"},{"post_id":"ck8qp7mur001btvm0atb50rjb","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mve001stvm00ld8gcab"},{"post_id":"ck8qp7mut001etvm009x53bzu","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvf001vtvm0awq301u9"},{"post_id":"ck8qp7muu001htvm0dc2lha71","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvg001ytvm0eyrgfcxq"},{"post_id":"ck8qp7muv001ktvm0b2zdhhb7","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvh0020tvm0grls7vod"},{"post_id":"ck8qp7mvb001ntvm08rqigjzb","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvi0022tvm00hdt0jyv"},{"post_id":"ck8qp7mvc001qtvm0ac644bsl","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvi0024tvm05amv14x3"},{"post_id":"ck8qp7mve001ttvm025k71um5","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvi0026tvm006pjenlh"},{"post_id":"ck8qp7mvf001wtvm07iyjgjej","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7mvj0028tvm0gflq0ncw"},{"post_id":"ck8qp7qkq002btvm0hmx31xqd","tag_id":"ck8qp7mu00009tvm05io58xfh","_id":"ck8qp7ql1002ftvm04pmp28ex"},{"post_id":"ck8qp7qkx002dtvm0hp562jm9","tag_id":"ck8qp7ql4002jtvm02fxdb5k8","_id":"ck8qp7qlb002qtvm0e1i5au3m"},{"post_id":"ck8qp7ql1002gtvm0ficx6a68","tag_id":"ck8qp7ql4002jtvm02fxdb5k8","_id":"ck8qp7qle002wtvm0gbah0n6c"},{"post_id":"ck8qp7qle002xtvm0bis2cdro","tag_id":"ck8qp7ql4002jtvm02fxdb5k8","_id":"ck8qp7qlh0032tvm07pxehtnr"},{"post_id":"ck8qp7ql5002ktvm0b88hbxcy","tag_id":"ck8qp7qld002vtvm01dpvdmeq","_id":"ck8qp7qlh0034tvm05ywv57o4"},{"post_id":"ck8qp7ql7002mtvm0b3s1dshm","tag_id":"ck8qp7qlh0031tvm0b4iz15qd","_id":"ck8qp7qlj0039tvm00auqay87"},{"post_id":"ck8qp7ql8002ntvm0fxos8ix5","tag_id":"ck8qp7qli0037tvm00bo5a33i","_id":"ck8qp7qll003dtvm02legcmt4"},{"post_id":"ck8qp7qlb002rtvm074vwf9ay","tag_id":"ck8qp7qli0037tvm00bo5a33i","_id":"ck8qp7qlm003htvm0b95w2fdl"},{"post_id":"ck8qp7qlc002stvm06cps6bb3","tag_id":"ck8qp7qll003gtvm08ugj07tp","_id":"ck8qp7qln003ktvm0735c9tke"},{"post_id":"ck8qp7qlf002ytvm075ku1x41","tag_id":"ck8qp7qli0037tvm00bo5a33i","_id":"ck8qp7qlo003mtvm0f7zief1r"}],"Tag":[{"name":"Docker","_id":"ck8qp7mtv0004tvm092nihu1l"},{"name":"Mysql","_id":"ck8qp7mu00009tvm05io58xfh"},{"name":"MySQL","_id":"ck8qp7mu5000ftvm085t4529b"},{"name":"数通","_id":"ck8qp7ql4002jtvm02fxdb5k8"},{"name":"centos7","_id":"ck8qp7qld002vtvm01dpvdmeq"},{"name":"python","_id":"ck8qp7qlh0031tvm0b4iz15qd"},{"name":"数据库系统工程师","_id":"ck8qp7qli0037tvm00bo5a33i"},{"name":"IPSec VPN","_id":"ck8qp7qll003gtvm08ugj07tp"}]}}